<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang处理emoji表情转码解码</title>
      <link href="/posts/374365d7.html"/>
      <url>/posts/374365d7.html</url>
      
        <content type="html"><![CDATA[<h4 id="golang处理emoji表情转码解码"><a href="#golang处理emoji表情转码解码" class="headerlink" title="golang处理emoji表情转码解码"></a>golang处理emoji表情转码解码</h4><p>关于golang项目保存emoji表情对utf8格式的数据库会失败，可以先对表情转码存入，然后取值在解码输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// EmojiEncode Emoji表情转码</span><br><span class="line">func EmojiEncode(s string) string &#123;</span><br><span class="line">ret := &quot;&quot;</span><br><span class="line">rs := []rune(s)</span><br><span class="line">for i := 0; i &lt; len(rs); i++ &#123;</span><br><span class="line">if len(string(rs[i])) == 4 &#123;</span><br><span class="line">r1, r2 := utf16.EncodeRune(rs[i])</span><br><span class="line">t1 := &quot;\\u&quot; + fmt.Sprintf(&quot;%x&quot;, r1)</span><br><span class="line">t2 := &quot;\\u&quot; + fmt.Sprintf(&quot;%x&quot;, r2)</span><br><span class="line">ret += t1 + t2</span><br><span class="line">&#125; else &#123;</span><br><span class="line">ret += string(rs[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// EmojiDecode Emoji表情解码</span><br><span class="line">func EmojiDecode(s string) string &#123;</span><br><span class="line">re := regexp.MustCompile(&quot;\\\\u[ed][0-9a-f]&#123;3&#125;\\\\u[ed][0-9a-f]&#123;3&#125;&quot;)</span><br><span class="line">result := re.FindAllString(s, -1)</span><br><span class="line">if len(result) &gt; 0 &#123;</span><br><span class="line">for k := range result &#123;</span><br><span class="line">tmp := result[k]</span><br><span class="line">result[k] = strings.Replace(result[k], &quot;\\u&quot;, &quot;0x&quot;, -1)</span><br><span class="line">cov1, _ := strconv.ParseUint(result[k][:6], 0, 32)</span><br><span class="line">cov2, _ := strconv.ParseUint(result[k][6:], 0, 32)</span><br><span class="line">covResult := fmt.Sprintf(&quot;%c&quot;, utf16.DecodeRune(rune(cov1), rune(cov2)))</span><br><span class="line">s = strings.Replace(s, tmp, covResult, -1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wps专业版激活终身授权</title>
      <link href="/posts/2a5073c4.html"/>
      <url>/posts/2a5073c4.html</url>
      
        <content type="html"><![CDATA[<h4 id="WPS专业版激活终身授权"><a href="#WPS专业版激活终身授权" class="headerlink" title="WPS专业版激活终身授权"></a>WPS专业版激活终身授权</h4><p><a href="https://ep.wps.cn/download">WPS专业版下载地址</a></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/wps-pro-jihuo1.png" alt=""></p><p>右键进入安装位置</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/wps-pro-jihuo2.png" alt=""></p><p>找到acm.dll，将其删除。</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/wps-pro-jihuo3.png" alt=""></p><p>然后打开wps其中一个软件会弹出有提示输入序列号</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/wps-pro-jihuo4.png" alt=""></p><p>输入以下其中一组序列号即可激活</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">序列号：694BF-YUDBG-EAR69-BPRGB-ATQXH</span><br><span class="line"></span><br><span class="line">备用：R8R8P-MTT6F-KLRPM-J7CAB-PJM8C</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/wps-pro-jihuo5.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPS </tag>
            
            <tag> 终身授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔Linux面板-安装golang环境</title>
      <link href="/posts/ae24e9bf.html"/>
      <url>/posts/ae24e9bf.html</url>
      
        <content type="html"><![CDATA[<h4 id="获取go安装包"><a href="#获取go安装包" class="headerlink" title="获取go安装包"></a>获取go安装包</h4><p>官网：<a href="https://golang.org/dl/">https://golang.org/dl/</a>  （需要梯子）<br>国内安装包下载路径：<a href="https://studygolang.com/dl">https://studygolang.com/dl</a></p><h4 id="下载go并解压"><a href="#下载go并解压" class="headerlink" title="下载go并解压"></a>下载go并解压</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /www/server &amp;&amp; wget https://dl.google.com/go/go1.16.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf go1.16.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h4><p>使用 打开/etc/profile 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile 或者 vim /etc/profile</span><br></pre></td></tr></table></figure><p>在最底部添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export GOROOT=/www/server/go</span><br><span class="line">export GOBIN=$GOROOT/bin</span><br><span class="line">export GOPKG=$GOROOT/pkg/tool/linux_amd64</span><br><span class="line">export GOARCH=amd64</span><br><span class="line">export GOOS=linux</span><br><span class="line">export GOPATH=/www/wwwroot/Golang</span><br><span class="line">export PATH=$PATH:$GOBIN:$GOPKG:$GOPATH/bin</span><br></pre></td></tr></table></figure><p>执行命令使环境变量生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="版本检查"><a href="#版本检查" class="headerlink" title="版本检查"></a>版本检查</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><p>输出<code>go version go1.16.5 linux/amd64</code>即为成功</p><h4 id="创建GOROOT目录"><a href="#创建GOROOT目录" class="headerlink" title="创建GOROOT目录"></a>创建GOROOT目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /www/wwwroot/Golang</span><br></pre></td></tr></table></figure><p>至此，后续项目可在<code>Golang</code>目录下搭建</p><h4 id="关于golang版本更新"><a href="#关于golang版本更新" class="headerlink" title="关于golang版本更新"></a>关于golang版本更新</h4><p>执行命令<code>go env</code></p><p>根据<code>GOROOT</code>的路径进行删除，删除命令<code>rm -rm &lt;GOROOT路径&gt;</code></p><p>随后在根据上方 下载go并解压 教程安装即可（注意安装的版本号），由于环境都配置好了，解压之后就行，在通过<code>go env</code>能查看到相应到版本</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TP6+Swoole配置使用</title>
      <link href="/posts/71660b7e.html"/>
      <url>/posts/71660b7e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于当前使用<code>php7.2版本</code>，默认使用<code>composer</code>安装<code>swoole</code>的时候会自动安装<code>3.x</code>版本。</p><p>服务器的扩展安装这里不介绍，另外windows不支持swoole，如果需要，可通过虚拟机或者docker实现</p></blockquote><h4 id="安装swoole"><a href="#安装swoole" class="headerlink" title="安装swoole"></a>安装swoole</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink/think-swoole</span><br></pre></td></tr></table></figure><h4 id="创建事件订阅类"><a href="#创建事件订阅类" class="headerlink" title="创建事件订阅类"></a>创建事件订阅类</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php think make:subscribe WebSocketEvent</span><br></pre></td></tr></table></figure><p>将以下代码覆盖到<code>WebSocketEvent.php</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">declare (strict_types = 1);</span><br><span class="line"></span><br><span class="line">namespace app\subscribe;</span><br><span class="line"></span><br><span class="line">use app\Request;</span><br><span class="line">use Swoole\Server;</span><br><span class="line">use Swoole\WebSocket\Frame;</span><br><span class="line">use think\cache\driver\Redis;</span><br><span class="line">use think\Container;</span><br><span class="line"></span><br><span class="line">class WebSocketEvent</span><br><span class="line">&#123;</span><br><span class="line">    protected $websocket = null;</span><br><span class="line">    protected $server = null;</span><br><span class="line">    </span><br><span class="line">    public function __construct(Server $server, \think\swoole\Websocket $websocket, Container $container)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;websocket = $websocket;//依赖注入的方式</span><br><span class="line">        $this-&gt;server = $server;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    public function onConnect(Request $request)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    // 监听客户连接</span><br><span class="line">    public function onOpen(Request $request)</span><br><span class="line">    &#123;</span><br><span class="line">        $fd = $this-&gt;websocket-&gt;getSender();// 获取连接标识</span><br><span class="line">        $this-&gt;server-&gt;push($fd , &quot;fd:&#123;$fd&#125;连接&quot;);// 发送给客户端</span><br><span class="line">        echo &quot;fd:&#123;$fd&#125;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 监听客户端发送消息</span><br><span class="line">    public function onMessage(Server $server,Frame $frame)</span><br><span class="line">    &#123;</span><br><span class="line">        $fd = $frame-&gt;fd; // 为当前连接唯一值</span><br><span class="line">        $msg = $frame-&gt;data; // 获取得到的消息</span><br><span class="line">        // $this-&gt;server-&gt;push($fd , $msg); // 仅发送给当前连接的客户端</span><br><span class="line">// 发送给所有连接的客户端</span><br><span class="line">        foreach($server-&gt;connections as $fd) &#123;</span><br><span class="line">            $this-&gt;server-&gt;push($fd, $frame-&gt;data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //onClose触发的事件</span><br><span class="line">    public function onClose()</span><br><span class="line">    &#123;</span><br><span class="line">        // 一般做一些资源释放的动作</span><br><span class="line">$fd = $this-&gt;websocket-&gt;getSender();// 获取当前连接值</span><br><span class="line">        echo &quot;fd:&#123;$fd&#125;关闭了连接\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置swoole-php"><a href="#配置swoole-php" class="headerlink" title="配置swoole.php"></a>配置swoole.php</h4><p>修改app/config/swoole.php配置文件，没有的话就去vender扩展里面找think-swoole的扩展文件复制出来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use think\swoole\websocket\socketio\Handler;</span><br><span class="line"></span><br><span class="line">return [</span><br><span class="line">    &#x27;server&#x27;     =&gt; [</span><br><span class="line">        &#x27;host&#x27;      =&gt; env(&#x27;SWOOLE_HOST&#x27;, &#x27;0.0.0.0&#x27;), // 监听地址</span><br><span class="line">        &#x27;port&#x27;      =&gt; env(&#x27;SWOOLE_PORT&#x27;, 9502), // 监听端口</span><br><span class="line">        &#x27;mode&#x27;      =&gt; SWOOLE_PROCESS, // 运行模式 默认为SWOOLE_PROCESS</span><br><span class="line">        &#x27;sock_type&#x27; =&gt; SWOOLE_SOCK_TCP, // sock type 默认为SWOOLE_SOCK_TCP</span><br><span class="line">        &#x27;options&#x27;   =&gt; [</span><br><span class="line">            &#x27;pid_file&#x27;              =&gt; runtime_path() . &#x27;swoole.pid&#x27;,</span><br><span class="line">            &#x27;log_file&#x27;              =&gt; runtime_path() . &#x27;swoole.log&#x27;,</span><br><span class="line">            &#x27;daemonize&#x27;             =&gt; false,</span><br><span class="line">            // Normally this value should be 1~4 times larger according to your cpu cores.</span><br><span class="line">            &#x27;reactor_num&#x27;           =&gt; swoole_cpu_num(),</span><br><span class="line">            &#x27;worker_num&#x27;            =&gt; swoole_cpu_num(),</span><br><span class="line">            &#x27;task_worker_num&#x27;       =&gt; swoole_cpu_num(),</span><br><span class="line">            &#x27;enable_static_handler&#x27; =&gt; true,</span><br><span class="line">            &#x27;document_root&#x27;         =&gt; root_path(&#x27;public&#x27;),</span><br><span class="line">            &#x27;package_max_length&#x27;    =&gt; 20 * 1024 * 1024,</span><br><span class="line">            &#x27;buffer_output_size&#x27;    =&gt; 10 * 1024 * 1024,</span><br><span class="line">            &#x27;socket_buffer_size&#x27;    =&gt; 128 * 1024 * 1024,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    &#x27;websocket&#x27;  =&gt; [</span><br><span class="line">        &#x27;enable&#x27;        =&gt; true,</span><br><span class="line">        // &#x27;handler&#x27;       =&gt; Handler::class,</span><br><span class="line">        &#x27;ping_interval&#x27; =&gt; 25000,</span><br><span class="line">        &#x27;ping_timeout&#x27;  =&gt; 60000,</span><br><span class="line">        &#x27;room&#x27;          =&gt; [</span><br><span class="line">            &#x27;type&#x27;  =&gt; &#x27;table&#x27;,</span><br><span class="line">            &#x27;table&#x27; =&gt; [</span><br><span class="line">                &#x27;room_rows&#x27;   =&gt; 4096,</span><br><span class="line">                &#x27;room_size&#x27;   =&gt; 2048,</span><br><span class="line">                &#x27;client_rows&#x27; =&gt; 8192,</span><br><span class="line">                &#x27;client_size&#x27; =&gt; 2048,</span><br><span class="line">            ],</span><br><span class="line">            &#x27;redis&#x27; =&gt; [</span><br><span class="line">                &#x27;host&#x27;          =&gt; &#x27;127.0.0.1&#x27;,</span><br><span class="line">                &#x27;port&#x27;          =&gt; 6379,</span><br><span class="line">                &#x27;max_active&#x27;    =&gt; 3,</span><br><span class="line">                &#x27;max_wait_time&#x27; =&gt; 5,</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        &#x27;listen&#x27;        =&gt; [],</span><br><span class="line">        &#x27;subscribe&#x27;     =&gt; [</span><br><span class="line">            app\subscribe\WebSocketEvent::class</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    &#x27;rpc&#x27;        =&gt; [</span><br><span class="line">        &#x27;server&#x27; =&gt; [</span><br><span class="line">            &#x27;enable&#x27;   =&gt; false,</span><br><span class="line">            &#x27;port&#x27;     =&gt; 9000,</span><br><span class="line">            &#x27;services&#x27; =&gt; [</span><br><span class="line">            ],</span><br><span class="line">        ],</span><br><span class="line">        &#x27;client&#x27; =&gt; [</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">//热更新</span><br><span class="line">    &#x27;hot_update&#x27; =&gt; [</span><br><span class="line">        // &#x27;enable&#x27;  =&gt; env(&#x27;APP_DEBUG&#x27;, false),</span><br><span class="line">        &#x27;enable&#x27;  =&gt; true,</span><br><span class="line">        &#x27;name&#x27;    =&gt; [&#x27;*.php&#x27;],</span><br><span class="line">        &#x27;include&#x27; =&gt; [app_path()],</span><br><span class="line">        &#x27;exclude&#x27; =&gt; [],</span><br><span class="line">    ],</span><br><span class="line">    //连接池</span><br><span class="line">    &#x27;pool&#x27;       =&gt; [</span><br><span class="line">        &#x27;db&#x27;    =&gt; [</span><br><span class="line">            &#x27;enable&#x27;        =&gt; true,</span><br><span class="line">            &#x27;max_active&#x27;    =&gt; 3,</span><br><span class="line">            &#x27;max_wait_time&#x27; =&gt; 5,</span><br><span class="line">        ],</span><br><span class="line">        &#x27;cache&#x27; =&gt; [</span><br><span class="line">            &#x27;enable&#x27;        =&gt; true,</span><br><span class="line">            &#x27;max_active&#x27;    =&gt; 3,</span><br><span class="line">            &#x27;max_wait_time&#x27; =&gt; 5,</span><br><span class="line">        ],</span><br><span class="line">        //自定义连接池</span><br><span class="line">    ],</span><br><span class="line">    //队列</span><br><span class="line">    &#x27;queue&#x27;      =&gt; [</span><br><span class="line">        &#x27;enable&#x27;  =&gt; false,</span><br><span class="line">        &#x27;workers&#x27; =&gt; [],</span><br><span class="line">    ],</span><br><span class="line">    &#x27;coroutine&#x27;  =&gt; [</span><br><span class="line">        &#x27;enable&#x27; =&gt; true,</span><br><span class="line">        &#x27;flags&#x27;  =&gt; SWOOLE_HOOK_ALL,</span><br><span class="line">    ],</span><br><span class="line">    &#x27;tables&#x27;     =&gt; [],</span><br><span class="line">    //每个worker里需要预加载以共用的实例</span><br><span class="line">    &#x27;concretes&#x27;  =&gt; [],</span><br><span class="line">    //重置器</span><br><span class="line">    &#x27;resetters&#x27;  =&gt; [],</span><br><span class="line">    //每次请求前需要清空的实例</span><br><span class="line">    &#x27;instances&#x27;  =&gt; [],</span><br><span class="line">    //每次请求前需要重新执行的服务</span><br><span class="line">    &#x27;services&#x27;   =&gt; [],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="启动监听"><a href="#启动监听" class="headerlink" title="启动监听"></a>启动监听</h4><p>在根目录下执行<code>php think swoole</code></p><p>在ssh连接可看到下发实例即为成功<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Starting swoole http server...</span><br><span class="line">Swoole http server started: &lt;http://0.0.0.0:9502&gt;</span><br><span class="line">You can exit with `CTRL-C`</span><br></pre></td></tr></table></figure></p><p>如果启动失败，那么可能存在防火墙拦截等问题。</p><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;</span><br><span class="line">    &lt;title&gt;swoole&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input id=&quot;text&quot; value=&quot;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;send&quot; onclick=&quot;start()&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;msg&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">/**</span><br><span class="line">  *0：未连接</span><br><span class="line">  *1：连接成功，可通讯</span><br><span class="line">  *2：正在关闭</span><br><span class="line">  *3：连接已关闭或无法打开</span><br><span class="line">  */</span><br><span class="line">//创建一个webSocket 实例</span><br><span class="line">var webSocket  = new  WebSocket(&quot;ws://服务器IP地址:9502&quot;);</span><br><span class="line"></span><br><span class="line">webSocket.onerror = function (event)&#123;</span><br><span class="line">    document.getElementById(&quot;msg&quot;).innerHTML = &quot;&lt;p&gt;服务器连接错误...&lt;/p&gt;&quot;;</span><br><span class="line">    console.log(&quot;error&quot;+event.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 打开websocket</span><br><span class="line">webSocket.onopen = function (event)&#123;</span><br><span class="line">    console.log(&quot;open:&quot;+sockState());</span><br><span class="line">    document.getElementById(&quot;msg&quot;).innerHTML = &quot;&lt;p&gt;服务器连接成功...&lt;/p&gt;&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//监听消息</span><br><span class="line">webSocket.onmessage = function (event)&#123;</span><br><span class="line">    console.log(&quot;onMessage&quot;);</span><br><span class="line">    console.log(event)</span><br><span class="line">    document.getElementById(&quot;msg&quot;).innerHTML += &quot;&lt;p&gt;响应监听：&quot;+event.data+&quot;&lt;/p&gt;&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">webSocket.onclose = function (event)&#123;</span><br><span class="line">    document.getElementById(&quot;msg&quot;).innerHTML = &quot;&lt;p&gt;服务器连接关闭...&lt;/p&gt;&quot;;</span><br><span class="line">    console.log(&quot;close:&quot;+sockState());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sockState()&#123;</span><br><span class="line">    console.log(webSocket.readyState)</span><br><span class="line">    var status = [&#x27;未连接&#x27;,&#x27;连接成功，可通讯&#x27;,&#x27;正在关闭&#x27;,&#x27;连接已关闭或无法打开&#x27;];</span><br><span class="line">        return status[webSocket.readyState];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function start(event)&#123;</span><br><span class="line">    console.log(webSocket);</span><br><span class="line">    var msg = document.getElementById(&#x27;text&#x27;).value;</span><br><span class="line">    document.getElementById(&#x27;text&#x27;).value = &#x27;&#x27;;</span><br><span class="line">    webSocket.send(msg);</span><br><span class="line">    document.getElementById(&quot;msg&quot;).innerHTML += &quot;&lt;p&gt;request&quot;+msg+&quot;&lt;/p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>客户端页面信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务器连接成功...</span><br><span class="line">响应监听：fd:1连接</span><br><span class="line">request发送的内容</span><br><span class="line">响应监听：发送的内容</span><br></pre></td></tr></table></figure><p>服务端监听信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Starting swoole http server...</span><br><span class="line">Swoole http server started: &lt;http://0.0.0.0:9502&gt;</span><br><span class="line">You can exit with `CTRL-C`</span><br><span class="line">fd:1</span><br><span class="line">连接信息frame：&#123;&quot;fd&quot;:1,&quot;data&quot;:&quot;\u53d1\u9001\u7684\u5185\u5bb9&quot;,&quot;opcode&quot;:1,&quot;flags&quot;:33,&quot;finish&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>以上即为简单配置，更多方法操作可去官网详细了解</p><p>swoole文档：<a href="https://wiki.swoole.com/#/">https://wiki.swoole.com/#/</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
            <tag> ThinkPHP6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件排他锁解决小型并发</title>
      <link href="/posts/955aadbe.html"/>
      <url>/posts/955aadbe.html</url>
      
        <content type="html"><![CDATA[<p>众所周知，并发容易造成数据重复处理或者商品超卖等等情况； 如果使用数据库排他锁消耗的资源相对较高，那么这时可考虑使用文件排他锁。</p><p>阻塞(等待)模式：</p><p>并发时，当有第二个用户请求时，会等待第一个用户请求完成、释放锁，获得文件锁之后，程序才会继续运行下去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $fp = fopen(&#x27;lock.txt&#x27;, &#x27;w&#x27;);</span><br><span class="line">    if(flock($fp, LOCK_EX))&#123;   //文件独占锁,阻塞</span><br><span class="line">        //TODO 业务代码...</span><br><span class="line">        </span><br><span class="line">        flock($fp, LOCK_UN); //释放锁</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($fp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>非阻塞模式：</p><p>并发时，当第一个用户请求拿得文件锁之后。后面请求的用户直接返回系统繁忙，请稍后再试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $fp = fopen(&#x27;lock.txt&#x27;, &#x27;w&#x27;);</span><br><span class="line">    if(flock($fp, LOCK_EX|LOCK_NB))&#123;   //文件独占锁,非阻塞</span><br><span class="line">        //TODO 业务代码...</span><br><span class="line">        </span><br><span class="line">        flock($fp, LOCK_UN);//释放锁</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //系统繁忙，请稍后再试（直接返回提示）</span><br><span class="line">    &#125;</span><br><span class="line">    fclose($fp);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排他锁 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat备份数据库出现 show_compatibility_56 相关错误</title>
      <link href="/posts/ab7eafc8.html"/>
      <url>/posts/ab7eafc8.html</url>
      
        <content type="html"><![CDATA[<h4 id="数据库备份错误问题"><a href="#数据库备份错误问题" class="headerlink" title="数据库备份错误问题"></a>数据库备份错误问题</h4><p>备份数据库出现：<code>3167 - The &#39;INFORMATION_SCHEMA.GLOBAL_STATUS&#39; feature is disabled; see the documentation for &#39;show_compatibility_56&#39;</code> 的错误，或者 <code>show_compatibility_56</code> 相关错误</p><p>是因为从 <code>mysql5.7.6</code> 开始 <code>information_schema.global_status</code> 已经开始被舍弃，为了兼容性，此时需要打开 <code>show_compatibility_56</code></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>执行命令以下命令：</p><p>查看show_compatibility_56视图状态<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%show_compatibility_56%&#x27;;</span><br></pre></td></tr></table></figure></p><p>修改show_compatibility_56为on<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global show_compatibility_56=on;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决MySQL5.7.5及以上group by报错的问题</title>
      <link href="/posts/36e17204.html"/>
      <url>/posts/36e17204.html</url>
      
        <content type="html"><![CDATA[<h3 id="MySQL5-7-5及以上-group-by-报错问题"><a href="#MySQL5-7-5及以上-group-by-报错问题" class="headerlink" title="MySQL5.7.5及以上 group by 报错问题"></a>MySQL5.7.5及以上 group by 报错问题</h3><p>MySQL 5.7.5及以上功能依赖检测功能。如果启用了ONLY_FULL_GROUP_BY (仅限于) SQL模式（默认情况下），MySQL将拒绝选择列表，HAVING条件或ORDER BY列表的查询引用在GROUP BY子句中既未命名的非集合列，也不在功能上依赖于它们。（5.7.5之前，MySQL没有检测到功能依赖关系，默认情况下不启用ONLY_FULL_GROUP_BY。有关5.7.5之前的行为的说明，请参见“MySQL 5.6参考手册”。）</p><p>大体意思：除开主键id作为 分组条件，其他都不行。当查找返回是聚合函数时 其他列作为分组条件可以。</p><h4 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h4><ol><li>查询mysql 相关mode</li></ol><p><code>select @@global.sql_mode;</code></p><ol><li>查询结果</li></ol><p><code>ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</code></p><ol><li>重设内容</li></ol><p><code>set @@global.sql_mode=&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;</code></p><p>这里去掉了 <strong>ONLY_FULL_GROUP_BY</strong> (注意： MySQL 8取消了NO_AUTO_CREATE_USER，MySQL 8版本执行下方这条)</p><p><code>set @@global.sql_mode = &#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#39;;</code></p><p>如果发现还报错，就关闭连接再开（关闭连接 不是重启服务，重启服务刚刚的配置就失效了）</p><h4 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h4><p>修改mysql配置文件</p><p>找到对应mysql版本的目录，找到<code>my.ini</code>配置，在<code>[mysqld]</code>最下方加上（千万不能有空格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql_mode=&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#x27;</span><br></pre></td></tr></table></figure><p>如果运行中，重启下配置就可以了</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP:curl error 60:SSL certificate unable to get local issuer certificate</title>
      <link href="/posts/1c29d3e3.html"/>
      <url>/posts/1c29d3e3.html</url>
      
        <content type="html"><![CDATA[<p>接口请求报错：PHP：cURL error 60: SSL certificate unable to get local issuer certificate 是由于没有在<code>php.ini</code>配置<code>curl.cainfo</code></p><p>解决方法如下：</p><ol><li>下载cacert.pem</li></ol><p><a href="https://curl.haxx.se/ca/cacert.pem">cacert.pem下载链接</a></p><p>将文件放置对应PHP版本目录中</p><ol><li>配置php.ini</li></ol><p>打开对应PHP版本的php.ini，搜索<code>curl.cainfo</code>，将前面的 <code>;</code> 删掉，在后面加上cacert.pem所在的<strong>绝对路径</strong>。</p><p>例子：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[curl]</span><br><span class="line">; A default value for the CURLOPT_CAINFO option. This is required to be an</span><br><span class="line">; absolute path.</span><br><span class="line">curl.cainfo =  D:\phpstudy_pro\Extensions\php\php7.2.9nts\cacert.pem</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CURL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Buffterfly主题增加叨叨点啥</title>
      <link href="/posts/c66dcdf5.html"/>
      <url>/posts/c66dcdf5.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>Q：什么是叨叨点啥？跟哔哔点啥又有什么关系？<br>A：叨叨是 <del>盗版</del> 效仿版 哔哔<br>A：哔哔点啥的白嫖版本。基于github的issue及vercel api搭建。（感谢<a href="https://zfe.space/">小冰老师</a>的开源）</p></blockquote><p>话不多说，开干就完了！</p><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><h4 id="第一步，安装hexo-daodao"><a href="#第一步，安装hexo-daodao" class="headerlink" title="第一步，安装hexo-daodao"></a>第一步，安装hexo-daodao</h4><p><a href="https://github.com/Zfour/hexo-daodao">hexo-daodao 包地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-daodao --save</span><br></pre></td></tr></table></figure><p>安装完之后，在博客根目录的 <code>config.yml</code> 添加下面的代码：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daodao_swiper:</span><br><span class="line">  url: https://daodao-three.vercel.app/api?q=20 #注意一：切记，这里后面需要修改，后续第三步会说明</span><br><span class="line">  fliter: &quot;[&#x27;img&#x27;,&#x27;iframe&#x27;]&quot;</span><br><span class="line">  priority: 10</span><br><span class="line">  enable: true</span><br><span class="line">  enable_page: /</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;bbTimeList container&quot; style=&quot;height: auto;width: 100%&quot; id=&quot;bbTimeList&quot;&gt;&lt;i class=&quot;bber-gotobb fas fa-bullhorn&quot; onclick=&quot;location=&amp;#39;/daodao/&amp;#39;&quot; title=&quot;叨叨&quot;&gt;&lt;/i&gt;&lt;div class=&quot;swiper-container&quot; id=&quot;bbtalk&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;bber-talk&quot; onclick=&quot;location=&amp;#39;/daodao/&amp;#39;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;i class=&quot;bber-gotobb fas fa-arrow-circle-right&quot; onclick=&quot;location=&amp;quot;/daodao/&amp;quot;&quot; title=&quot;查看全文&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：上方的temple_html被markdown转义了，请复制下方粘贴上去<br><code>temple_html: &#39;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;bbTimeList container&quot; style=&quot;height: auto;width: 100%&quot; id=&quot;bbTimeList&quot;&gt;&lt;i class=&quot;bber-gotobb fas fa-bullhorn&quot; onclick=&quot;location=&amp;#39;/daodao/&amp;#39;&quot; title=&quot;叨叨&quot;&gt;&lt;/i&gt;&lt;div class=&quot;swiper-container&quot; id=&quot;bbtalk&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;bber-talk&quot; onclick=&quot;location=&amp;#39;/daodao/&amp;#39;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;i class=&quot;bber-gotobb fas fa-arrow-circle-right&quot; onclick=&quot;location=&amp;quot;/daodao/&amp;quot;&quot; title=&quot;查看全文&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&#39;</code></p></blockquote><h4 id="第二步，Fork项目到自己仓库-（你也可以通过下载的方式，这里推荐fork）"><a href="#第二步，Fork项目到自己仓库-（你也可以通过下载的方式，这里推荐fork）" class="headerlink" title="第二步，Fork项目到自己仓库 （你也可以通过下载的方式，这里推荐fork）"></a>第二步，Fork项目到自己仓库 （你也可以通过下载的方式，这里推荐fork）</h4><p><a href="https://github.com/Rock-Candy-Tea/daodao">api地址</a></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao1.png" alt=""></p><p>这里强烈推荐fork的方式，之后在自己的github上会多出一个<code>用户名/daodao</code>的仓库。</p><blockquote><p>注意：fork的仓库可能没issue需要在设置里打开</p></blockquote><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao2.png" alt=""></p><p><span style="color:red">注意：这里需要三个地方，第一个就是<code>daodao.js</code> 第二个是<code>config.yml</code>  第三个是<code>index.md</code> ；修改的方式可以直接在github上操作，不懂的可以百度</span></p><blockquote><p>daodao.js 需要替换的地方，后续第三步会说明。</p></blockquote><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao3.png" alt=""></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao4.png" alt=""></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao5.png" alt=""></p><p>这里 <code>index.md</code> 修改之后，可以提前在主题配置导航目录添加 <code>叨叨点啥: /daodao/ || fa-fw fas fa-comment</code> ，并且在博客目录下的<code>source</code>文件夹下新建<code>daodao</code>文件夹，然后把这个 <code>index.md</code> 放在daodao文件夹下</p><h4 id="第三步，在Vercel创建并移植github的daodao仓库"><a href="#第三步，在Vercel创建并移植github的daodao仓库" class="headerlink" title="第三步，在Vercel创建并移植github的daodao仓库"></a>第三步，在Vercel创建并移植github的daodao仓库</h4><p><a href="https://vercel.com/login">vercel地址</a></p><p>通过github登录</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao6.png" alt=""></p><p>然后点击新建项目</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao7.png" alt=""></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao8.png" alt=""></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao9.png" alt=""></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao10.png" alt=""></p><blockquote><p>配置环境变量需要配置DAODAO_PASSWORD和DAODAO_TOKEN；DAODAO_TOKEN的获取需要到github的setting -&gt; Developer settings -&gt; Personal access tokens 创建，然后复制token到环境变量DAODAO_TOKEN的值上。</p></blockquote><p>最后点击Deploy等待部署</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao11.png" alt=""></p><blockquote><p>接下来，把复制到的链接修改到第一步的 <strong><code>注意一</code></strong>，以及第二步的 <strong>daodao.js</strong> （这里直接在GitHub上修改，会自动同步到vercel）</p></blockquote><p>到这里已经算部署完啦！</p><h3 id="操作教程"><a href="#操作教程" class="headerlink" title="操作教程"></a>操作教程</h3><p><a href="https://github.com/Rock-Candy-Tea/daodao">api教程地址</a></p><p>里面包含了有ios快捷指令（苹果用户的福利）</p><blockquote><p>快捷指令：<br>叨叨点啥：<a href="https://www.icloud.com/shortcuts/06fc462d4b4b4f668b16cb11e2e9d010">https://www.icloud.com/shortcuts/06fc462d4b4b4f668b16cb11e2e9d010</a><br>7bu图床：<a href="https://www.icloud.com/shortcuts/2636fc60584a45e48bb1d316d72e0c27">https://www.icloud.com/shortcuts/2636fc60584a45e48bb1d316d72e0c27</a><br>图片发至叨叨：<a href="https://www.icloud.com/shortcuts/1ce2ce19d5464ddf8ac61989242758e0">https://www.icloud.com/shortcuts/1ce2ce19d5464ddf8ac61989242758e0</a></p></blockquote><h3 id="关于快捷指令的配置"><a href="#关于快捷指令的配置" class="headerlink" title="关于快捷指令的配置"></a>关于快捷指令的配置</h3><h4 id="叨叨点啥配置"><a href="#叨叨点啥配置" class="headerlink" title="叨叨点啥配置"></a>叨叨点啥配置</h4><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao12.png" alt=""></p><h4 id="7bu图床配置"><a href="#7bu图床配置" class="headerlink" title="7bu图床配置"></a>7bu图床配置</h4><p>如果想用私有的图床，要配置token值。</p><p>进入 <a href="https://7bu.top/">https://7bu.top/</a> 注册（有账号的忽略）</p><p>浏览器输入，获取token值：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://7bu.top/api/token?email=邮箱账号&amp;password=密码</span><br></pre></td></tr></table></figure></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao13.png" alt=""></p><h3 id="大神Akilarの糖果屋🍭"><a href="#大神Akilarの糖果屋🍭" class="headerlink" title="大神Akilarの糖果屋🍭"></a>大神Akilarの糖果屋🍭</h3><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/daodao14.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 叨叨 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云直播配置</title>
      <link href="/posts/6dc66cce.html"/>
      <url>/posts/6dc66cce.html</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近项目涉及到<code>直播</code>以及<code>即时通信IM</code>的业务场景，即时通信这个我们可以利用<code>gatewayworker</code>自行开发；但是直播需要考虑到并发等诸多因素，于是选择第三方服务，比如腾讯、阿里等，这里就以腾讯云直播【标准直播(LVB)】为例。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>腾讯云账号、备案域名这就不说了。其次，首次接触直播，也不清楚直播的流程，也不清楚选择哪个服务，所有做起来就稍微比较迷茫。<a href="https://cloud.tencent.com/">腾讯云入口</a></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/tencent-cloud-live-1.png" alt=""></p><p>最笨的办法就是把云直播的产品简历浏览一遍，最好的办法就是问问周围的大佬。(PS:腾讯云的客服也超级给力)</p><p>自行根据产品需求不同进行选择吧。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>使用云直播服务，至少需要2个域名，一个作为推流域名，一个作为播放域名，推流和播放不能使用相同的域名，这个自行在域名管理上绑定CNAME。（域名必须要备案）</p><blockquote><p>注意：添加的域名，一定要按照格式: <code>www.test.com</code>，可以使用二级域名。比如，推流域名；<code>push.test.com</code>；播放域名：<code>play.test.com</code>； 这个域名就是你域名解析列表中的真实域名</p></blockquote><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/tencent-cloud-live-2.png" alt=""></p><p>其中系统默认分配的推流域名，可以当作测试使用，也可以当作正式推流域名使用。当然也可以自定义推流域名，默认分配的域名不需要就可以禁用啦。</p><blockquote><p>注意：刚配置 CNAME 还是 × 的时候，需要等一会就会变成 √<br>云直播使用的是HTTP协议，需要配置HTTPS请参考 <a href="https://cloud.tencent.com/document/product/267/50697">证书管理</a></p></blockquote><p>随后可以到云直播-地址生成器测试啦 <a href="https://cloud.tencent.com/document/product/267/13551">参考文档</a></p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><ol><li>模板配置-录制配置</li></ol><p>点击云直播-域名管理-推流域名-管理按钮，进入页面之后，选择模板配置，点击录制配置的编辑</p><blockquote><p>注意：首次需要开通点播，点播可以选择日结后付费或预先购买资源包计费方式，按需付费，灵活使用</p></blockquote><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/tencent-cloud-live-3.png" alt=""><br><img src="https://npm.elemecdn.com/heyiki-cdn/img/tencent-cloud-live-4.png" alt=""></p><ol><li>模板配置-回调配置</li></ol><p>同理根据录制配置步骤，创建模板</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/tencent-cloud-live-5.png" alt=""></p><p>打开之后，点击创建回调模板如下图，需要填写的根据业务需求填，填写完之后点击保存，回到原来的回调配置，选择刚刚新建的模板即可。</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/tencent-cloud-live-6.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 直播 </tag>
            
            <tag> 腾讯云直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔使用webhook实现conding代码自动部署</title>
      <link href="/posts/fba3a87a.html"/>
      <url>/posts/fba3a87a.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装和配置WebHook"><a href="#安装和配置WebHook" class="headerlink" title="安装和配置WebHook"></a>安装和配置WebHook</h3><ol><li>打开宝塔软件商店，安装WebHook，安装好点击设置-添加-输入名称-添加脚本代码。（注意脚本代码第16行需要替换）</li></ol><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/webhook-coding-1.png" alt=""></p><p>脚本代码如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;&quot;</span><br><span class="line"># 输出当前时间</span><br><span class="line">date --date=&#x27;0 days ago&#x27; &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">echo &quot;Start&quot;</span><br><span class="line"># 判断宝塔WebHook参数是否存在</span><br><span class="line">if [ ! -n &quot;$1&quot; ];</span><br><span class="line">then </span><br><span class="line">          echo &quot;param参数错误&quot;</span><br><span class="line">          echo &quot;End&quot;</span><br><span class="line">          exit</span><br><span class="line">fi</span><br><span class="line"># git项目路径（这里需要配置，$1为运行传入脚本的第一个参数，coding那边配置）</span><br><span class="line">gitPath=&quot;/www/wwwroot/$1&quot;</span><br><span class="line"># git 网址（ssh的地址）</span><br><span class="line">gitHttp=&quot;输入conding代码的ssh地址&quot;</span><br><span class="line">echo &quot;Web站点路径：$gitPath&quot;</span><br><span class="line"></span><br><span class="line">#判断项目路径是否存在</span><br><span class="line">if [ -d &quot;$gitPath&quot; ]; then</span><br><span class="line">        cd $gitPath</span><br><span class="line">        #判断是否存在git目录</span><br><span class="line">        if [ ! -d &quot;.git&quot; ]; then</span><br><span class="line">                echo &quot;在该目录下克隆 git&quot;</span><br><span class="line">                sudo git clone $gitHttp gittemp</span><br><span class="line">                sudo mv gittemp/.git .</span><br><span class="line">                sudo rm -rf gittemp</span><br><span class="line">        fi</span><br><span class="line">        echo &quot;拉取最新的项目文件&quot;</span><br><span class="line">        sudo git reset --hard origin/master</span><br><span class="line">        sudo git pull       </span><br><span class="line">        echo &quot;拉取结束End&quot;</span><br><span class="line">        exit</span><br><span class="line">else</span><br><span class="line">        echo &quot;该项目路径不存在&quot;</span><br><span class="line">        echo &quot;End&quot;</span><br><span class="line">        exit</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><ol><li>点击提交后，查看密钥，并复制图上指定链接。</li></ol><p><code>https://宝塔面板域名/hook?access_key=&#123;下图中的密码&#125;&amp;param=$1 #$1是项目名称 如：aaa</code></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/webhook-coding-2.png" alt=""></p><h3 id="CONDING项目配置WebHook"><a href="#CONDING项目配置WebHook" class="headerlink" title="CONDING项目配置WebHook"></a>CONDING项目配置WebHook</h3><blockquote><p>进入Coding=&gt;打开要部署的项目=&gt;项目设置=&gt;开发者选项=&gt;WebHook=&gt;新增WebHook</p></blockquote><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/webhook-coding-3.png" alt=""></p><h3 id="项目配置部署公钥"><a href="#项目配置部署公钥" class="headerlink" title="项目配置部署公钥"></a>项目配置部署公钥</h3><ol><li>获取服务器的公钥</li></ol><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/webhook-coding-4.png" alt=""></p><ol><li>将公钥部署到conding项目</li></ol><blockquote><p>位置：项目仓库=&gt;设置=&gt;部署公钥</p></blockquote><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/webhook-coding-5.png" alt=""></p><p>之后在coding配置的webhook点击<code>ping</code>，宝塔webhook能查看到日志即可</p><p>最后，首次部署，记得到服务端git clone 克隆一下项目仓库（注意是ssh格式的）</p>]]></content>
      
      
      <categories>
          
          <category> WebHook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔 </tag>
            
            <tag> WebHook </tag>
            
            <tag> 自动部署 </tag>
            
            <tag> CONDING </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 GitHub 访问不了</title>
      <link href="/posts/77868ba1.html"/>
      <url>/posts/77868ba1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>GitHub是一个面向开源及私有软件项目的托管平台，我们可以寻找大佬们开源的代码以及部署个人的代码。</p><p>最近Github时常无法访问，也不是网络的原因，这让人有点烦恼，最后在网上找了一些解决方法，如下操作（windows系统为例子）：</p></blockquote><p><em>注意一点：win10用户，hosts文件都是有权限的，所以会出现保存失败。关于设置图在最低下</em></p><p>打开 <code>C:\Windows\System32\drivers\etc\hosts</code> 输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">185.199.108.154               github.githubassets.com</span><br><span class="line">140.82.114.21                 central.github.com</span><br><span class="line">185.199.108.133               desktop.githubusercontent.com</span><br><span class="line">185.199.108.153               assets-cdn.github.com</span><br><span class="line">185.199.108.133               camo.githubusercontent.com</span><br><span class="line">185.199.108.133               github.map.fastly.net</span><br><span class="line">199.232.69.194                github.global.ssl.fastly.net</span><br><span class="line">140.82.113.4                  gist.github.com</span><br><span class="line">185.199.108.153               github.io</span><br><span class="line">140.82.114.3                  github.com</span><br><span class="line">140.82.113.5                  api.github.com</span><br><span class="line">185.199.108.133               raw.githubusercontent.com</span><br><span class="line">185.199.108.133               user-images.githubusercontent.com</span><br><span class="line">185.199.108.133               favicons.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars5.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars4.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars3.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars2.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars1.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars0.githubusercontent.com</span><br><span class="line">185.199.108.133               avatars.githubusercontent.com</span><br><span class="line">140.82.113.10                 codeload.github.com</span><br><span class="line">52.216.226.40                 github-cloud.s3.amazonaws.com</span><br><span class="line">52.216.162.99                 github-com.s3.amazonaws.com</span><br><span class="line">52.216.142.196                github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class="line">52.217.97.236                 github-production-user-asset-6210df.s3.amazonaws.com</span><br><span class="line">52.217.194.41                 github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class="line">185.199.108.153               githubstatus.com</span><br><span class="line">64.71.168.201                 github.community</span><br><span class="line">185.199.108.133               media.githubusercontent.com</span><br></pre></td></tr></table></figure><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/github-host-1.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Guzzle执行HTTP请求</title>
      <link href="/posts/592498db.html"/>
      <url>/posts/592498db.html</url>
      
        <content type="html"><![CDATA[<p>由于最近对第三方api需求量高的原因，不同的api对于curl请求稍微有点出入，而且多了显得代码冗余，为了整合统一请求调用，就开始使用Guzzle。</p><h3 id="Guzzle介绍"><a href="#Guzzle介绍" class="headerlink" title="Guzzle介绍"></a>Guzzle介绍</h3><p>Guzzle是一个PHP的HTTP客户端，用来轻而易举地发送请求，并集成到我们的WEB服务上。<a href="https://guzzle-cn.readthedocs.io/zh_CN/latest/">Guzzle中文文档</a></p><ul><li>接口简单：构建查询语句、POST请求、分流上传下载大文件、使用HTTP cookies、上传JSON数据等等。</li><li>发送同步或异步的请求均使用相同的接口。</li><li>使用PSR-7接口来请求、响应、分流，允许你使用其他兼容的PSR-7类库与Guzzle共同开发。</li><li>抽象了底层的HTTP传输，允许你改变环境以及其他的代码，如：对cURL与PHP的流或socket并非重度依赖，非阻塞事件循环。</li><li>中间件系统允许你创建构成客户端行为。</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>一般情况下，TP框架都会自带有，无需安装，如果没有的话，Composer安装 <code>composer require guzzlehttp/guzzle</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>基本的使用方法就不写了，可以直接到 Guzzle 查看文档，更详细。</p><p><em>注意：当我们使用form_params做键时，Guzzle会把params转化为http_build_query的字符参数。这里还是建议用Json，因为http_build_query会丢掉空值，而且连key一起丢掉。</em></p><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><p>获取状态码：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$code = $response-&gt;getStatusCode(); // 200</span><br><span class="line">$reason = $response-&gt;getReasonPhrase(); // OK</span><br></pre></td></tr></table></figure></p><p>获取响应获取头信息(header)：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 检查头部是否存在</span><br><span class="line">if ($response-&gt;hasHeader(&#x27;Content-Length&#x27;)) &#123;</span><br><span class="line">    echo &quot;It exists&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取返回头部信息</span><br><span class="line">echo $response-&gt;getHeader(&#x27;Content-Length&#x27;);</span><br><span class="line"></span><br><span class="line">// 获取所有返回头部信息</span><br><span class="line">foreach ($response-&gt;getHeaders() as $name =&gt; $values) &#123;</span><br><span class="line">    echo $name . &#x27;: &#x27; . implode(&#x27;, &#x27;, $values) . &quot;\r\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用 <code>getBody</code> 方法可以获取响应的主体部分(body)，主体可以当成一个字符串或流对象使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$body = $response-&gt;getBody();</span><br><span class="line"></span><br><span class="line">// 隐式地将主体转换为字符串并回显</span><br><span class="line">echo $body;</span><br><span class="line"></span><br><span class="line">// 显式地将主体转换为字符串</span><br><span class="line">$stringBody = (string) $body;</span><br><span class="line"></span><br><span class="line">// 从正文中读取10个字节</span><br><span class="line">$tenBytes = $body-&gt;read(10);</span><br><span class="line"></span><br><span class="line">// 以字符串形式读取正文的其余内容</span><br><span class="line">$remainingBytes = $body-&gt;getContents();</span><br></pre></td></tr></table></figure></p><h3 id="封装代码"><a href="#封装代码" class="headerlink" title="封装代码"></a>封装代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Guzzle请求 https://guzzle-cn.readthedocs.io/zh_CN/latest/</span><br><span class="line"> * @param $url 请求地址</span><br><span class="line"> * @param array $data 数据</span><br><span class="line"> * @param string $method 请求方法</span><br><span class="line"> * @param string $options 请求选项 [常用：GET=&gt;query  POST=&gt;form_params  POST=&gt;json ]  //https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html</span><br><span class="line"> * @param array $headers 请求头</span><br><span class="line"> * @return array</span><br><span class="line"> * @throws \GuzzleHttp\Exception\GuzzleException</span><br><span class="line"> */</span><br><span class="line">function guzzle_request($url, $data = [] , $method = &quot;GET&quot;, $options = &#x27;query&#x27; , $headers = [])</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        $client = new \GuzzleHttp\Client();</span><br><span class="line">//        array_unshift($headers,[&#x27;content-type&#x27; =&gt; &#x27;application/json;charset=utf-8&#x27;]);</span><br><span class="line">        $headers = array_merge([&#x27;content-type&#x27; =&gt; &#x27;application/json;charset=utf-8&#x27;],$headers);</span><br><span class="line"></span><br><span class="line">        $parameter = [$options =&gt; $data, &#x27;headers&#x27; =&gt; $headers];</span><br><span class="line"></span><br><span class="line">        $res = $client-&gt;request($method, $url, $parameter);</span><br><span class="line"></span><br><span class="line">        if ($res-&gt;getStatusCode() == 200) &#123;</span><br><span class="line">            $callback = json_decode($res-&gt;getBody()-&gt;getContents(),true);</span><br><span class="line">            return [&#x27;code&#x27;=&gt;200,&#x27;msg&#x27;=&gt;&#x27;OK&#x27;,&#x27;data&#x27;=&gt;$callback];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;请求错误&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (\GuzzleHttp\Exception\RequestException $e) &#123;</span><br><span class="line">//            dd($e-&gt;getRequest());dd($e-&gt;getResponse());</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;出现异常&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Guzzle </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT -- JSON WEB TOKEN</title>
      <link href="/posts/630da3d8.html"/>
      <url>/posts/630da3d8.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><p><a href="https://jwt.io/introduction">JWT官网</a></p><p>JSON Web Token（JWT）是一个开放标准（RFC 7519），该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><span id="more"></span><h3 id="JWT-的数据结构"><a href="#JWT-的数据结构" class="headerlink" title="JWT 的数据结构"></a>JWT 的数据结构</h3><p>例子：<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwczpcL1wva3VrdS5odXNhbzcwMzE1LCJkYXRhIjp7InVpZCI6MX19.PyUbtFEzDTq1i_SXgD-ArNJrjym9PLXK5d7ghJK9FUI</code></p><p>JWT通常由三部分组成: 头部（Header）, 载荷（Payload）和签名（Signature）。其三段信息用 <code>.</code> 连接组成JWT字符串。</p><h4 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h4><p>Header 部分是一个 JSON 对象，承载着两部分信息；将其进些base64加密（运用对称加密）即可构成JWT的第一部分。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &#x27;typ&#x27;: &#x27;JWT&#x27;, typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT</span><br><span class="line">  &#x27;alg&#x27;: &#x27;HS256&#x27; //alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>Payload 用来存放需传递信息的地方，其部分是一个包含 claims 的 JSON 对象，其中claims有三种类型： registered claims（标准注册声明）, public claims（公共声明）, and private claims（私有声明）。</p><p>标准注册声明 常用属性如下（非强制使用）， <a href="https://www.iana.org/assignments/jwt/jwt.xhtml">全部属性</a>;</p><ul><li>iss: 签发者</li><li>sub: jwt所面向的用户</li><li>aud: 接收jwt的一方</li><li>exp: 到期时间（必须要大于签发时间）</li><li>nbf: 定义在什么时间之前，该jwt都是不可用的</li><li>iat: 签发时间</li><li>jti: jwt唯一ID标识</li></ul><p>公开声明：使用JWT的人员可以随意定义这些声明。但是为避免冲突，应在IANA JSON Web令牌注册表中定义它们，或将其定义为包含抗冲突名称空间的URI。</p><p>私人权利：这些都是使用它们同意并既不是当事人之间建立共享信息的自定义声明注册或公众的权利要求。</p><p>有效载荷示例如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后将其进行base64加密，得到Jwt的第二部分。</p><h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>Signature 部分是对上面两部分数据签名，通过指定的算法生成哈希，以确保数据不会被篡改。</p><p><em>注意：若使用标头中指定的签名算法（默认情况下为HMAC SHA256），需指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。</em></p><h3 id="JWT-的特点和注意事项"><a href="#JWT-的特点和注意事项" class="headerlink" title="JWT 的特点和注意事项"></a>JWT 的特点和注意事项</h3><ol><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li><li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库为utf8mb4编码仍然无法保存表情符号的问题</title>
      <link href="/posts/8c25726d.html"/>
      <url>/posts/8c25726d.html</url>
      
        <content type="html"><![CDATA[<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>修改MySQL配置文件</p><p>修改mysql配置文件my.cnf（windows为my.ini） </p><p>my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容： </p><p>[client] </p><p>default-character-set = utf8mb4 </p><p>[mysql] </p><p>default-character-set = utf8mb4 </p><p>[mysqld] </p><p>character-set-client-handshake = FALSE <code>关键设置</code></p><p>character-set-server = utf8mb4 </p><p>collation-server = utf8mb4_unicode_ci </p><p>init_connect=’SET NAMES utf8mb4’</p><p><a href="https://www.copylian.com/technology/446.html">原文地址：https://www.copylian.com/technology/446.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 表情符号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TP6+消息队列</title>
      <link href="/posts/fcf584c9.html"/>
      <url>/posts/fcf584c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP消息队列"><a href="#PHP消息队列" class="headerlink" title="PHP消息队列"></a>PHP消息队列</h2><h3 id="1、消息队列概念"><a href="#1、消息队列概念" class="headerlink" title="1、消息队列概念"></a>1、消息队列概念</h3><p>从本质上说消息对列就是一个队列结构的中间件，也就是说消息放入这个中间件之后就可以直接返回，并不需要系统立即处理，而另外会有一个程序读取这些数据，并按顺序进行逐次处理。</p><h3 id="2、核心结构"><a href="#2、核心结构" class="headerlink" title="2、核心结构"></a>2、核心结构</h3><p><code>业务系统 --(入队)--&gt; 消息队列 --(出队)--&gt; 队列处理系统</code></p><h3 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h3><p>1、数据冗余：比如订单系统，后续需要严格的进行数据转换和记录，消息队列可以把这些数据持久化的存储在队列中，然后有订单，后续处理程序进行获取，后续处理完之后在把这条记录进行删除来保证每一条记录都能够处理完成。<br>2、系统解耦：使用消息系统之后，入队系统和出队系统是分开的，也就说其中一个崩溃之后不会影响另外一个的正常运行。<br>3、异步通信：消息本身使用入队之后可以直接返回。<br>4、扩展性：例如订单队列，不仅可以处理订单，还可以给其他业务使用。<br>5、排序保证：有些场景需要按照产品的顺序进行处理比如单进单出从而保证数据按照一定的顺序处理，使用消息队列是可以的。<br>6、流量削峰：就是秒杀和抢购的时候，会出现明显的流量剧增，对服务器的压力非常大。<br>7、消息通讯：消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</p><h3 id="4、队列介质"><a href="#4、队列介质" class="headerlink" title="4、队列介质"></a>4、队列介质</h3><p>1、数据库，例如mysql（可靠性高，易实现，速度慢）<br>2、缓存， 例如redis（速度快，单个消息报包过大时效率低）<br>3、消息系统，专业性强，可靠，学习成本高（例如rabbitMq是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。）<br>4、Beanstalkd （一个高性能、轻量级的分布式内存队列系统）</p><h2 id="TP6使用消息队列"><a href="#TP6使用消息队列" class="headerlink" title="TP6使用消息队列"></a>TP6使用消息队列</h2><h3 id="1、composer安装think-queue包"><a href="#1、composer安装think-queue包" class="headerlink" title="1、composer安装think-queue包"></a>1、composer安装think-queue包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink/think-queue</span><br></pre></td></tr></table></figure><h3 id="2、配置文件修改"><a href="#2、配置文件修改" class="headerlink" title="2、配置文件修改"></a>2、配置文件修改</h3><p>配置文件位于 config/queue.php</p><p>公共配置<br><code>&#39;default&#39;=&gt;&#39;redis&#39; //驱动类型，可选择 sync(默认):同步执行，database:数据库驱动,redis:Redis驱动//我这里使用的是redis</code></p><h3 id="3、简单封装"><a href="#3、简单封装" class="headerlink" title="3、简单封装"></a>3、简单封装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\http;</span><br><span class="line"></span><br><span class="line">use think\queue\Job;</span><br><span class="line">use think\facade\Queue;</span><br><span class="line"></span><br><span class="line">class QueueServer</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 队列任务类型</span><br><span class="line">     * @param  string  $taskType     [任务类型]</span><br><span class="line">     * @param  array   $jobDataArr   [业务数据]</span><br><span class="line">     * @param  integer $execType     [执行类型 1：即时执行 2：延迟执行]</span><br><span class="line">     * @param  integer $waitTime     [延迟执行时间，单位秒]</span><br><span class="line">     * @param  string  $jobQueueName [任务名称，默认为NULL]</span><br><span class="line">     *</span><br><span class="line">     * 命令执行：</span><br><span class="line">     *    有任务名称 php think queue:listen --queue [任务名称]</span><br><span class="line">     *    无任务名称 php think queue:listen</span><br><span class="line">     * @return [type]             [description]</span><br><span class="line">     */</span><br><span class="line">    public static function taskList($taskType = &#x27;&#x27;, $jobDataArr = [], $execType = 1, $waitTime = 60, $jobQueueName = null)&#123;</span><br><span class="line"></span><br><span class="line">        switch ($taskType) &#123;</span><br><span class="line">            case &#x27;taskA&#x27;:</span><br><span class="line">                $jobHandlerClassName  = &#x27;app\http\QueueServer@taskA&#x27;;//多任务：任务的类名@方法名</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                return false;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if($execType == 1)&#123;</span><br><span class="line">            $isPushed = Queue::push($jobHandlerClassName, $jobDataArr, $jobQueueName);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $isPushed = Queue::later($waitTime,$jobHandlerClassName, $jobDataArr, $jobQueueName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if($isPushed !== false)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务A</span><br><span class="line">     */</span><br><span class="line">    public function taskA(Job $job,$data)&#123;</span><br><span class="line">        </span><br><span class="line">        $isJobDone = $this-&gt;_doTaskA($data);</span><br><span class="line"></span><br><span class="line">        if ($isJobDone) &#123;</span><br><span class="line">            //成功执行并删除任务</span><br><span class="line">            $job-&gt;delete();</span><br><span class="line">            print(&quot;Info: TaskA of Job MultiTask has been done and deleted&quot;.&quot;\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //任务轮询4次后删除</span><br><span class="line">            if ($job-&gt;attempts() &gt; 3) &#123;</span><br><span class="line">                // 第1种处理方式：重新发布任务,该任务延迟10秒后再执行</span><br><span class="line">                //$job-&gt;release(10); </span><br><span class="line">                // 第2种处理方式：原任务的基础上1分钟执行一次并增加尝试次数</span><br><span class="line">                //$job-&gt;failed();   </span><br><span class="line">                // 第3种处理方式：删除任务</span><br><span class="line">                $job-&gt;delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 执行任务A</span><br><span class="line">     * @param  [type] $data [description]</span><br><span class="line">     * @return [type]       [description]</span><br><span class="line">     */</span><br><span class="line">    private function _doTaskA($data) &#123;</span><br><span class="line">        // 业务逻辑</span><br><span class="line">        // ...</span><br><span class="line">        </span><br><span class="line">        print(&quot;数据：&quot;.json_encode($data).&quot;\n&quot;);</span><br><span class="line">        print(&quot;Info: doing TaskA of Job MultiTask &quot;.&quot;\n&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、监听任务并执行"><a href="#4、监听任务并执行" class="headerlink" title="4、监听任务并执行"></a>4、监听任务并执行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php think queue:listen</span><br><span class="line">php think queue:work</span><br></pre></td></tr></table></figure><p>两种，具体的可选参数可以输入命令加 —help 查看</p><p>可配合supervisor使用，保证进程常驻</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP使用phpword生成word文档</title>
      <link href="/posts/fcf0425b.html"/>
      <url>/posts/fcf0425b.html</url>
      
        <content type="html"><![CDATA[<h2 id="话不多说，直接开干"><a href="#话不多说，直接开干" class="headerlink" title="话不多说，直接开干"></a>话不多说，直接开干</h2><h3 id="1、composer安装phpword包"><a href="#1、composer安装phpword包" class="headerlink" title="1、composer安装phpword包"></a>1、composer安装phpword包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require phpoffice/phpword</span><br></pre></td></tr></table></figure><h3 id="2、准备一个word模板"><a href="#2、准备一个word模板" class="headerlink" title="2、准备一个word模板"></a>2、准备一个word模板</h3><p>简单案列：</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/phpword1.png" alt=""></p><p>上图为原模板，我们替换姓名和邮箱，就拿两个变量替换原模板文字，操作如下：</p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/phpword2.png" alt=""></p><h3 id="3、渲染变量操作"><a href="#3、渲染变量操作" class="headerlink" title="3、渲染变量操作"></a>3、渲染变量操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">include_once &quot;vendor/autoload.php&quot;;</span><br><span class="line">$word=new \PhpOffice\PhpWord\TemplateProcessor(&#x27;word.docx&#x27;);//打开模板，模板地址需要绝对路径</span><br><span class="line">$word-&gt;setValue(&#x27;name&#x27;,&#x27;heyiki&#x27;);//替换变量name</span><br><span class="line">$word-&gt;setValue(&#x27;email&#x27;,&#x27;1186933877@qq.com&#x27;);//替换变量email</span><br><span class="line">$word-&gt;saveAs(&#x27;test.docx&#x27;);//另存为，地址需要绝对路径，注意命名别用中文</span><br></pre></td></tr></table></figure><p>打开test.docx文档将看见，变量已经替换，完成如图1</p><h3 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h3><p>引入：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use PhpOffice\PhpWord\TemplateProcessor;</span><br><span class="line">use PhpOffice\PhpWord\IOFactory;</span><br></pre></td></tr></table></figure></p><p>封装方法：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * word文档变量替换 </span><br><span class="line">    * @param string  $tmpurl  模板word路径</span><br><span class="line">    * @param array   $search  搜索文档中的变量名  一维数组：[&#x27;param1&#x27;,&#x27;param1&#x27;]</span><br><span class="line">    * @param array   $replace 需替换变量名的值  一维数组：[&#x27;value1&#x27;,&#x27;value1&#x27;]</span><br><span class="line">    * $param string  $alias 别名</span><br><span class="line">    * $param string  $pic_replcae 图片替换（如个人照，公章等）</span><br><span class="line">    * @param int     $type  类型 0-模板替换生成新文档 1-获取文档追加更新</span><br><span class="line">    */</span><br><span class="line">public status function replaceWord($tmpurl = &#x27;&#x27;, $search = [], $replace = [] , $type = 0, $alias = &#x27;&#x27;,$pic_replcae = [])</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if(!$tmpurl) return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;模板文件为空&#x27;];</span><br><span class="line">        //模板work文档，替换成绝对路径</span><br><span class="line">        $tmpUrl = str_replace(request()-&gt;domain().&#x27;/&#x27;,env(&quot;root_path&quot;),$tmpurl);</span><br><span class="line">        $tp = new TemplateProcessor($tmpUrl);</span><br><span class="line">        //替换变量</span><br><span class="line">        $tp-&gt;setValue($search,$replace);</span><br><span class="line"></span><br><span class="line">        if($pic_replcae)&#123;//将图片替换成绝对路径</span><br><span class="line">            $image = str_replace(request()-&gt;domain().&#x27;/&#x27;,env(&quot;root_path&quot;),$pic_replcae[&#x27;image&#x27;]);</span><br><span class="line">            $tp-&gt;setImageValue($pic_replcae[&#x27;search&#x27;],[&#x27;path&#x27;=&gt;$image,&quot;width&quot; =&gt; 150, &quot;height&quot; =&gt; 150]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if($type == 0)&#123;</span><br><span class="line">            //设置保存文件名</span><br><span class="line">            $firstName = env(&quot;root_path&quot;).&#x27;public/upload/word/&#x27;;</span><br><span class="line">            $alias = $alias ? $alias.&#x27;_&#x27;.time().&quot;.docx&quot; : time().&quot;.docx&quot;;</span><br><span class="line">            $firstName = $firstName.$alias;</span><br><span class="line">            //保存文档</span><br><span class="line">            $tp-&gt;saveAs($firstName);</span><br><span class="line">            //生成文件名</span><br><span class="line">            $name = pathinfo($firstName,PATHINFO_FILENAME);</span><br><span class="line">            //新文件路径</span><br><span class="line">            $newUrl = request()-&gt;domain().&quot;/uploads/word/&quot;.$name.&quot;.docx&quot;;</span><br><span class="line">            return [&#x27;code&#x27;=&gt;200&#x27;,&#x27;data&#x27;=&gt;[&#x27;url&#x27;=&gt;$newUrl]];</span><br><span class="line"></span><br><span class="line">        &#125; elseif($type == 1)&#123;</span><br><span class="line">            //获取文件名</span><br><span class="line">            $name = pathinfo($tmpurl,PATHINFO_FILENAME);</span><br><span class="line">            //设置保存文件名</span><br><span class="line">            $firstName = env(&quot;root_path&quot;).&#x27;public/upload/word/&#x27;.$name.&quot;.docx&quot;;</span><br><span class="line">            //更新保存文档</span><br><span class="line">            $tp-&gt;saveAs($firstName);</span><br><span class="line">            return [&#x27;code&#x27;=&gt;200&#x27;,&#x27;data&#x27;=&gt;[&#x27;url&#x27;=&gt;$newUrl]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; catch (\Exception $e) &#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;$e-&gt;getMessage()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法调用实现<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//获取模板文档地址</span><br><span class="line">$tp_word_url = &quot;项目地址/test.docx&quot;;</span><br><span class="line"></span><br><span class="line">//变量名（模板设置的变量）</span><br><span class="line">$search = [&#x27;name&#x27;,&#x27;email&#x27;];</span><br><span class="line"></span><br><span class="line">//替换值</span><br><span class="line">$replace = [&#x27;heyiki&#x27;,&#x27;1186933877@qq.com&#x27;];</span><br><span class="line"></span><br><span class="line">$callback = PhpWordLogic::replaceWord($tp_word_url, $search, $replace, 0, &#x27;test&#x27;);</span><br><span class="line"></span><br><span class="line">图片替换不能与文字替换混在一起，如模板文档的变量值为：img</span><br><span class="line"></span><br><span class="line">$callback = PhpWordLogic::replaceWord($tp_word_url, $search, $replace, 0, &#x27;test&#x27;, [&#x27;image&#x27;=&gt;&#x27;项目地址/123.png&#x27;,&#x27;search&#x27;=&gt;&#x27;img&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> phpword </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP常用第三方插件</title>
      <link href="/posts/10c2fd32.html"/>
      <url>/posts/10c2fd32.html</url>
      
        <content type="html"><![CDATA[<h3 id="PHP常用第三方插件"><a href="#PHP常用第三方插件" class="headerlink" title="PHP常用第三方插件"></a>PHP常用第三方插件</h3><p>微信开发 (现在一般PHP7.2 + 4.2以上，原有的小程序授权存在的问题已修复)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require overtrue/wechat:~4.0 -vvv</span><br></pre></td></tr></table></figure></p><p>通用第三方登录SDK <a href="https://github.com/anerg2046/sns_auth">传送门</a><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require anerg2046/sns_auth</span><br></pre></td></tr></table></figure></p><p>支付(微信支付和支付宝)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require yansongda/pay -vvv</span><br></pre></td></tr></table></figure></p><p>生成二维码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require endroid/qr-code</span><br></pre></td></tr></table></figure></p><p>处理word文档<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require phpoffice/phpword</span><br></pre></td></tr></table></figure></p><p>处理excel<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require phpoffice/phpspreadsheet</span><br></pre></td></tr></table></figure></p><p>发送邮件<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require phpmailer/phpmailer</span><br></pre></td></tr></table></figure></p><p>thinkphp定时任务<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require yunwuxin/think-cron</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇聚支付</title>
      <link href="/posts/b5fb38fc.html"/>
      <url>/posts/b5fb38fc.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="99b13c2b734eebc1d59b1215b423e7099aa9c18c444841f8fede5a1e1ddb480d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP接入微信支付和支付宝支付</title>
      <link href="/posts/eeeb8457.html"/>
      <url>/posts/eeeb8457.html</url>
      
        <content type="html"><![CDATA[<h3 id="支付工具包"><a href="#支付工具包" class="headerlink" title="支付工具包"></a>支付工具包</h3><p>官方文档：<a href="https://github.com/yansongda/pay">yansongda</a></p><p><a href="https://www.huangzhongxin.cn/index.php/2020/06/27/php%e5%bf%ab%e9%80%9f%e6%8e%a5%e5%85%a5%e5%be%ae%e4%bf%a1%e6%94%af%e4%bb%98%e5%92%8c%e6%94%af%e4%bb%98%e5%ae%9d%e6%94%af%e4%bb%98/">原文地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line"></span><br><span class="line">composer require yansongda/pay -vvv</span><br><span class="line"></span><br><span class="line">引入</span><br><span class="line"></span><br><span class="line">use Yansongda\Pay\Pay;</span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>微信支付：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">//调起支付(仅示例扫码支付)</span><br><span class="line">$wechat_config = Config::get(&#x27;wechat_pay&#x27;);</span><br><span class="line">$config = [</span><br><span class="line">    &#x27;app_id&#x27; =&gt; $wechat_config[&#x27;app_id&#x27;],</span><br><span class="line">    &#x27;mch_id&#x27; =&gt; $wechat_config[&#x27;mch_id&#x27;],</span><br><span class="line">    &#x27;key&#x27; =&gt; $wechat_config[&#x27;key&#x27;],</span><br><span class="line">    &#x27;notify_url&#x27; =&gt; &#x27;https://&#x27;.$_SERVER[&#x27;HTTP_HOST&#x27;].&#x27;/portal/Order/wechat_notify&#x27;,</span><br><span class="line">    &#x27;http&#x27; =&gt; [</span><br><span class="line">        &#x27;timeout&#x27; =&gt; 5.0,</span><br><span class="line">        &#x27;connect_timeout&#x27; =&gt; 5.0,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line">$pay_order = [</span><br><span class="line">    &#x27;out_trade_no&#x27; =&gt; $order[&#x27;order_sn&#x27;],</span><br><span class="line">    &#x27;total_fee&#x27; =&gt; $order[&#x27;price&#x27;]*100, //微信支付以分为单位</span><br><span class="line">    &#x27;body&#x27; =&gt; &#x27;测试订单&#x27;,</span><br><span class="line">];</span><br><span class="line">try &#123;</span><br><span class="line">    //网站扫码支付</span><br><span class="line">    $pay = Pay::wechat($config)-&gt;scan($pay_order);</span><br><span class="line">    $qrcode = new Qrcode($pay-&gt;code_url);</span><br><span class="line">    $image = $qrcode-&gt;getString();</span><br><span class="line">    return response($image, 200, [&#x27;Content-Type&#x27; =&gt; &#x27;image/jpeg&#x27;]);</span><br><span class="line">&#125; catch (\Exception $e) &#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//回调验签(验签失败是会跑出异常的，最好写个捕获异常)</span><br><span class="line">$pay = Pay::wechat($config);</span><br><span class="line">$data = $pay-&gt;verify();</span><br><span class="line">$param = $data-&gt;all();</span><br><span class="line">//处理订单</span><br><span class="line">if ($param[&#x27;result_code&#x27;]==&#x27;SUCCESS&#x27;&amp;&amp;$param[&#x27;return_code&#x27;]==&#x27;SUCCESS&#x27;) &#123;</span><br><span class="line">    (new OrderService($param[&#x27;out_trade_no&#x27;], &#x27;wechat&#x27;))-&gt;call_notice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//退款(退款需要用到安全证书)</span><br><span class="line">$wechat_config = Config::get(&#x27;wechat_pay&#x27;);</span><br><span class="line">$config = [</span><br><span class="line">    &#x27;app_id&#x27; =&gt; $wechat_config[&#x27;app_id&#x27;],</span><br><span class="line">    &#x27;mch_id&#x27; =&gt; $wechat_config[&#x27;mch_id&#x27;],</span><br><span class="line">    &#x27;key&#x27; =&gt; $wechat_config[&#x27;key&#x27;],</span><br><span class="line">    &#x27;cert_client&#x27; =&gt; $wechat_config[&#x27;cert_client&#x27;],</span><br><span class="line">    &#x27;cert_key&#x27; =&gt; $wechat_config[&#x27;cert_key&#x27;],</span><br><span class="line">    &#x27;http&#x27; =&gt; [</span><br><span class="line">        &#x27;timeout&#x27; =&gt; 5.0,</span><br><span class="line">        &#x27;connect_timeout&#x27; =&gt; 5.0,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line">$wechat_order = [</span><br><span class="line">    &#x27;out_trade_no&#x27; =&gt; $order[&#x27;order_sn&#x27;],</span><br><span class="line">    &#x27;out_refund_no&#x27; =&gt; $order[&#x27;order_sn&#x27;],</span><br><span class="line">    &#x27;total_fee&#x27; =&gt; $order[&#x27;price&#x27;]*100,</span><br><span class="line">    &#x27;refund_fee&#x27; =&gt; $order[&#x27;price&#x27;]*100</span><br><span class="line">];</span><br><span class="line">try &#123;</span><br><span class="line">    $pay = Pay::wechat($config)-&gt;refund($wechat_order);</span><br><span class="line">    if ($pay-&gt;return_code != &#x27;SUCCESS&#x27;) &#123;</span><br><span class="line">        $this-&gt;error($pay-&gt;return_msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception $e) &#123;</span><br><span class="line">    $this-&gt;error($e-&gt;getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>支付宝支付：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">//调起支付(网站跳转支付)</span><br><span class="line">$alipay_config = Config::get(&#x27;alipay&#x27;);</span><br><span class="line">$config = [</span><br><span class="line">    &#x27;app_id&#x27; =&gt; $alipay_config[&#x27;app_id&#x27;],</span><br><span class="line">    &#x27;notify_url&#x27; =&gt; &#x27;https://&#x27;.$_SERVER[&#x27;HTTP_HOST&#x27;].&#x27;/portal/Order/alipay_notify&#x27;,</span><br><span class="line">    &#x27;return_url&#x27; =&gt; &#x27;https://&#x27;.$_SERVER[&#x27;HTTP_HOST&#x27;].&#x27;/portal/Pay/pay_success&#x27;,</span><br><span class="line">    &#x27;ali_public_key&#x27; =&gt; $alipay_config[&#x27;ali_public_key&#x27;],</span><br><span class="line">    &#x27;private_key&#x27; =&gt; $alipay_config[&#x27;private_key&#x27;],</span><br><span class="line">    &#x27;http&#x27; =&gt; [</span><br><span class="line">        &#x27;timeout&#x27; =&gt; 5.0,</span><br><span class="line">        &#x27;connect_timeout&#x27; =&gt; 5.0,</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line">$pay_order = [</span><br><span class="line">    &#x27;out_trade_no&#x27; =&gt; $order[&#x27;order_sn&#x27;],</span><br><span class="line">    &#x27;total_amount&#x27; =&gt; $order[&#x27;price&#x27;],</span><br><span class="line">    &#x27;subject&#x27; =&gt; &#x27;测试订单&#x27;,</span><br><span class="line">];</span><br><span class="line">try &#123;</span><br><span class="line">    $alipay = Pay::alipay($config)-&gt;web($pay_order);</span><br><span class="line">    return $alipay-&gt;send();</span><br><span class="line">&#125; catch (\Exception $e) &#123;</span><br><span class="line">    $this-&gt;error($e-&gt;getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//回调验签(buyer_id退款要用到，最好存起来)</span><br><span class="line">$alipay = Pay::alipay($config);</span><br><span class="line">$data = $alipay-&gt;verify();</span><br><span class="line"></span><br><span class="line">$param = $data-&gt;all();</span><br><span class="line">if (isset($param[&#x27;out_trade_no&#x27;])&amp;&amp;!empty($param[&#x27;out_trade_no&#x27;])&amp;&amp;$param[&#x27;trade_status&#x27;]==&#x27;TRADE_SUCCESS&#x27;) &#123;</span><br><span class="line">    (new OrderService($param[&#x27;out_trade_no&#x27;], &#x27;alipay&#x27;, $param[&#x27;buyer_id&#x27;]))-&gt;call_notice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//退款(用回原来的配置就行)</span><br><span class="line">$alipay_order = [</span><br><span class="line">    &#x27;out_trade_no&#x27; =&gt; $order[&#x27;order_sn&#x27;],</span><br><span class="line">    &#x27;refund_amount&#x27; =&gt; $order[&#x27;price&#x27;],</span><br><span class="line">    &#x27;goods_id&#x27; =&gt; time(),</span><br><span class="line">    &#x27;goods_name&#x27; =&gt; &#x27;测试商品&#x27;,</span><br><span class="line">    &#x27;quantity&#x27; =&gt; 1,</span><br><span class="line">    &#x27;price&#x27; =&gt; $order[&#x27;price&#x27;],</span><br><span class="line">    &#x27;trans_in&#x27; =&gt; $order[&#x27;buyer_id&#x27;],</span><br><span class="line">];</span><br><span class="line">try&#123;</span><br><span class="line">    $alipay = Pay::alipay($config)-&gt;refund($alipay_order);</span><br><span class="line">    if ($alipay-&gt;code!=&#x27;10000&#x27;||$alipay-&gt;buyer_user_id!=$order[&#x27;buyer_id&#x27;]||$alipay-&gt;out_trade_no!=$order[&#x27;order_sn&#x27;]) &#123;</span><br><span class="line">        $this-&gt;error($alipay-&gt;msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception $e) &#123;</span><br><span class="line">    $this-&gt;error($e-&gt;getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度大脑-人脸识别</title>
      <link href="/posts/b3aa7a0e.html"/>
      <url>/posts/b3aa7a0e.html</url>
      
        <content type="html"><![CDATA[<h2 id="配置（账号已注册认证前提下）"><a href="#配置（账号已注册认证前提下）" class="headerlink" title="配置（账号已注册认证前提下）"></a>配置（账号已注册认证前提下）</h2><p>进入百度AI开放平台控制台登录，选择人脸识别-创建应用，获得API Key 和 Secret Key。</p><span id="more"></span><h2 id="封装代码（TP框架为例）"><a href="#封装代码（TP框架为例）" class="headerlink" title="封装代码（TP框架为例）"></a>封装代码（TP框架为例）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace app\common\logic;</span><br><span class="line"></span><br><span class="line">class BaiduFace</span><br><span class="line">&#123;</span><br><span class="line">    private $secret = &#x27;&#x27;;</span><br><span class="line">    private $appkey = &#x27;&#x27;;</span><br><span class="line">    private $appid = &#x27;&#x27;;</span><br><span class="line">    private $go_url = &#x27;https://aip.baidubce.com&#x27;;//访问地址</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 刷新token</span><br><span class="line">     * @return \think\response\Json</span><br><span class="line">     */</span><br><span class="line">    protected function refreshToken()</span><br><span class="line">    &#123;</span><br><span class="line">        $param = [</span><br><span class="line">            &#x27;grant_type&#x27; =&gt; &#x27;client_credentials&#x27;,</span><br><span class="line">            &#x27;client_id&#x27; =&gt; $this-&gt;appkey,</span><br><span class="line">            &#x27;client_secret&#x27; =&gt; $this-&gt;secret,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $url = $this-&gt;go_url . &#x27;/oauth/2.0/token?&#x27; . http_build_query($param);</span><br><span class="line"></span><br><span class="line">        $o = &#x27;&#x27;;</span><br><span class="line">        foreach ( $param as $k =&gt; $v )</span><br><span class="line">        &#123;</span><br><span class="line">            $o.= &quot;$k=&quot; . urlencode( $v ). &quot;&amp;&quot; ;</span><br><span class="line">        &#125;</span><br><span class="line">        $param = substr($o,0,-1);</span><br><span class="line"></span><br><span class="line">        $result = $this-&gt;httpRequest($url, $param);</span><br><span class="line"></span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取token (token有效期为30天，可用缓存储存，或者实时请求【这里暂时实时请求】)</span><br><span class="line">     * @return bool|mixed</span><br><span class="line">     */</span><br><span class="line">    protected function getToken()</span><br><span class="line">    &#123;</span><br><span class="line">        $res = $this-&gt;refreshToken();</span><br><span class="line">        $res = json_decode($res,true);</span><br><span class="line">        if (isset($res[&#x27;access_token&#x27;])) &#123;</span><br><span class="line">            return $res[&#x27;access_token&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 百度 实名认证</span><br><span class="line">     * 百度 公安验证 （收费）V3版本计费错误码：222350、222351、222354、222355</span><br><span class="line">     * @param $image 人脸照片</span><br><span class="line">     * @param $imageType 照片类型 URL 和 BASE64</span><br><span class="line">     * @param $idCardNumber 身份证号码</span><br><span class="line">     * @param $name 身份证的姓名</span><br><span class="line">     * @param quality_control 图片质量控制 NONE: 不进行控制 LOW:较低的质量要求 NORMAL: 一般的质量要求 HIGH: 较高的质量要求 默认 NONE</span><br><span class="line">     * @param liveness_control活体检测控制 NONE: 不进行控制 LOW:较低的活体要求(高通过率 低攻击拒绝率) NORMAL: 一般的活体要求(平衡的攻击拒绝率, 通过率) HIGH: 较高的活体要求(高攻击拒绝率 低通过率) 默认NONE</span><br><span class="line">     * $param spoofing_control 合成图控制 NONE: 不进行控制 LOW:较低的合成图检测要求(高通过率 低攻击拒绝率) NORMAL: 一般的合成图检测要求(平衡的攻击拒绝率, 通过率) HIGH: 较高的活体要求(高攻击拒绝率 低通过率) 默认NONE</span><br><span class="line">     * @return bool|mixed</span><br><span class="line">     */</span><br><span class="line">    public function realname($image,$imageType, $idCardNumber, $name,$options = array())</span><br><span class="line">    &#123;</span><br><span class="line">        $token = $this-&gt;getToken();</span><br><span class="line"></span><br><span class="line">        $data = array();</span><br><span class="line">        $data[&#x27;image&#x27;] = $image;</span><br><span class="line">        $data[&#x27;image_type&#x27;] = $imageType;</span><br><span class="line">        $data[&#x27;id_card_number&#x27;] = $idCardNumber;</span><br><span class="line">        $data[&#x27;name&#x27;] = $name;</span><br><span class="line">        $data = array_merge($data, $options);</span><br><span class="line"></span><br><span class="line">        $url = $this-&gt;go_url . &#x27;/rest/2.0/face/v3/person/verify?access_token=&#x27; . $token;</span><br><span class="line"></span><br><span class="line">        $result = $this-&gt;request_post($url, json_encode($data));</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 百度 在线活体检测</span><br><span class="line">     * @param $image 检测的照片</span><br><span class="line">     * @param $imageType 照片类型 URL 和 BASE64</span><br><span class="line">     * @return bool|mixed</span><br><span class="line">     */</span><br><span class="line">    public function imgcheck($image,$imageType)</span><br><span class="line">    &#123;</span><br><span class="line">        $token = $this-&gt;getToken();</span><br><span class="line">        $param = [[</span><br><span class="line">            &#x27;image&#x27; =&gt; $image,</span><br><span class="line">            &#x27;image_type&#x27; =&gt; $imageType,</span><br><span class="line">        ]];</span><br><span class="line">        $url = $this-&gt;go_url . &#x27;/rest/2.0/face/v3/faceverify?access_token=&#x27; . $token;</span><br><span class="line">        $result = $this-&gt;request_post($url, json_encode($param));</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 语音校验码接口</span><br><span class="line">     * @param int $min_code_length 生成的验证码最小长度 最大6 最小3 默认3 非必传</span><br><span class="line">     * @param int $max_code_length 生成的验证码最大长度 最大6 最小3 默认6 非必传</span><br><span class="line">     * @return bool|mixed</span><br><span class="line">     * @return session_id 语音校验码会话id，有效期5分钟，请提示用户在五分钟内完成全部操作</span><br><span class="line">     * @return code 语音验证码，数字形式，3~6位数字</span><br><span class="line">     */</span><br><span class="line">    public function voiceCode()</span><br><span class="line">    &#123;</span><br><span class="line">        $token = $this-&gt;getToken();</span><br><span class="line">        $param = [[</span><br><span class="line">            &#x27;min_code_length&#x27; =&gt; 3,</span><br><span class="line">            &#x27;max_code_length&#x27; =&gt; 6,</span><br><span class="line">        ]];</span><br><span class="line">        $url = $this-&gt;go_url . &#x27;/rest/2.0/face/v1/faceliveness/sessioncode?access_token=&#x27; . $token;</span><br><span class="line">        $result = $this-&gt;request_post($url, json_encode($param));</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 视频活体检测接口</span><br><span class="line">     * @param string $video_base64 base64 编码的视频数据；建议视频大小控制在10M/1min以内</span><br><span class="line">     * @param string $session_id 会话ID （当此字段为空时，则跳过语音验证和唇语验证步骤）</span><br><span class="line">     * @param string $lip_identify 取值COMMON/STRICT/OFF, COMMON代表使用唇语识别，STRICT代表使用唇语识别并使用更加严格的策略判断是否通过 OFF代表关闭唇语识别，默认OFF</span><br><span class="line">     * @param string $face_field 需要使用合成图功能时, 此项传入spoofing</span><br><span class="line">     * @return bool|mixed</span><br><span class="line">     * @return session_id 语音校验码会话id，有效期5分钟，请提示用户在五分钟内完成全部操作</span><br><span class="line">     * @return code 语音验证码，数字形式，3~6位数字</span><br><span class="line">     */</span><br><span class="line">    public function videocheck($video_base64,$session_id)</span><br><span class="line">    &#123;</span><br><span class="line">        $token = $this-&gt;getToken();</span><br><span class="line">        $param = [[</span><br><span class="line">            &#x27;video_base64&#x27; =&gt; $video_base64,</span><br><span class="line">            &#x27;session_id&#x27; =&gt; $session_id,</span><br><span class="line">            &#x27;lip_identify&#x27; =&gt; &#x27;COMMON&#x27;,</span><br><span class="line">            &#x27;face_field&#x27; =&gt; &#x27;spoofing&#x27;,</span><br><span class="line">        ]];</span><br><span class="line">        $url = $this-&gt;go_url . &#x27;/rest/2.0/face/v1/faceliveness/verify?access_token=&#x27; . $token;</span><br><span class="line">        $result = $this-&gt;request_post($url, json_encode($param));</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 图片base64转换</span><br><span class="line">     * @param $image_path //图片路径需要在服务器上，并在提前转换成绝对路径</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    private function base64EncodeImage($image_path) &#123;</span><br><span class="line">        //判断服务器是否存在此人像照</span><br><span class="line">        if(!@fopen($data[&#x27;personal_img&#x27;], &#x27;r&#x27;)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        $base64_image = &#x27;&#x27;;</span><br><span class="line">        $image_info = getimagesize($image_path);</span><br><span class="line">        $image_data = fread(fopen($image_path, &#x27;r&#x27;), filesize(trim($image_path)));</span><br><span class="line">        app(&#x27;log&#x27;)-&gt;record(&#x27;百度人脸识别base64照片：&#x27;.json_encode(filesize(trim($image_path))),&#x27;realauth&#x27;);</span><br><span class="line">        $base64_image = chunk_split(base64_encode($image_data));</span><br><span class="line">        return $base64_image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function httpRequest($url = &#x27;&#x27;, $param = &#x27;&#x27;) &#123;</span><br><span class="line">        if (empty($url) || empty($param)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $postUrl = $url;</span><br><span class="line">        $curlPost = $param;</span><br><span class="line">        $curl = curl_init();//初始化curl</span><br><span class="line">        curl_setopt($curl, CURLOPT_URL,$postUrl);//抓取指定网页</span><br><span class="line">        curl_setopt($curl, CURLOPT_HEADER, 0);//设置header</span><br><span class="line">        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);//要求结果为字符串且输出到屏幕上</span><br><span class="line">        curl_setopt($curl, CURLOPT_POST, 1);//post提交方式</span><br><span class="line">        curl_setopt($curl, CURLOPT_POSTFIELDS, $curlPost);</span><br><span class="line">        $data = curl_exec($curl);//运行curl</span><br><span class="line">        curl_close($curl);</span><br><span class="line"></span><br><span class="line">        return $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function request_post($url = &#x27;&#x27;, $param = &#x27;&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        if (empty($url) || empty($param)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $postUrl = $url;</span><br><span class="line">        $curlPost = $param;</span><br><span class="line">        // 初始化curl</span><br><span class="line">        $curl = curl_init();</span><br><span class="line">        curl_setopt($curl, CURLOPT_URL, $postUrl);</span><br><span class="line">        curl_setopt($curl, CURLOPT_HEADER, 0);</span><br><span class="line">        // 要求结果为字符串且输出到屏幕上</span><br><span class="line">        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);</span><br><span class="line">        // post提交方式</span><br><span class="line">        curl_setopt($curl, CURLOPT_POST, 1);</span><br><span class="line">        curl_setopt($curl, CURLOPT_POSTFIELDS, $curlPost);</span><br><span class="line">        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">        // 运行curl</span><br><span class="line">        $data = curl_exec($curl);</span><br><span class="line">        curl_close($curl);</span><br><span class="line">        $res = json_decode($data, true);</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function jcHttpDataPost($url, $data, $json_transfer = 1)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($json_transfer == 1) &#123;</span><br><span class="line">            $data = json_encode($data, JSON_UNESCAPED_UNICODE);</span><br><span class="line">        &#125; else if ($json_transfer == 2) &#123;</span><br><span class="line">            $data = urldecode(json_encode($data, JSON_UNESCAPED_UNICODE));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, &quot;POST&quot;);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);</span><br><span class="line">        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);</span><br><span class="line">        curl_setopt($ch, CURLOPT_USERAGENT, &#x27;Mozilla/5.0 (compatible; MSIE 5.01; Windows NT 5.0)&#x27;);</span><br><span class="line">        curl_setopt($ch, CURLOPT_AUTOREFERER, 1);</span><br><span class="line">        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);</span><br><span class="line">        $status = curl_exec($ch);</span><br><span class="line">        curl_close($ch);</span><br><span class="line">        $res = json_decode($status, true);</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line">    #设置为 1 是检查服务器SSL证书中是否存在一个公用名(common name)。译者注：公用名(Common Name)一般来讲就是填写你将要申请SSL证书的域名 (domain)或子域名(sub domain)。 设置成 2，会检查公用名是否存在，并且是否与提供的主机名匹配。 0 为不检查名称。 在生产环境中，这个值应该是 2（默认值</span><br><span class="line">    // curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, &#x27;0&#x27;);</span><br><span class="line">    #禁止 cURL 验证对等证书（peer&#x27;s certificate）。要验证的交换证书可以在 CURLOPT_CAINFO 选项中设置</span><br><span class="line">    // curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, &#x27;0&#x27;);</span><br><span class="line"></span><br><span class="line">    //======================================================== 错误码信息 =============================================</span><br><span class="line">    /**</span><br><span class="line">     * 百度人脸识别错误信息</span><br><span class="line">     * @param $code</span><br><span class="line">     * @return array|string</span><br><span class="line">     */</span><br><span class="line">    public function faceErrorCode($code)&#123;</span><br><span class="line">        switch (isset($code))&#123;</span><br><span class="line">            case $code === 0:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;200,&#x27;msg&#x27;=&gt;&#x27;验证通过&#x27;];//是同一个人或者非同一个人，其后判断识别分数（推荐大于80）判为同一人</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222350:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;公安网图片不存在或质量过低，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222351:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;身份证号与姓名不匹配或该身份证号不存在，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222352:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;身份证名字格式错误，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222353:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;身份证号码格式错误，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222354:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;公安库里不存在此身份证号，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222355:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;身份证号码正确，公安库里没有对应的照片，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222356:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;验证的人脸图片质量不符合要求，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222360:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;身份证号码或名字非法（公安网校验不通过），请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222361:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;公安服务连接失败，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 216600:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;输入身份证格式错误，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 216601:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;身份证号和名字匹配失败，请重新上传&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222202:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;图片中没有人脸&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222203:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;无法解析人脸&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 223113:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;人脸有被遮挡&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 223114:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;人脸模糊&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 223115:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;人脸光照不好&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 223116:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;人脸不完整&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222304:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;图片尺寸太大&#x27;];</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222307:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;请重新上传合法的图片&#x27;];//图片非法 鉴黄未通过</span><br><span class="line">                break;</span><br><span class="line">            case $code === 222308:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;请重新上传合法的图片&#x27;];//图片非法 含有政治敏感人物</span><br><span class="line">                break;</span><br><span class="line">            case $code === 223129:</span><br><span class="line">                $res = [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;请使用面向正前方的人脸图片&#x27;];//人脸未面向正前方（人脸的角度信息大于30度）</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                $res =  [&#x27;code&#x27;=&gt;403,&#x27;msg&#x27;=&gt;&#x27;其他错误&#x27;];</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 人脸识别 </tag>
            
            <tag> 百度大脑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止别人查看页面的代码</title>
      <link href="/posts/f096709a.html"/>
      <url>/posts/f096709a.html</url>
      
        <content type="html"><![CDATA[<h4 id="HTML防止查看源码"><a href="#HTML防止查看源码" class="headerlink" title="HTML防止查看源码"></a>HTML防止查看源码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--onselectstart:禁止选中 oncontextmenu:右键弹出版权 event.keyCode==27:按esc键表示放弃Esc键阻止网页继续载入,也就是说你按ESC键网页还是继续加载--&gt;</span><br><span class="line">&lt;body onselectstart=&quot;return false;&quot; oncontextmenu=&quot;alert(&#x27;请尊重本网站版权！&#x27;);return false;&quot; onkeydown=&quot;if(event.keyCode==27) return false;&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  document.onmousedown = click;  //绑定禁用鼠标右键事件</span><br><span class="line">  document.onkeydown = ctrl_key; //绑定禁用键盘事件</span><br><span class="line">  function click() &#123;</span><br><span class="line">    if (event.button == 2)      //单击的鼠标键为右键</span><br><span class="line">    &#123;</span><br><span class="line">      alert(&#x27;请尊重本网站版权！&#x27;);</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function ctrl_key() &#123;</span><br><span class="line">      if (event.keyCode == 17) &#123;          //禁用CTRL+S 保存网页代码</span><br><span class="line">        window.alert(&quot;请尊重本网站版权！&quot;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">      if (event.keyCode == 123) &#123;         //禁用F12查看源代码</span><br><span class="line">        alert(&#x27;请尊重本网站版权！&#x27;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>原文地址：<a href="http://www.aeink.com/107.html">http://www.aeink.com/107.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP5 使用swoole 网页版实时聊天</title>
      <link href="/posts/b6a546a8.html"/>
      <url>/posts/b6a546a8.html</url>
      
        <content type="html"><![CDATA[<p>目前官方已经开放了<br>ThinkPHP5.1版本的swoole：<br><a href="https://github.com/top-think/think-swoole">https://github.com/top-think/think-swoole</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>服务器必须开启swoole扩展，如使用宝塔，则在对应的php版本—设置—安装扩展—选择<code>swoole4</code>安装。</p><p>安装完之后用命令执行<code>php -m</code>，看到<code>swoole</code>即代表安装完成。</p><p>在swoole扩展安装后，tp5的项目根目录下执行composer命令安装think-swoole：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require topthink/think-swoole</span><br></pre></td></tr></table></figure></p><p><strong>注意：对应的端口要放行，这里使用的端口是9501</strong></p><p>服务端启动 swoole<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php think swoole:server</span><br></pre></td></tr></table></figure></p><h3 id="相关数据表"><a href="#相关数据表" class="headerlink" title="相关数据表"></a>相关数据表</h3><p>如果有登录注册，无则忽略</p><p>用户表(简约版)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dy_user` (</span><br><span class="line">  `uid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(50) NOT NULL COMMENT &#x27;账号&#x27;,</span><br><span class="line">  `password` varchar(64) NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `create_time` int(10) DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `login_time` int(10) DEFAULT NULL COMMENT &#x27;上次登录时间&#x27;,</span><br><span class="line">  `ip` varchar(32) CHARACTER SET utf8 DEFAULT NULL COMMENT &#x27;注册ip&#x27;,</span><br><span class="line">  `pass_time` int(11) DEFAULT NULL COMMENT &#x27;密码错误时间&#x27;,</span><br><span class="line">  `pass_error` tinyint(1) unsigned DEFAULT &#x27;0&#x27; COMMENT &#x27;密码错误次数&#x27;,</span><br><span class="line">  PRIMARY KEY (`uid`) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COMMENT=&#x27;用户表&#x27;;</span><br></pre></td></tr></table></figure></p><p>token表<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `dy_user_token` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `uid` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;用户uid&#x27;,</span><br><span class="line">  `access_token` varchar(250) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;随机字符串&#x27;,</span><br><span class="line">  `create_time` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;添加时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  KEY `uid` (`uid`) USING BTREE COMMENT &#x27;用户ID&#x27;</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=&#x27;保存token随机字符串&#x27;;</span><br></pre></td></tr></table></figure></p><h3 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>在控制器下新建一个控制器继承<code>Server</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\index\controller;</span><br><span class="line"></span><br><span class="line">// 必须 use 并继承 \think\swoole\Server 类</span><br><span class="line">use think\swoole\Server;</span><br><span class="line">use think\Db;</span><br><span class="line">use think\facade\Cache;</span><br><span class="line"></span><br><span class="line">class Swoole extends Server</span><br><span class="line">&#123;</span><br><span class="line">    protected static $token;</span><br><span class="line">    protected $host = &#x27;0.0.0.0&#x27;;// 监听所有地址</span><br><span class="line">    protected $port = 9501;// 监听 9501 端口</span><br><span class="line">    protected $serverType = &#x27;socket&#x27;;</span><br><span class="line">    protected $mode = SWOOLE_PROCESS;// 指定运行模式为多进程</span><br><span class="line">    protected $sockType = SWOOLE_SOCK_TCP;// 指定 socket 的类型为 ipv4 的 tcp socket</span><br><span class="line">    protected static $uid = &#x27;&#x27;;</span><br><span class="line">    protected $option = [</span><br><span class="line">        &#x27;worker_num&#x27; =&gt; 4, // 设置启动的Worker进程数 </span><br><span class="line">        &#x27;daemonize&#x27; =&gt; false, //守护进程化。</span><br><span class="line">        &#x27;backlog&#x27; =&gt; 128, //Listen队列长度，</span><br><span class="line">        &#x27;dispatch_mode&#x27; =&gt; 2,</span><br><span class="line">        // &#x27;heartbeat_check_interval&#x27; =&gt; 5, // 延时</span><br><span class="line">        // &#x27;heartbeat_idle_time&#x27; =&gt; 100, // 心跳</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    //收到信息时回调函数</span><br><span class="line">    // public function onRequest($request, $response)</span><br><span class="line">    // &#123;</span><br><span class="line">    // var_dump(&#x27;qweqw&#x27;);</span><br><span class="line">    // &#125;</span><br><span class="line">    </span><br><span class="line">    //建立连接时回调函数</span><br><span class="line">    public function onOpen($server,$req)</span><br><span class="line">    &#123;</span><br><span class="line">        $fd = $req-&gt;fd;//客户端标识</span><br><span class="line">        $token = $req-&gt;get[&#x27;token&#x27;];//客户端传递的用户登录token</span><br><span class="line"></span><br><span class="line">        $token_info = Db::name(&quot;user_token&quot;)-&gt;alias(&quot;a&quot;)</span><br><span class="line">            -&gt;join(&#x27;user b&#x27;,&quot;b.uid=a.uid&quot;)</span><br><span class="line">            -&gt;where([&#x27;a.access_token&#x27;=&gt;$token])</span><br><span class="line">            -&gt;field(&#x27;a.create_time,b.uid,b.username&#x27;)-&gt;find();</span><br><span class="line">            </span><br><span class="line">        $uid = $token_info[&#x27;uid&#x27;];</span><br><span class="line">        $username = $token_info[&#x27;username&#x27;];</span><br><span class="line">            </span><br><span class="line">        $end_time = $token_info[&#x27;create_time&#x27;] + 60*60*24;//一天</span><br><span class="line">        if (time() &gt; $end_time) &#123;</span><br><span class="line">            $arr = array(&#x27;status&#x27;=&gt;2,&#x27;message&#x27;=&gt;&#x27;登录已失效,请重新登录&#x27;);</span><br><span class="line">            $server-&gt;push($fd, json_encode($arr));</span><br><span class="line">            $server-&gt;close($fd);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //给用户绑定uid</span><br><span class="line">        //清除解绑</span><br><span class="line">        Cache::rm(&#x27;_fd_&#x27;.$fd);</span><br><span class="line">        </span><br><span class="line">        $data = [&#x27;fd&#x27;=&gt;$fd,&#x27;uid&#x27;=&gt;$uid,&#x27;username&#x27;=&gt;$username,&#x27;token&#x27;=&gt;$token];</span><br><span class="line">        //fb绑定uid</span><br><span class="line">        Cache::set(&#x27;_fd_&#x27;.$fd, $data);</span><br><span class="line"></span><br><span class="line">        echo &quot;用户&#123;$uid&#125;建立了连接,标识为&#123;$fd&#125;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //接收数据时回调函数</span><br><span class="line">     public function onMessage($server,$frame)</span><br><span class="line">     &#123;</span><br><span class="line">         $fd = $frame-&gt;fd;</span><br><span class="line">         $message = $frame-&gt;data;</span><br><span class="line"></span><br><span class="line">         //通过fd查询用户uid</span><br><span class="line">         $fd_data = Cache::get(&#x27;_fd_&#x27;.$fd);</span><br><span class="line">         $data[&#x27;token&#x27;] = $fd_data[&#x27;token&#x27;];</span><br><span class="line">         $data[&#x27;message&#x27;] = $fd_data[&#x27;username&#x27;].&#x27;发送了：&#x27;.$message;</span><br><span class="line">         $data[&#x27;post_time&#x27;] = date(&quot;m/d H:i&quot;,time());</span><br><span class="line">         $arr = array(&#x27;status&#x27;=&gt;1,&#x27;message&#x27;=&gt;&#x27;success&#x27;,&#x27;data&#x27;=&gt;$data);</span><br><span class="line">  </span><br><span class="line">         //仅推送给当前连接用户</span><br><span class="line">         //$server-&gt;push($fd, json_encode($arr));</span><br><span class="line">         </span><br><span class="line">         //推送给全部连接用户</span><br><span class="line">         foreach($server-&gt;connections as $fd) &#123;</span><br><span class="line">             $server-&gt;push($fd, json_encode($arr));</span><br><span class="line">         &#125; </span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     //连接关闭时回调函数</span><br><span class="line">    function onClose(\swoole_server $server, int $fd, int $reactorId)</span><br><span class="line">    // public function onClose($server,$fd)</span><br><span class="line">    &#123;</span><br><span class="line">        $fd_data = Cache::get(&#x27;_fd_&#x27;.$fd);</span><br><span class="line">        Cache::rm(&#x27;_fd_&#x27;.$fd);//清除fd绑定标识</span><br><span class="line">        echo &quot;标识&#123;$fd&#125;关闭了连接\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>这里使用的是网页</p><blockquote><p>html</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Chat&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/public/static/index/css/bootstrap-grid.min.css&quot; /&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/public/static/index/css/chat.css&quot; /&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/public/static/admin/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;/public/static/plugins/layer/layer.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/public/static/index/js/flexible.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;a class=&quot;back&quot; href=&quot;javascript:history.back()&quot;&gt;&lt;/a&gt; --&gt;</span><br><span class="line">    &lt;h5 class=&quot;tit&quot;&gt;实时聊天&lt;/h5&gt;</span><br><span class="line">    &lt;!-- &lt;div class=&quot;right&quot;&gt;退出&lt;/div&gt; --&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 聊天内容 start--&gt;</span><br><span class="line">    &lt;div class=&quot;message&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- 聊天内容 end--&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 底部 start--&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;/public/static/index/images/hua.png&quot; alt=&quot;暂无此功能&quot; /&gt;</span><br><span class="line">    &lt;img src=&quot;/public/static/index/images/xiaolian.png&quot; alt=&quot;暂无此功能&quot; /&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; maxlength=&quot;300&quot; id=&quot;msg&quot; /&gt;</span><br><span class="line">    &lt;p id=&quot;sendBtn&quot;&gt;发送&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 底部 end--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function () &#123;</span><br><span class="line">    var token = &quot;&#123;$token&#125;&quot;;//用户token，需要服务端新建一个控制器返回该页面token值</span><br><span class="line"></span><br><span class="line">    //判断浏览器是否支持WebSocket</span><br><span class="line">    var supportsWebSockets = &#x27;WebSocket&#x27; in window || &#x27;MozWebSocket&#x27; in window;</span><br><span class="line">    if (supportsWebSockets) &#123;</span><br><span class="line">        //建立WebSocket连接（ip地址换成自己主机ip）</span><br><span class="line">        var ws = new WebSocket(&quot;ws://106.55.11.78:9501?token=&quot;+token);</span><br><span class="line">        ws.onopen = function () &#123;</span><br><span class="line">            layer.msg(&#x27;服务器连接成功&#x27;,&#123;shade:0.1,icon:1,time:600&#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onerror = function () &#123;</span><br><span class="line">            layer.msg(&#x27;服务器连接失败&#x27;,&#123;shade:0.1,icon:2,time:600&#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onmessage = function (evt) &#123;</span><br><span class="line">            var data = $.parseJSON(evt.data);</span><br><span class="line">            //错误提示</span><br><span class="line">            if(data.status != 1)&#123;</span><br><span class="line">                layer.alert(data.message,&#123;icon:2&#125;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            //消息返回</span><br><span class="line">            if (data.status==1 &amp;&amp; data.data.message!=&#x27;&#x27;) &#123;</span><br><span class="line">                var html = &quot;&quot;;</span><br><span class="line">                if (data.data.token == token) &#123;</span><br><span class="line">                    html += &quot;&lt;div class=\&quot;show\&quot;&gt;&lt;div class=\&quot;time\&quot;&gt;&quot;+data.data.post_time+&quot;&lt;/div&gt;&lt;div class=\&quot;msg\&quot;&gt;&lt;img src=\&quot;&quot;+data.data.head_img+&quot;\&quot; alt=\&quot;\&quot; /&gt;&lt;p&gt;&lt;i clas=\&quot;msg_input\&quot;&gt;&lt;/i&gt;&quot;+data.data.message+&quot;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&quot;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    html += &quot;&lt;div class=\&quot;send\&quot;&gt;&lt;div class=\&quot;time\&quot;&gt;&quot;+data.data.post_time+&quot;&lt;/div&gt;&lt;div class=\&quot;msg\&quot;&gt;&lt;img src=\&quot;&quot;+data.data.head_img+&quot;\&quot; alt=\&quot;\&quot; /&gt;&lt;p&gt;&lt;i clas=\&quot;msg_input\&quot;&gt;&lt;/i&gt;&quot;+data.data.message+&quot;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $(&quot;.message&quot;).append(html);</span><br><span class="line">            setTimeout(function () &#123;</span><br><span class="line">                ($(&#x27;.message&#x27;).children(&quot;div:last-child&quot;)[0]).scrollIntoView();//向上滚动</span><br><span class="line">            &#125;,100);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onclose = function (res) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        //按钮发送</span><br><span class="line">        $(&quot;#sendBtn&quot;).click(function () &#123;</span><br><span class="line">            var contents = $(&quot;#msg&quot;).val().trim();</span><br><span class="line">            if(contents == null || contents == &quot;&quot;)&#123;</span><br><span class="line">                layer.msg(&#x27;内容为空&#x27;,&#123;shade:0.1,icon:2,time:600&#125;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                ws.send(contents);</span><br><span class="line">                $(&quot;#msg&quot;).val(&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //回车发送</span><br><span class="line">        $(&quot;#msg&quot;).keydown(function (evel) &#123;</span><br><span class="line">            var that = $(this);</span><br><span class="line">            if (evel.keyCode == 13) &#123;</span><br><span class="line">                evel.cancelBubble = true;</span><br><span class="line">                evel.preventDefault();</span><br><span class="line">                evel.stopPropagation();</span><br><span class="line">                var contents = that.val().trim();</span><br><span class="line">                if(contents == null || contents == &quot;&quot;)&#123;</span><br><span class="line">                    layer.msg(&#x27;内容为空&#x27;,&#123;shade:0.1,icon:2,time:600&#125;);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    ws.send(contents);</span><br><span class="line">                    that.val(&quot;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        layer.alert(&quot;您的浏览器不支持 WebSocket!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    //发送按钮变色</span><br><span class="line">    $(function()&#123;</span><br><span class="line">    $(&#x27;.footer&#x27;).on(&#x27;keyup&#x27;,&#x27;input&#x27;,function()&#123;</span><br><span class="line">    if($(this).val().length&gt;0)&#123;</span><br><span class="line">    $(this).next().css(&#x27;background&#x27;,&#x27;#114F8E&#x27;).prop(&#x27;disabled&#x27;,true);</span><br><span class="line">    </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">    $(this).next().css(&#x27;background&#x27;,&#x27;#ddd&#x27;).prop(&#x27;disabled&#x27;,false);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    /*$(&#x27;.footer p&#x27;).click(function()&#123;</span><br><span class="line">    show(&quot;/public/static/index/images/touxiangm.png&quot;,$(this).prev().val());</span><br><span class="line">    test();</span><br><span class="line">    &#125;)*/</span><br><span class="line">    &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>css</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line">h5&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">max-width: 100%;</span><br><span class="line">    vertical-align: middle</span><br><span class="line">&#125;</span><br><span class="line">input&#123;</span><br><span class="line">outline: none;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    max-width: 720px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    background: #f1f1f1;</span><br><span class="line">    color:#333;</span><br><span class="line">    font-size: 0.26rem;</span><br><span class="line">&#125;</span><br><span class="line">.header&#123;</span><br><span class="line">    border-bottom: 1px solid #dfdfdf;</span><br><span class="line">    padding:0 0.2rem;</span><br><span class="line">    height: 1rem;</span><br><span class="line">    line-height: 1rem;</span><br><span class="line">    background: #fff;</span><br><span class="line">    position: fixed;</span><br><span class="line">    width: 100%;</span><br><span class="line">    max-width: 720px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    z-index: 100;</span><br><span class="line">&#125;</span><br><span class="line">.back&#123;</span><br><span class="line">    position: absolute;  </span><br><span class="line">top: 0;</span><br><span class="line">left: 0.3rem;</span><br><span class="line">background:url(./images/left.png) no-repeat;</span><br><span class="line">    width: 0.2rem;</span><br><span class="line">    height:0.4rem;</span><br><span class="line">    margin-top: 0.34rem;</span><br><span class="line">    background-size: 0.2rem 0.4rem;</span><br><span class="line">&#125;</span><br><span class="line">.header .tit&#123;</span><br><span class="line">    font-size: 0.32rem;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    text-align: center;</span><br><span class="line">    height: 1rem;</span><br><span class="line">    line-height: 1rem;</span><br><span class="line">    font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.header .right&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">right: 0.3rem;</span><br><span class="line">top: 0;</span><br><span class="line">float: none;</span><br><span class="line">font-size: 0.24rem;</span><br><span class="line">line-height: 1.2rem;</span><br><span class="line">&#125;</span><br><span class="line">.message&#123;</span><br><span class="line">    background-color: #f1f1f1;</span><br><span class="line">padding: 1.2rem 0.3rem 1rem 0.3rem;</span><br><span class="line">&#125;</span><br><span class="line">.time&#123;</span><br><span class="line">    font-size:0.24rem;</span><br><span class="line">    color:#999;</span><br><span class="line">    margin-bottom: 0.3rem;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.footer&#123;</span><br><span class="line">position: fixed;</span><br><span class="line">bottom: 0;</span><br><span class="line">    height:1rem;</span><br><span class="line">    background-color:#fff;</span><br><span class="line">    line-height:1rem;</span><br><span class="line">    width: 100%;</span><br><span class="line">    max-width: 720px;</span><br><span class="line">    border-top: 1px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line">.footer img&#123;</span><br><span class="line">    margin-left:0.2rem;</span><br><span class="line">    width: 0.5rem;</span><br><span class="line">&#125;</span><br><span class="line"> .footer input&#123;</span><br><span class="line">    margin-left:0.2rem;</span><br><span class="line">    width:3.5rem;</span><br><span class="line">    height:0.64rem;</span><br><span class="line">    border-radius: 0.1rem;</span><br><span class="line">    border:0.01rem solid #ddd;</span><br><span class="line">    padding : 0 0.15rem;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.footer p&#123;</span><br><span class="line">   width:1.2rem;</span><br><span class="line">    height:0.68rem;</span><br><span class="line">    font-size:0.3rem;</span><br><span class="line">    color:#fff;</span><br><span class="line">    line-height:0.68rem;</span><br><span class="line">    text-align:center;</span><br><span class="line">    background-color:#ddd;</span><br><span class="line">    border-radius: 0.1rem;</span><br><span class="line">    float:right;</span><br><span class="line">    margin-top:0.2rem;</span><br><span class="line">    margin-right:0.2rem;</span><br><span class="line">&#125;</span><br><span class="line">.send:after,.show:after,.msg:after&#123;</span><br><span class="line">content: &quot;&quot;;</span><br><span class="line">clear: both;</span><br><span class="line">display: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.msg&gt;img&#123;</span><br><span class="line">width: 0.8rem;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">.msg&gt;p&#123;</span><br><span class="line">float: left;</span><br><span class="line">margin:0  0.4rem;</span><br><span class="line">padding: 0.25rem;</span><br><span class="line">background: #fff;</span><br><span class="line">font-size: 0.3rem;</span><br><span class="line">position: relative;</span><br><span class="line">border-radius: 0.2rem;</span><br><span class="line">max-width:5rem ;</span><br><span class="line">box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.msg_input&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">background: url(./images/msg-input.png) no-repeat;</span><br><span class="line">background-size: 0.31rem auto;</span><br><span class="line">width: 0.31rem;</span><br><span class="line">height: 0.51rem;</span><br><span class="line">left: -0.31rem;</span><br><span class="line">top: 0.25rem;</span><br><span class="line">&#125;</span><br><span class="line">.show .msg img,.show .msg p,.show .msg&#123;</span><br><span class="line">float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.show .msg_input&#123;</span><br><span class="line">left: auto;</span><br><span class="line">right: -0.11rem;</span><br><span class="line">transform:rotate(180deg);</span><br><span class="line">-ms-transform:rotate(180deg); /* IE 9 */</span><br><span class="line">-moz-transform:rotate(180deg); /* Firefox */</span><br><span class="line">-webkit-transform:rotate(180deg); /* Safari 和 Chrome */</span><br><span class="line">-o-transform:rotate(180deg); /* Opera */</span><br><span class="line">&#125;</span><br><span class="line">.send,.show&#123;</span><br><span class="line">padding-bottom: 0.3rem;</span><br><span class="line">&#125;</span><br><span class="line">.alert_novip,.flower_num,.give_flower&#123;</span><br><span class="line">display: none;</span><br><span class="line">padding: 0.3rem 0.5rem;</span><br><span class="line">font-size: 0.28rem;</span><br><span class="line">&#125;</span><br><span class="line">.alert_novip p,.flower_num  p&#123;</span><br><span class="line">margin-bottom: 0.45rem;</span><br><span class="line"></span><br><span class="line">.layui-layer-wrap button&#123;</span><br><span class="line">font-size: 0.28rem;</span><br><span class="line">padding: 0.2rem 0.3rem;</span><br><span class="line">margin-top: 0.1rem;</span><br><span class="line">background: #f8f8f8;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.flower_num button&#123;</span><br><span class="line">padding: 0.2rem 0.5rem;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.layui-layer-wrap button:first-child&#123;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">.layui-layer-wrap button:last-child&#123;</span><br><span class="line">float: right;</span><br><span class="line">background: #FF7171;</span><br><span class="line">color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.alert_novip button&#123;</span><br><span class="line">padding: 0.2rem 0.3rem;</span><br><span class="line">    border-radius: 10px</span><br><span class="line">&#125;</span><br><span class="line">.flower&#123;</span><br><span class="line">width: 0.8rem;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.give_flower&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.give_flower p&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 1.5;</span><br><span class="line">&#125;</span><br><span class="line">.give_flower input&#123;</span><br><span class="line">width: 1rem;</span><br><span class="line">margin-right: 0.1rem;</span><br><span class="line">margin-top: 0.2rem;</span><br><span class="line">&#125;</span><br><span class="line">.give_flower button&#123;</span><br><span class="line">display: block;</span><br><span class="line">width: 3rem;</span><br><span class="line">font-size: 0.28rem;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">margin-top: 0.6rem;</span><br><span class="line">float: none!important;</span><br><span class="line">line-height: 0.65rem;</span><br><span class="line">border-radius: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>html样式js</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(function (doc, win) &#123;</span><br><span class="line">      var docEl = doc.documentElement,</span><br><span class="line">          resizeEvt = &#x27;orientationchange&#x27; in window ? &#x27;orientationchange&#x27; : &#x27;resize&#x27;,</span><br><span class="line">          recalc = function () &#123;</span><br><span class="line">              var clientWidth = docEl.clientWidth;</span><br><span class="line">              if (!clientWidth) return;</span><br><span class="line">              if(clientWidth&gt;=720)&#123;</span><br><span class="line">                  docEl.style.fontSize = &#x27;100px&#x27;;</span><br><span class="line">              &#125;else&#123;</span><br><span class="line">                  docEl.style.fontSize = 100 * (clientWidth / 720) + &#x27;px&#x27;;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line">      if (!doc.addEventListener) return;</span><br><span class="line">      win.addEventListener(resizeEvt, recalc, false);</span><br><span class="line">      doc.addEventListener(&#x27;DOMContentLoaded&#x27;, recalc, false);</span><br><span class="line">  &#125;)(document, window);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Swoole </tag>
            
            <tag> ThinkPHP5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7.5 下安装FFmpeg及使用方法</title>
      <link href="/posts/57286682.html"/>
      <url>/posts/57286682.html</url>
      
        <content type="html"><![CDATA[<p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec。 FFmpeg是在 Linux 下开发出来的，但它可以在包括 Windows 在内的大多数操作系统中编译。这个项目是由 Fabrice Bellard 发起的，现在由 Michael Niedermayer 主持。可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>安装EPEL Release，因为安装需要使用其他的repo源，所以需要EPEL支持</p><p><code>[root@VM_0_17_centos ~]# sudo yum install -y epel-release rpm</code></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/ffmpeg1.png" width = "800" height = "600" alt="" align=center /></p><p>如果缺少code提示，执行此命令</p><p><code>[root@VM_0_17_centos ~]# sudo rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7</code></p><p>安装完成之后，可以查看是否安装成功</p><p><code>[root@VM_0_17_centos ~]# yum repolist</code></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/ffmpeg2.png" width = "800" height = "600" alt="" align=center /></p><p><strong>安装Nux-Dextop源</strong></p><p>导入一个Code</p><p><code>[root@VM_0_17_centos ~]# sudo rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</code></p><p>安装nux-dextop 源</p><p><code>[root@VM_0_17_centos ~]# sudo rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm</code></p><p>查看repo源是否安装成功</p><p><code>[root@VM_0_17_centos ~]# sudo yum repolist</code></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/ffmpeg3.png" alt=""></p><p><strong>安装FFmpeg</strong></p><p><code>[root@VM_0_17_centos ~]# sudo yum install -y ffmpeg</code></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/ffmpeg4.png" alt=""></p><p>查看版本</p><p><code>[root@VM_0_17_centos ~]# ffmpeg -version</code></p><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/ffmpeg5.png" alt=""></p><h3 id="2、应用"><a href="#2、应用" class="headerlink" title="2、应用"></a>2、应用</h3><ol><li><p>把avi格式转换为mp4格式，输入压缩的尺寸，使用h264进行压缩。<br><code>ffmpeg –i linuxidc.mp4 –vcodec h264 –s 1280*720 -acodec copy –f mp4 linuxidc.com.mp4</code></p></li><li><p>将一张jpg图片转为MP4格式视频<br><code>ffmpeg -r 25 -loop 1 -i linuxidc.jpg -pix_fmt yuv420p -vcodec libx264 -b:v 600k -r:v 25 -preset medium -crf 30 -s 1024x768 -vframes 250 -r 25 -t 10 ~/linuxidc.com.mp4</code></p></li></ol><h3 id="3、FFmpeg常用基本命令"><a href="#3、FFmpeg常用基本命令" class="headerlink" title="3、FFmpeg常用基本命令"></a>3、FFmpeg常用基本命令</h3><ol><li><p>分离视频音频流<br><code>ffmpeg -i linuxidc_file -vcodec copy -an linuxdc_file_video　　#分离视频流</code><br><code>ffmpeg -i linuxidc_file -acodec copy -vn linuxdc_file_audio　　#分离音频流</code></p></li><li><p>视频解复用<br><code>ffmpeg –i linuxidc.mp4 –vcodec copy –an –f m4v linuxidc.264</code><br><code>ffmpeg –i linuxidc.avi –vcodec copy –an –f m4v linuxidc.264</code></p></li><li><p>视频转码<br><code>ffmpeg –i linuxidc.mp4 –vcodec h264 –s 352*278 –an –f m4v linuxidc.264     #转码为码流原始文件</code><br><code>ffmpeg –i linuxidc.mp4 –vcodec h264 –bf 0 –g 25 –s 352*278 –an –f m4v linuxidc.264  #转码为码流原始文件</code><br><code>ffmpeg –i linuxidc.avi -vcodec mpeg4 –vtag xvid –qsame linuxidc_xvid.avi    #转码为封装文件</code></p><p> <strong>-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制</strong></p></li><li><p>视频封装<br><code>ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy linuxdc_file</code></p></li><li><p>视频剪切<br><code>ffmpeg –i linuxidc.avi –r 1 –f image2 image-%3d.jpeg   #提取图片</code><br><code>ffmpeg -ss 0:1:30 -t 0:0:20 -i linuxidc.avi -vcodec copy -acodec copy linuxdc.avi #剪切视频</code></p></li></ol><h3 id="4、封装方法使用"><a href="#4、封装方法使用" class="headerlink" title="4、封装方法使用"></a>4、封装方法使用</h3><p>获取视频封面图方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 截取视频图片、获得视频文件的总长度时间和创建时间</span><br><span class="line">  * $path 视频路径</span><br><span class="line">  * $width 截图大小  宽</span><br><span class="line">  * $height 截图大小  长</span><br><span class="line">  * $second 第几秒截图，生成几秒gif图</span><br><span class="line">  * $type 转换类型 gif png</span><br><span class="line">  * 生成图片存放路径不会自动生成目录</span><br><span class="line">  */</span><br><span class="line">public status function cutPicture($path, $width = &#x27;&#x27;, $height = &#x27;&#x27;, $second = 1, $type = &quot;gif&quot;)&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        if($path)&#123;</span><br><span class="line">            $url = str_replace(request()-&gt;domain().&#x27;/&#x27;,env(&#x27;root_path&#x27;).&#x27;public/&#x27;,$path);//获取视频绝对路径</span><br><span class="line"></span><br><span class="line">            // $name = uniqid().time().&#x27;.png&#x27;;//图片名字</span><br><span class="line">            $name = uniqid().time().&#x27;.&#x27;.$type;//图片名字</span><br><span class="line"></span><br><span class="line">            $to = &quot;public/uploads/video_cover/&quot;;//生成图片存放路径(文件夹需要手动创建)</span><br><span class="line"></span><br><span class="line">            switch ($type) &#123;</span><br><span class="line">                case &#x27;png&#x27;:</span><br><span class="line">                    if($width &amp;&amp; $height)&#123;</span><br><span class="line">                        //ffmpeg命令,具体啥意思可以百度</span><br><span class="line">                        $str = &quot;ffmpeg -i &quot;.$url.&quot; -y -f mjpeg -ss &quot;.$second.&quot; -t 1 -s &quot;.$width.&quot;*&quot;.$height .env(&#x27;root_path&#x27;) . $to . $name;//视频封面</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        $str = &quot;ffmpeg -i &quot;.$url.&quot; -y -f mjpeg -ss &quot;.$second.&quot; -t 1 &quot;.env(&#x27;root_path&#x27;) . $to . $name;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;gif&#x27;:</span><br><span class="line">                    if($width &amp;&amp; $height)&#123;</span><br><span class="line">                        $str = &quot;ffmpeg -i &quot;.$url.&quot; -t &quot;.$second.&quot; -s &quot;.$width.&quot;*&quot;.$height .&quot; -pix_fmt rgb24 &quot;.env(&#x27;root_path&#x27;) . $to . $name;//gif</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        $str = &quot;ffmpeg -i &quot;.$url.&quot; -t &quot;.$second.&quot; &quot;.env(&#x27;root_path&#x27;) . $to . $name;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            exec($str, $output, $status);//执行上述语句</span><br><span class="line"></span><br><span class="line">            $pic_path = request()-&gt;domain().&quot;/uploads/video_cover/&quot;.$name;//获取生成图路径</span><br><span class="line"></span><br><span class="line">            $vtime = exec(&quot;ffmpeg -i &quot;.$url.&quot; 2&gt;&amp;1 | grep &#x27;Duration&#x27; | cut -d &#x27; &#x27; -f 4 | sed s/,//&quot;);//总长度</span><br><span class="line"></span><br><span class="line">            // $ctime = date(&quot;Y-m-d H:i:s&quot;,filectime($url));//创建时间</span><br><span class="line"></span><br><span class="line">            return [&#x27;code&#x27;=&gt;200, &#x27;msg&#x27;=&gt;&#x27;pic_path:视频封面图或gif图&#x27;, &#x27;pic_path&#x27;=&gt;$pic_path, &#x27;video_time&#x27;=&gt;$vtime];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return [&#x27;code&#x27;=&gt;500, &#x27;msg&#x27;=&gt;&#x27;未获取视频&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;catch (\Exception $e)&#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500, &#x27;msg&#x27;=&gt;$e-&gt;getMessage()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、参考地址"><a href="#5、参考地址" class="headerlink" title="5、参考地址"></a>5、参考地址</h3><p><a href="https://www.linuxidc.com/Linux/2018-10/154934.htm">https://www.linuxidc.com/Linux/2018-10/154934.htm</a></p><p><a href="https://blog.csdn.net/A9925/article/details/80334700">https://blog.csdn.net/A9925/article/details/80334700</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Linux </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5 PDF转图片</title>
      <link href="/posts/d021476f.html"/>
      <url>/posts/d021476f.html</url>
      
        <content type="html"><![CDATA[<h3 id="PHP-PDF转图片"><a href="#PHP-PDF转图片" class="headerlink" title="PHP PDF转图片"></a>PHP PDF转图片</h3><p>引入类库<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require spatie/pdf-to-image</span><br></pre></td></tr></table></figure><br><span id="more"></span></p><p>转换成图片<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$pdf = new Spatie\PdfToImage\Pdf($pathToPdf);</span><br><span class="line">$pdf-&gt;saveImage($pathToWhereImageShouldBeStored);</span><br></pre></td></tr></table></figure></p><p>获取页数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pdf-&gt;getNumberOfPages();</span><br></pre></td></tr></table></figure></p><p>根据页数保存图片<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pdf-&gt;setPage(2)-&gt;saveImage($pathToWhereImageShouldBeStored);</span><br></pre></td></tr></table></figure></p><p>可以定义输出格式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pdf-&gt;setOutputFormat(&#x27;png&#x27;)-&gt;saveImage($pathToWhereImageShouldBeStored);</span><br></pre></td></tr></table></figure></p><p>可以压缩图片质量(100是最高)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$pdf-&gt;setCompressionQuality(100);</span><br></pre></td></tr></table></figure></p><blockquote><p>示例图<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$image = [];</span><br><span class="line">$pdf = new Spatie\PdfToImage\Pdf($pathToPdf);</span><br><span class="line">$num = $pdf-&gt;getNumberOfPages();</span><br><span class="line">for ($i=1; $i&lt;=$num; $i++) &#123;</span><br><span class="line">    $image = $pdf-&gt;setPage(i)</span><br><span class="line">-&gt;setOutputFormat(&#x27;png&#x27;)</span><br><span class="line">-&gt;setCompressionQuality(100)</span><br><span class="line">        -&gt;saveImage(&#x27;保存的图片路径命名&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">return $image;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5 endroid/qrcode 二维码生成</title>
      <link href="/posts/277acc0f.html"/>
      <url>/posts/277acc0f.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用-composer-安装-endroid-qrcode："><a href="#使用-composer-安装-endroid-qrcode：" class="headerlink" title="使用 composer 安装 endroid/qrcode："></a>使用 composer 安装 endroid/qrcode：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">由于endroid/qrcode不在维护，可安装以下</span><br><span class="line">composer require endroid/qr-code</span><br><span class="line"></span><br><span class="line">安装个版本，进入网站查找</span><br><span class="line">https://packagist.org/packages/endroid/qrcode</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * ============================================================================</span><br><span class="line"> * ----------------------------------------------------------------------------</span><br><span class="line"> * 二维码生成</span><br><span class="line"> * ----------------------------------------------------------------------------</span><br><span class="line"> * ============================================================================</span><br><span class="line"> */</span><br><span class="line">namespace app\common\utils;</span><br><span class="line"></span><br><span class="line">use Endroid\QrCode\ErrorCorrectionLevel;</span><br><span class="line">use Endroid\QrCode\QrCode as QrCodePackage;</span><br><span class="line"></span><br><span class="line">class QrCode</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * 获取二维码</span><br><span class="line">     * php7.1 最新版本composer安装：composer require endroid/qr-code:3.5.9</span><br><span class="line">     * @setSize - 二维码大小 px</span><br><span class="line">     * @setWriterByName - 写入文件的后缀名</span><br><span class="line">     * @setMargin - 二维码内容相对于整张图片的外边距</span><br><span class="line">     * @setEncoding - 编码类型</span><br><span class="line">     * @setErrorCorrectionLevel - 容错等级，分为L、M、Q、H四级</span><br><span class="line">     * @setForegroundColor - 前景色</span><br><span class="line">     * @setBackgroundColor - 背景色</span><br><span class="line">     * @setLabel - 二维码标签</span><br><span class="line">     * @setLogoPath - 二维码logo路径</span><br><span class="line">     * @setLogoWidth - 二维码logo大小 px</span><br><span class="line">     *</span><br><span class="line">     * @pathUrl 保存的路径</span><br><span class="line">     * @logo 二维码中间logo图，必须在本地服务器内</span><br><span class="line">     * @setLogo  是否开启二维码中放logo [false否 true是]</span><br><span class="line">     * @link 跳转链接</span><br><span class="line">     * @setSize  二维码大小 px</span><br><span class="line">     * @logoSize logo大小 px</span><br><span class="line">     * @delFile 是否删除文件</span><br><span class="line">     */</span><br><span class="line">    public static function getQrCode($pathUrl = &quot;&quot;,$link = &#x27;&#x27;,$setSize = 300,$setLogo = false,$logo = &quot;&quot;,$logoSize = 90,$delFile = true)&#123;</span><br><span class="line">        //判断图片是否在本地服务器上，不存在则不可设置</span><br><span class="line">        if(!file_exists($logo) &amp;&amp; $setLogo)&#123;</span><br><span class="line">            return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;设置二维码中的logo图路径不正确&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //基础配置</span><br><span class="line">        $config = [</span><br><span class="line">            &#x27;set_log&#x27; =&gt; $setLogo,</span><br><span class="line">            &#x27;link&#x27; =&gt; $link,//跳转链接</span><br><span class="line">            &#x27;set_size&#x27; =&gt; $setSize,//二维码大小 px</span><br><span class="line">            &#x27;path&#x27; =&gt; $pathUrl ? : root_path() .&#x27;uploads/qrcode/&#x27;,//保存路径（绝对路径），root_path()属于tp6 ，tp5请用env(&#x27;root_path&#x27;)</span><br><span class="line">            &#x27;logo_width&#x27; =&gt; $logoSize,</span><br><span class="line">            &#x27;logo_path&#x27; =&gt; $logo</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $qrCode = new QrCodePackage($config[&#x27;link&#x27;]);</span><br><span class="line">        // 容错率</span><br><span class="line">        $qrCode-&gt;setErrorCorrectionLevel(new ErrorCorrectionLevel(ErrorCorrectionLevel::HIGH));</span><br><span class="line">        //转绝对路径</span><br><span class="line">        $logo_path = str_replace(request()-&gt;domain().&#x27;/&#x27;,root_path(),$config[&#x27;logo_path&#x27;]);</span><br><span class="line">        if($config[&#x27;set_log&#x27;])&#123;</span><br><span class="line">            $qrCode-&gt;setLogoPath($logo_path);</span><br><span class="line">            $qrCode-&gt;setLogoWidth($config[&#x27;logo_width&#x27;]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //随机文件名</span><br><span class="line">        $name = sha1(uniqid());</span><br><span class="line">        if (!file_exists($config[&#x27;path&#x27;])) mkdir($config[&#x27;path&#x27;], 0777, true);</span><br><span class="line">        $path = $config[&#x27;path&#x27;] .$name . &#x27;.png&#x27;;</span><br><span class="line">//        header(&#x27;Content-Type: image/png&#x27;);</span><br><span class="line">        header(&#x27;Content-Type: &#x27;.$qrCode-&gt;getContentType());</span><br><span class="line">        if (is_file($path)) &#123;</span><br><span class="line">            // echo file_get_contents($path);//显示二维码</span><br><span class="line">            return [&#x27;code&#x27;=&gt;200,&#x27;url&#x27;=&gt;str_replace(root_path(),request()-&gt;domain().&#x27;/&#x27;,$path)];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $qrCode-&gt;setSize($config[&#x27;set_size&#x27;]);</span><br><span class="line">            //生成文件</span><br><span class="line">            $qrCode-&gt;writeFile($path);</span><br><span class="line">            return [&#x27;code&#x27;=&gt;200,&#x27;url&#x27;=&gt;str_replace(root_path(),request()-&gt;domain().&#x27;/&#x27;,$path)];</span><br><span class="line">            // echo $qrCode-&gt;writeString();//显示二维码</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //@去操作这张图片</span><br><span class="line">        //@删除文件</span><br><span class="line">        if($delFile)&#123;</span><br><span class="line">            unlink($path);</span><br><span class="line">        &#125;</span><br><span class="line">        die;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维码相关参数"><a href="#二维码相关参数" class="headerlink" title="二维码相关参数"></a>二维码相关参数</h2><div class="table-container"><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">setSize</td><td style="text-align:center">二维码大小（单位：px）</td><td></td></tr><tr><td style="text-align:center">setWriterByName</td><td style="text-align:center">写入文件的后缀名</td><td></td></tr><tr><td style="text-align:center">setMargin</td><td style="text-align:center">二维码内容相对于整张图片的外边距</td><td></td></tr><tr><td style="text-align:center">setEncoding</td><td style="text-align:center">编码类型</td><td></td></tr><tr><td style="text-align:center">setErrorCorrectionLevel</td><td style="text-align:center">容错等级，分为L、M、Q、H四级</td><td></td></tr><tr><td style="text-align:center">setForegroundColor</td><td style="text-align:center">前景色</td><td></td></tr><tr><td style="text-align:center">setBackgroundColor</td><td style="text-align:center">背景色</td><td></td></tr><tr><td style="text-align:center">setLabel</td><td style="text-align:center">二维码标签</td><td></td></tr><tr><td style="text-align:center">setLogoPath</td><td style="text-align:center">二维码logo路径</td><td></td></tr><tr><td style="text-align:center">setLogoWidth</td><td style="text-align:center">二维码logo大小 单位：px</td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP5 </tag>
            
            <tag> 二维码生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post接收json被转义处理</title>
      <link href="/posts/30d04965.html"/>
      <url>/posts/30d04965.html</url>
      
        <content type="html"><![CDATA[<h3 id="tp5框架开启了html过滤，接收的json数据被转义"><a href="#tp5框架开启了html过滤，接收的json数据被转义" class="headerlink" title="tp5框架开启了html过滤，接收的json数据被转义"></a>tp5框架开启了html过滤，接收的json数据被转义</h3><p>例子<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//接收数据</span><br><span class="line">$message = input(&#x27;message&#x27;);</span><br><span class="line">//转义html标签，得到正确的json数据</span><br><span class="line">$message = htmlspecialchars_decode($message);</span><br><span class="line">//随后，json转数组</span><br><span class="line">$array = json_decode($message, true);</span><br></pre></td></tr></table></figure><br><span id="more"></span><br>前端传值<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;id&quot;:1,&quot;goods_price&quot;:&quot;80&quot;,&quot;shop_id&quot;:1&#125;,&#123;&quot;id&quot;:2,&quot;goods_price&quot;:&quot;99&quot;,&quot;shop_id&quot;:1&#125;]</span><br></pre></td></tr></table></figure></p><p>后端接收数据<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&amp;quot;id&amp;quot;:1,&amp;quot;goods_price&amp;quot;:&amp;quot;80&amp;quot;,&amp;quot;shop_id&amp;quot;:1&#125;,&#123;&amp;quot;id&amp;quot;:2,&amp;quot;goods_price&amp;quot;:&amp;quot;99&amp;quot;,&amp;quot;shop_id&amp;quot;:1&#125;]</span><br></pre></td></tr></table></figure></p><p>处理方法<br>可以用函数<code>htmlspecialchars_decode</code>和<code>html_entity_decode</code>进行转义，这样可以得到正确的json数据</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5+ajax实现图片上传且预览</title>
      <link href="/posts/35082f1c.html"/>
      <url>/posts/35082f1c.html</url>
      
        <content type="html"><![CDATA[<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form id=&quot;uploadForm&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">    上传文件：&lt;input type=&quot;file&quot; id=&quot;uploadFile&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;div id=&quot;div&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#uploadFile&quot;).on(&quot;change&quot;,function()&#123;</span><br><span class="line">    var formData = new FormData($( &quot;#uploadForm&quot; )[0]);</span><br><span class="line">    formData.append(&quot;image&quot;, $(this).get(0).files[0]);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: &#x27;&#123;:url(&quot;Test/uploadImg&quot;)&#125;&#x27; ,</span><br><span class="line">        type: &#x27;POST&#x27;,</span><br><span class="line">        data: formData,</span><br><span class="line">        cache: false, //</span><br><span class="line">        contentType: false, // 不要设置Content-Type请求头</span><br><span class="line">        processData: false, // 不要处理发送的数据</span><br><span class="line">        success: function (data) &#123;</span><br><span class="line">        console.log(&quot;路径：&quot;,data)</span><br><span class="line">            $(&quot;#div&quot;).html(&quot;&quot;).html(&#x27;&lt;img src=&quot;&#x27;+data+&#x27;&quot; width=&quot;640&quot; height=&quot;320&quot; /&gt;&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function (e) &#123;</span><br><span class="line">            console.log(e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//例子</span><br><span class="line">public function uploadImg()</span><br><span class="line">&#123;</span><br><span class="line">    $file = request()-&gt;file(&#x27;image&#x27;);</span><br><span class="line">    $path = Env::get(&#x27;root_path&#x27;).&#x27;/public/upload/test&#x27;;</span><br><span class="line">    $info = $file-&gt;move($path);</span><br><span class="line">    if($info)&#123;</span><br><span class="line">        $fileName = $info-&gt;getSaveName();</span><br><span class="line">        $src = &quot;/upload/test/&quot;.$fileName;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        // 上传失败获取错误信息</span><br><span class="line">        $src = $file-&gt;getError();</span><br><span class="line">    &#125;</span><br><span class="line">    return json($src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php封装方法</title>
      <link href="/posts/ad4686af.html"/>
      <url>/posts/ad4686af.html</url>
      
        <content type="html"><![CDATA[<h3 id="PHP封装方法"><a href="#PHP封装方法" class="headerlink" title="PHP封装方法"></a>PHP封装方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将表情进行转义  用于存储的时候</span><br><span class="line"> * @param  [type] $str [description]</span><br><span class="line"> * @return [type]      [description]</span><br><span class="line"> */</span><br><span class="line">function emoji_encode($str)&#123;</span><br><span class="line">    $strEncode = &#x27;&#x27;;</span><br><span class="line">    $length = mb_strlen($str,&#x27;utf-8&#x27;);</span><br><span class="line">    for ($i=0; $i &lt; $length; $i++) &#123;</span><br><span class="line">        $_tmpStr = mb_substr($str,$i,1,&#x27;utf-8&#x27;);</span><br><span class="line">        if(strlen($_tmpStr) &gt;= 4)&#123;</span><br><span class="line">            $strEncode .= &#x27;[[EMOJI:&#x27;.rawurlencode($_tmpStr).&#x27;]]&#x27;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $strEncode .= $_tmpStr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $strEncode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 将表情进行反转义  用于读取的时候</span><br><span class="line"> * @param  [type] $str [description]</span><br><span class="line"> * @return [type]      [description]</span><br><span class="line"> */</span><br><span class="line">function emoji_decode($str)&#123;</span><br><span class="line">    $strDecode = preg_replace_callback(&#x27;|\[\[EMOJI:(.*?)\]\]|&#x27;, function($matches)&#123;</span><br><span class="line">        return rawurldecode($matches[1]);</span><br><span class="line">    &#125;, $str);</span><br><span class="line">    return $strDecode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据时间戳比较，获取状态</span><br><span class="line"> * @param  [type] $start_time 开始时间戳</span><br><span class="line"> * @param  [type] $end_time   结束时间戳</span><br><span class="line"> * @param  [type] $text   格式类型</span><br><span class="line"> * @return [type]             [description]</span><br><span class="line"> */</span><br><span class="line">function getTimeStatus($start_time, $end_time, $type = &#x27;text&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">if($type == &#x27;text&#x27;) &#123;</span><br><span class="line">if(time() &lt; $start_time &amp;&amp; time() &lt; $end_time) &#123;</span><br><span class="line">$str = &quot;&lt;span style=&#x27;color: #0a6aa1;&#x27;&gt;未开始&lt;/em&gt;&quot;;</span><br><span class="line">&#125;else if(time() &gt;= $start_time &amp;&amp; time() &lt; $end_time) &#123;</span><br><span class="line">$str = &quot;&lt;span style=&#x27;color: #19be6b;&#x27;&gt;进行中&lt;/em&gt;&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$str = &quot;&lt;span style=&#x27;color: #ff0000;&#x27;&gt;已结束&lt;/em&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if(time() &lt; $start_time &amp;&amp; time() &lt; $end_time) &#123;</span><br><span class="line">$str = 0;  //未开始</span><br><span class="line">&#125;else if(time() &gt;= $start_time &amp;&amp; time() &lt; $end_time) &#123;</span><br><span class="line">$str = 1;  //进行中</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$str = 2; //已结束</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 返回时间段的日期、时间戳</span><br><span class="line"> * @param string $type  时间类型</span><br><span class="line"> * @param array $map  [&#x27;pm&#x27;=&gt;&#x27;-&#x27;, &#x27;n&#x27;=&gt;1] pm:表示正或负， n:表示天数</span><br><span class="line"> * @param boolean $slot true返回时间段，否当天时间</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br><span class="line">function getTime($type = &quot;&quot;, $map = [&#x27;pm&#x27;=&gt;&#x27;-&#x27;, &#x27;n&#x27;=&gt;1], $slot = false)</span><br><span class="line">&#123;   </span><br><span class="line">    switch ($type) &#123;</span><br><span class="line">        case &#x27;day&#x27;:  //昨天、明天、近七天、近一个月、近半年、近一年...</span><br><span class="line">            $n = $map[&#x27;n&#x27;] ? : 1;</span><br><span class="line">            if($map[&#x27;pm&#x27;] == &#x27;+&#x27;) &#123;</span><br><span class="line">                $date = date(&quot;Y-m-d&quot;, strtotime(&quot;+&#123;$n&#125; day&quot;));</span><br><span class="line">                if($slot) &#123;</span><br><span class="line">                    $start_time = time();</span><br><span class="line">                    $end_time = strtotime(&quot;+&#123;$n&#125; day&quot;);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    $start_time = strtotime($date);</span><br><span class="line">                    $end_time = $start_time + + 60 * 60 * 24 - 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                $date = date(&quot;Y-m-d&quot;, strtotime(&quot;-&#123;$n&#125; day&quot;));</span><br><span class="line">                $start_time = strtotime($date);</span><br><span class="line">                $end_time = $slot ? time() : ($start_time + 60 * 60 * 24 - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            $arr = [</span><br><span class="line">                &#x27;start_time&#x27; =&gt; $start_time,</span><br><span class="line">                &#x27;start_date&#x27; =&gt; date(&quot;Y-m-d H:i:s&quot;, $start_time),</span><br><span class="line">                &#x27;end_time&#x27; =&gt; $end_time,</span><br><span class="line">                &#x27;end_date&#x27; =&gt; date(&quot;Y-m-d H:i:s&quot;, $end_time),</span><br><span class="line">            ];</span><br><span class="line">            break;</span><br><span class="line">        default: //今日</span><br><span class="line">            $start_time = strtotime(date(&quot;Y-m-d&quot;, time()));</span><br><span class="line">            $end_time = $start_time + 60 * 60 * 24 - 1;</span><br><span class="line">            $arr = [</span><br><span class="line">                &#x27;start_time&#x27; =&gt; $start_time,</span><br><span class="line">                &#x27;start_date&#x27; =&gt; date(&quot;Y-m-d H:i:s&quot;, $start_time),</span><br><span class="line">                &#x27;end_time&#x27; =&gt; $end_time,</span><br><span class="line">                &#x27;end_date&#x27; =&gt; date(&quot;Y-m-d H:i:s&quot;, $end_time),</span><br><span class="line">            ];</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    return $arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据时间戳转年月日</span><br><span class="line"> * @param $time 时间戳</span><br><span class="line"> * @return string</span><br><span class="line"> */</span><br><span class="line">function time_tran($time)</span><br><span class="line">&#123;</span><br><span class="line">    $t = time() - $time;</span><br><span class="line">    $f = [</span><br><span class="line">    &#x27;31536000&#x27; =&gt; &#x27;年&#x27;,</span><br><span class="line">        &#x27;2592000&#x27; =&gt; &#x27;个月&#x27;,</span><br><span class="line">        &#x27;604800&#x27; =&gt; &#x27;星期&#x27;,</span><br><span class="line">        &#x27;86400&#x27; =&gt; &#x27;天&#x27;,</span><br><span class="line">        &#x27;3600&#x27; =&gt; &#x27;小时&#x27;,</span><br><span class="line">        &#x27;60&#x27; =&gt; &#x27;分钟&#x27;,</span><br><span class="line">        &#x27;1&#x27; =&gt; &#x27;秒&#x27;</span><br><span class="line">    ];</span><br><span class="line">    foreach ($f as $k =&gt; $v) &#123;</span><br><span class="line">        if (0 != $c = floor($t / (int)$k)) &#123;</span><br><span class="line">            return $c . $v . &#x27;前&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 时间 H:i:s 转 s</span><br><span class="line"> * @User yaokai</span><br><span class="line"> * @param $his</span><br><span class="line"> * @return float|int</span><br><span class="line"> */</span><br><span class="line">function HisToS($his)</span><br><span class="line">&#123;</span><br><span class="line">    $str = explode(&#x27;:&#x27;, $his);</span><br><span class="line">    $len = count($str);</span><br><span class="line">    if ($len == 3) &#123;</span><br><span class="line">        $time = $str[0] * 3600 + $str[1] * 60 + $str[2];</span><br><span class="line">    &#125; elseif ($len == 2) &#123;</span><br><span class="line">        $time = $str[0] * 60 + $str[1];</span><br><span class="line">    &#125; elseif ($len == 1) &#123;</span><br><span class="line">        $time = $str[0];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $time = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return $time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  把秒数转换为时分秒(00:00:00)或分秒(00:00)的格式</span><br><span class="line"> *  @param Int $times 时间，单位(秒)</span><br><span class="line"> *  @param Int $type 1-时分秒 2-分秒</span><br><span class="line"> *  @return String</span><br><span class="line"> */</span><br><span class="line">function secondToTime($times,$type = 1)&#123;</span><br><span class="line">    if($type == 1)&#123;</span><br><span class="line">        $result = &#x27;00:00:00&#x27;;</span><br><span class="line">        if ($times&gt;0) &#123;</span><br><span class="line">            $hour = floor($times/3600);</span><br><span class="line">            $minute = floor(($times-3600 * $hour)/60);</span><br><span class="line">            $second = floor((($times-3600 * $hour) - 60 * $minute) % 60);</span><br><span class="line">            $hour = $hour &lt; 10 ? &#x27;0&#x27;.$hour : $hour;</span><br><span class="line">            $minute = $minute &lt; 10 ? &#x27;0&#x27;.$minute : $minute;</span><br><span class="line">            $second = $second &lt; 10 ? &#x27;0&#x27;.$second : $second;</span><br><span class="line">            $result = $hour.&#x27;:&#x27;.$minute.&#x27;:&#x27;.$second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $result = &#x27;00:00&#x27;;</span><br><span class="line">        if ($times&gt;0) &#123;</span><br><span class="line">            $hour = floor($times/3600);</span><br><span class="line">            $minute = floor(($times-3600 * $hour)/60);</span><br><span class="line">            $second = floor((($times-3600 * $hour) - 60 * $minute) % 60);</span><br><span class="line">            $hour = $hour &lt; 10 ? &#x27;0&#x27;.$hour : $hour;</span><br><span class="line">            $minute = $hour*60 + $minute;</span><br><span class="line">            $minute = $minute &lt; 10 ? &#x27;0&#x27;.$minute : $minute;</span><br><span class="line">            $second = $second &lt; 10 ? &#x27;0&#x27;.$second : $second;</span><br><span class="line">            $result = $minute.&#x27;:&#x27;.$second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取指定年月日的开始时间戳和结束时间戳(本地时间戳非GMT时间戳)</span><br><span class="line"> * [1] 指定年：获取指定年份第一天第一秒的时间戳和下一年第一天第一秒的时间戳</span><br><span class="line"> * [2] 指定年月：获取指定年月第一天第一秒的时间戳和下一月第一天第一秒时间戳</span><br><span class="line"> * [3] 指定年月日：获取指定年月日第一天第一秒的时间戳</span><br><span class="line"> * @param  integer $year     [年份]</span><br><span class="line"> * @param  integer $month    [月份]</span><br><span class="line"> * @param  integer $day      [日期]</span><br><span class="line"> * @return array(&#x27;start&#x27; =&gt; &#x27;&#x27;, &#x27;end&#x27; =&gt; &#x27;&#x27;)</span><br><span class="line"> */</span><br><span class="line">function getStartAndEndUnixTimestamp($year = 0, $month = 0, $day = 0)</span><br><span class="line">&#123;</span><br><span class="line">    if(empty($year))</span><br><span class="line">    &#123;</span><br><span class="line">        $year = date(&quot;Y&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $start_year = $year;</span><br><span class="line">    $start_year_formated = str_pad(intval($start_year), 4, &quot;0&quot;, STR_PAD_RIGHT);</span><br><span class="line">    $end_year = $start_year + 1;</span><br><span class="line">    $end_year_formated = str_pad(intval($end_year), 4, &quot;0&quot;, STR_PAD_RIGHT);</span><br><span class="line"></span><br><span class="line">    if(empty($month))</span><br><span class="line">    &#123;</span><br><span class="line">        //只设置了年份</span><br><span class="line">        $start_month_formated = &#x27;01&#x27;;</span><br><span class="line">        $end_month_formated = &#x27;01&#x27;;</span><br><span class="line">        $start_day_formated = &#x27;01&#x27;;</span><br><span class="line">        $end_day_formated = &#x27;01&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        $month &gt; 12 || $month &lt; 1 ? $month = 1 : $month = $month;</span><br><span class="line">        $start_month = $month;</span><br><span class="line">        $start_month_formated = sprintf(&quot;%02d&quot;, intval($start_month));</span><br><span class="line"></span><br><span class="line">        if(empty($day))</span><br><span class="line">        &#123;</span><br><span class="line">            //只设置了年份和月份</span><br><span class="line">            $end_month = $start_month + 1;</span><br><span class="line"></span><br><span class="line">            if($end_month &gt; 12)</span><br><span class="line">            &#123;</span><br><span class="line">                $end_month = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                $end_year_formated = $start_year_formated;</span><br><span class="line">            &#125;</span><br><span class="line">            $end_month_formated = sprintf(&quot;%02d&quot;, intval($end_month));</span><br><span class="line">            $start_day_formated = &#x27;01&#x27;;</span><br><span class="line">            $end_day_formated = &#x27;01&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            //设置了年份月份和日期</span><br><span class="line">            $startTimestamp = strtotime($start_year_formated.&#x27;-&#x27;.$start_month_formated.&#x27;-&#x27;.sprintf(&quot;%02d&quot;, intval($day)).&quot; 00:00:00&quot;);</span><br><span class="line">            $endTimestamp = $startTimestamp + 24 * 3600 - 1;</span><br><span class="line">            return array(&#x27;start&#x27; =&gt; $startTimestamp, &#x27;end&#x27; =&gt; $endTimestamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $startTimestamp = strtotime($start_year_formated.&#x27;-&#x27;.$start_month_formated.&#x27;-&#x27;.$start_day_formated.&quot; 00:00:00&quot;);</span><br><span class="line">    $endTimestamp = strtotime($end_year_formated.&#x27;-&#x27;.$end_month_formated.&#x27;-&#x27;.$end_day_formated.&quot; 00:00:00&quot;) - 1;</span><br><span class="line">    return array(&#x27;start&#x27; =&gt; $startTimestamp, &#x27;end&#x27; =&gt; $endTimestamp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 匿名处理</span><br><span class="line"> * @param string $data   数据</span><br><span class="line"> * @param string $type   类型</span><br><span class="line"> * @param int    $start  开始显示位数，自定义填</span><br><span class="line"> * @param int    $end    结束显示位数，自定义填</span><br><span class="line"> * @param string $symbol 符号</span><br><span class="line"> * @return [type]       [description]</span><br><span class="line"> */</span><br><span class="line">function anonymity($data, $type = &quot;&quot;, $start = 1, $end = 0, $symbol = &#x27;*&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    if(!$data) return &#x27;&#x27;;</span><br><span class="line">    switch ($type) &#123;</span><br><span class="line">        case &#x27;mobile&#x27;:</span><br><span class="line">            return substr_replace($data, &#x27;****&#x27;, 3, 4);</span><br><span class="line">            break;</span><br><span class="line">        case &#x27;name&#x27;://姓名加密</span><br><span class="line">            if(preg_match(&quot;/[\x&#123;4e00&#125;-\x&#123;9fa5&#125;]+/u&quot;, $data)) &#123;//判断是否包含中文字符</span><br><span class="line">                //按照中文字符计算长度</span><br><span class="line">                $len = mb_strlen($data, &#x27;UTF-8&#x27;);</span><br><span class="line">                if($len &gt;= 3)&#123;//三个字符或三个字符以上掐头取尾，中间用*代替</span><br><span class="line">                    return mb_substr($data, 0, 1, &#x27;UTF-8&#x27;) . str_repeat($symbol, $len-2) . mb_substr($data, -1, 1, &#x27;UTF-8&#x27;);</span><br><span class="line">                &#125; elseif($len === 2) &#123;//两个字符</span><br><span class="line">                    return mb_substr($data, 0, 1, &#x27;UTF-8&#x27;) . $symbol;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //按照英文字串计算长度</span><br><span class="line">                $len = strlen($data);</span><br><span class="line">                if($len &gt;= 3) &#123;//三个字符或三个字符以上掐头取尾，中间用*代替</span><br><span class="line">                    return substr($data, 0, 1)  . str_repeat($symbol, $len-2) . substr($data, -1);</span><br><span class="line">                &#125; elseif($len === 2) &#123;//两个字符</span><br><span class="line">                    return substr($data, 0, 1) . $symbol;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        default://自定义加密</span><br><span class="line">            $len = mb_strlen($data,&#x27;UTF-8&#x27;) - $start - $end;</span><br><span class="line">            if($len &gt; 0)&#123;</span><br><span class="line">                $str = str_repeat($symbol,$len);//替换字符数量</span><br><span class="line">                if(preg_match(&quot;/[\x&#123;4e00&#125;-\x&#123;9fa5&#125;]+/u&quot;, $data)) &#123;//含有中文</span><br><span class="line">                    return mb_substr($data, 0, $start, &#x27;UTF-8&#x27;) . $str . mb_substr($data, $start + $len , $end, &#x27;UTF-8&#x27;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return substr_replace($data, $str, $start, $len);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; elseif($len == 0)&#123;</span><br><span class="line">                return mb_substr($data, 0, 1, &#x27;UTF-8&#x27;) . str_repeat($symbol, mb_strlen($data,&#x27;UTF-8&#x27;) - 1) . mb_substr($data, -1, 1, &#x27;UTF-8&#x27;);</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                return $data . $symbol;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 生成随机数</span><br><span class="line">* $type: 1:纯数字  2： 纯小写字母 ，否则结合</span><br><span class="line">* $length: 指定生成数量</span><br><span class="line">*/</span><br><span class="line">function rand_code($length, $type = &#x27;&#x27;)&#123;</span><br><span class="line">    switch ($type) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            $chars = [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;];</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            $chars = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;,   </span><br><span class="line">                        &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;,&#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;,   </span><br><span class="line">                        &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;,&#x27;z&#x27;];</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            $chars = [&#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;,   </span><br><span class="line">                        &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;,&#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;,   </span><br><span class="line">                        &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;,&#x27;Z&#x27;];</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    $keys = array_rand($chars, $length);   </span><br><span class="line">    $str = &#x27;&#x27;;  </span><br><span class="line">    for($i = 0; $i &lt; $length; $i++)&#123;  </span><br><span class="line">        $str .= $chars[$keys[$i]];  </span><br><span class="line">    &#125;  </span><br><span class="line">    return $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 检查密码复杂度</span><br><span class="line"> * @param $pwd 密码</span><br><span class="line"> * @param int $pwdLen 密码长度，默认6位</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">function checkPassword($pwd, $pwdLen = 6) &#123;</span><br><span class="line">    if ($pwd == null) &#123;</span><br><span class="line">        return [&#x27;code&#x27; =&gt; 500, &#x27;msg&#x27; =&gt; &#x27;密码不能为空&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    $pwd = trim($pwd);</span><br><span class="line">    if (preg_match(&#x27;/[\x&#123;4e00&#125;-\x&#123;9fa5&#125;]/u&#x27;, $pwd) &gt; 0) &#123;</span><br><span class="line">        return [&#x27;code&#x27; =&gt; 500, &#x27;msg&#x27; =&gt; &#x27;密码不能包含中文&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    if (strlen($pwd) &lt; $pwdLen) &#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;密码必须大于&#x27;.$pwdLen.&#x27;个字符&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match_all(&#x27;/[0-9]/&#x27;, $pwd, $o) &lt; 1) &#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;密码必须包含至少一个数字&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match_all(&#x27;/[a-z]/&#x27;, $pwd, $o) &lt; 1) &#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;密码必须包含至少一个小写字母&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match_all(&#x27;/[A-Z]/&#x27;, $pwd, $o) &lt; 1) &#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;密码必须包含至少一个大写字母&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    if (preg_match_all(&#x27;/[!@#$%^&amp;*]/&#x27;, $pwd, $o) &lt; 1) &#123;</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;密码必须包含至少一个特殊符号 !@#$%^&amp;*&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [&#x27;code&#x27; =&gt; 200, &#x27;msg&#x27; =&gt; &#x27;密码复杂度通过验证&#x27;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 二维数组根据某字段排序</span><br><span class="line"> * @param  array   $data  二维数组</span><br><span class="line"> * @param  string  $field 字段</span><br><span class="line"> * @param  integer $type  排序  1:SORT_DESC 降序, 0:SORT_ASC 升序</span><br><span class="line"> * @return [type]         [description]</span><br><span class="line"> */</span><br><span class="line">function arrSort($data = [], $field = &quot;id&quot;, $type = 0)</span><br><span class="line">&#123;</span><br><span class="line">if(empty($data)) return $data;</span><br><span class="line">$sort = [</span><br><span class="line">&#x27;direction&#x27; =&gt; $type == 1 ? &#x27;SORT_DESC&#x27; : &#x27;SORT_ASC&#x27;,</span><br><span class="line">    &#x27;field&#x27;     =&gt; $field,  //排序字段</span><br><span class="line">];</span><br><span class="line">$arr = [];</span><br><span class="line">foreach($data AS $k =&gt; $v)&#123;</span><br><span class="line">    foreach($v AS $key =&gt; $value)&#123;</span><br><span class="line">        $arr[$key][$k] = $value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">array_multisort($arr[$sort[&#x27;field&#x27;]], constant($sort[&#x27;direction&#x27;]), $data);</span><br><span class="line">return $data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 二维数组（二维只有一个字段）转一维数字键数组</span><br><span class="line"> * @param $arr</span><br><span class="line"> * @param $field</span><br><span class="line"> * @return array</span><br><span class="line"> */</span><br><span class="line">function turnArr($data, $field = &#x27;&#x27;)&#123;</span><br><span class="line">if(empty($data)) return $data;</span><br><span class="line">    $arr = [];</span><br><span class="line">    foreach($data as $k =&gt; $v)&#123;</span><br><span class="line">        if(empty($field) || count($v) == 1) &#123;</span><br><span class="line">            $arr[$k] = array_shift($v);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            $arr[$k] = $v[$field];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 富文本编辑器值替换</span><br><span class="line"> * @param  [type] $detail [description]</span><br><span class="line"> * @return [type]         [description]</span><br><span class="line"> */</span><br><span class="line">function xcx_detail($detail)</span><br><span class="line">&#123;</span><br><span class="line">    return str_replace([&#x27;/uploads/ueditor&#x27;,&#x27;&amp;nbsp;&#x27;], [request()-&gt;domain().&#x27;/uploads/ueditor&#x27;,&#x27;&amp;ensp;&#x27;], htmlspecialchars_decode($detail));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 把1000转换为1k，10000转换为1w</span><br><span class="line"> * @param $num</span><br><span class="line"> * @return mixed|string</span><br><span class="line"> */</span><br><span class="line">function convert($num)</span><br><span class="line">&#123;</span><br><span class="line">    if ($num &gt;= 100000)</span><br><span class="line">    &#123;</span><br><span class="line">        $num = round($num / 10000) .&#x27;W+&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if ($num &gt;= 10000)</span><br><span class="line">    &#123;</span><br><span class="line">        $num = round($num / 10000, 1) .&#x27;W+&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if($num &gt;= 1000)</span><br><span class="line">    &#123;</span><br><span class="line">        $num = round($num / 1000, 1) . &#x27;K+&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return $num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Guzzle请求 https://guzzle-cn.readthedocs.io/zh_CN/latest/</span><br><span class="line"> * @param $url 请求地址</span><br><span class="line"> * @param array $data 数据</span><br><span class="line"> * @param string $method 请求方法</span><br><span class="line"> * @param string $options 请求选项 [常用：GET=&gt;query  POST=&gt;form_params  POST=&gt;json ]  //https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html</span><br><span class="line"> * @param array $headers 请求头</span><br><span class="line"> * @return array</span><br><span class="line"> * @throws \GuzzleHttp\Exception\GuzzleException</span><br><span class="line"> */</span><br><span class="line">function guzzle_request($url, $data = [] , $method = &quot;GET&quot;, $options = &#x27;query&#x27; , $headers = [])</span><br><span class="line">&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        $client = new \GuzzleHttp\Client();</span><br><span class="line">        array_unshift($headers,[&#x27;content-type&#x27; =&gt; &#x27;application/json;charset=utf-8&#x27;]);</span><br><span class="line">//        $headers = [&quot;content-type&quot; =&gt; &#x27;application/json;charset=utf-8&#x27;];</span><br><span class="line"></span><br><span class="line">        $parameter = [$options =&gt; $data, &#x27;headers&#x27; =&gt; $headers];</span><br><span class="line"></span><br><span class="line">        $res = $client-&gt;request($method, $url, $parameter);</span><br><span class="line"></span><br><span class="line">        if ($res-&gt;getStatusCode() == 200) &#123;</span><br><span class="line">            $callback = json_decode($res-&gt;getBody()-&gt;getContents(),true);</span><br><span class="line">            return [&#x27;code&#x27;=&gt;200,&#x27;msg&#x27;=&gt;&#x27;OK&#x27;,&#x27;data&#x27;=&gt;$callback];</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;请求错误&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (\GuzzleHttp\Exception\RequestException $e) &#123;</span><br><span class="line">//            dd($e-&gt;getRequest());dd($e-&gt;getResponse());</span><br><span class="line">        return [&#x27;code&#x27;=&gt;500,&#x27;msg&#x27;=&gt;&#x27;出现异常&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TP5使用百度ueditor富文本编辑器</title>
      <link href="/posts/75e87ecb.html"/>
      <url>/posts/75e87ecb.html</url>
      
        <content type="html"><![CDATA[<h3 id="百度富文本在tp5框架中的使用"><a href="#百度富文本在tp5框架中的使用" class="headerlink" title="百度富文本在tp5框架中的使用"></a>百度富文本在tp5框架中的使用</h3><ul><li><p>从数据表获取的数据包含了html标签样式，前端输出并执行html标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;:html_entity_decode($content)&#125;</span><br></pre></td></tr></table></figure></li><li><p>纯文本输出，不保留样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;:strip_tags(htmlspecialchars_decode($Info.case_content))&#125;</span><br></pre></td></tr></table></figure></li><li><p>纯文本输出，保留样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;$Info.content|raw&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ueditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5数据查询方式</title>
      <link href="/posts/1b320898.html"/>
      <url>/posts/1b320898.html</url>
      
        <content type="html"><![CDATA[<h2 id="thinkPHP5中的Db-name-和-dB-table-以及-db-‘’-的区别"><a href="#thinkPHP5中的Db-name-和-dB-table-以及-db-‘’-的区别" class="headerlink" title="thinkPHP5中的Db::name 和 dB::table 以及 db(‘’) 的区别"></a>thinkPHP5中的Db::name 和 dB::table 以及 db(‘’) 的区别</h2><span id="more"></span><h3 id="Db-name"><a href="#Db-name" class="headerlink" title="Db::name()"></a>Db::name()</h3><p>如果数据库中的表统一了表前缀，在application/database.php中的也写明prefix  =&gt; ‘前缀_’   就可以使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::name(&#x27;user&#x27;)-&gt;where([&#x27;id&#x27;=&gt;1])-&gt;select();</span><br><span class="line">//数据库中的表名为 fa_user</span><br></pre></td></tr></table></figure></p><h3 id="Db-table"><a href="#Db-table" class="headerlink" title="Db::table()"></a>Db::table()</h3><p>使用这个必须指定完整的表名<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Db::tale(&#x27;fa_user&#x27;)-&gt;where([&#x27;id&#x27;=&gt;1])-&gt;select();</span><br><span class="line">//数据库中的表名为 fa_user</span><br></pre></td></tr></table></figure></p><h3 id="db-‘’"><a href="#db-‘’" class="headerlink" title="db(‘’)"></a>db(‘’)</h3><p>助手函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db(&#x27;user&#x27;)-&gt;where([&#x27;id&#x27;=&gt;1])-&gt;select();</span><br><span class="line">//数据库中的表名为 fa_user</span><br></pre></td></tr></table></figure></p><p><em>注意：该助手函数占用服务器资源</em><br>db(‘user’)  默认情况下，每次请求都会重新连接数据库，这样会占用服务器资源</p><h4 id="方法1-如果不想每次都重连可以这样"><a href="#方法1-如果不想每次都重连可以这样" class="headerlink" title="方法1.如果不想每次都重连可以这样"></a>方法1.如果不想每次都重连可以这样</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db(&quot;user&quot;,[],false)</span><br></pre></td></tr></table></figure><h4 id="方法2-还可以直接改function，及则需要把"><a href="#方法2-还可以直接改function，及则需要把" class="headerlink" title="方法2.还可以直接改function，及则需要把"></a>方法2.还可以直接改function，及则需要把</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function db($name = &#x27;&#x27;, $config = [], $force = true)</span><br><span class="line">    &#123;</span><br><span class="line">        return Db::connect($config, $force)-&gt;name($name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">改成</span><br><span class="line"></span><br><span class="line">function db($name = &#x27;&#x27;, $config = [], $force = false)</span><br><span class="line">    &#123;</span><br><span class="line">        return Db::connect($config, $force)-&gt;name($name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ThinkPHP中query-和execute-区别"><a href="#ThinkPHP中query-和execute-区别" class="headerlink" title="ThinkPHP中query()和execute()区别"></a>ThinkPHP中query()和execute()区别</h3><p>query()执行的是查询(select)的SQL语句。<br>execute()执行的是插入(insert)和修改(update)的SQL语句。execute()方法将返回影响的记录数。<br>如果在TP中使用query()来执行插入语句的话也会执行，而且也能插入成功，但是会报错。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP5 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式的知识总结</title>
      <link href="/posts/669a89cf.html"/>
      <url>/posts/669a89cf.html</url>
      
        <content type="html"><![CDATA[<style>table th:first-of-type {    width: 100px;}</style><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-什么是正则表达式"><a href="#1-什么是正则表达式" class="headerlink" title="1. 什么是正则表达式"></a>1. 什么是正则表达式</h3><p>正则表达式(Regular Expression)就是用某种模式去匹配一类字符串的一种公式。</p><p>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。<br><span id="more"></span></p><p>正则表达式是繁琐的，但它是强大的，学会之后的应用会让你除了提高效率外，会给你带来绝对的成就感。只要认真阅读本教程，加上应用的时候进行一定的参考，掌握正则表达式不是问题。</p><p>许多程序设计语言都支持利用正则表达式进行字符串操作。</p><h3 id="2-正则表达式的作用"><a href="#2-正则表达式的作用" class="headerlink" title="2. 正则表达式的作用"></a>2. 正则表达式的作用</h3><p>分割，查找，匹配，替换字符串</p><h3 id="3-PHP中的正则表达式"><a href="#3-PHP中的正则表达式" class="headerlink" title="3. PHP中的正则表达式"></a>3. PHP中的正则表达式</h3><p>在PHP中有两套正则表达式函数库，两者功能相似，只是执行效率略有差异：</p><p>一套是由 PCRE（Perl Compatible Regular Expression） 库提供的。使用“preg<em>”为前缀命名的函数；<br>一套由 POSIX（Portable Operating System Interface of Unix ）扩展提供的。使用以“ereg</em>”为前缀命名的函数；</p><p>PCRE来源于Perl语言，而Perl是对字符串操作功能最强大的语言之一，PHP的最初版本就是由Perl开发的产品。<br>PCRE语法支持更多特性，比POSIX语法更强大。因此，本文主要介绍 PCRE 语法的正则表达式</p><h3 id="4-正则表达式的组成"><a href="#4-正则表达式的组成" class="headerlink" title="4. 正则表达式的组成"></a>4. 正则表达式的组成</h3><p>在PHP中，一个正则表达式分为三个部分：分隔符、表达式和模式修饰符。</p><h4 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h4><p>分隔符可以使用除字母、数字、反斜线()和空白字符之外的任意 ascii 字符。<br>最常用的分隔符有正斜线(/)、hash符号(#) 以及取反符号(~)。</p><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>有一些特殊字符和非特殊的字符串组成。是决定正则表达式匹配规则的主要部分。</p><h4 id="模式修饰符"><a href="#模式修饰符" class="headerlink" title="模式修饰符"></a>模式修饰符</h4><p>用于开启和关闭某些特定的功能/模式。</p><h2 id="二、分隔符"><a href="#二、分隔符" class="headerlink" title="二、分隔符"></a>二、分隔符</h2><h3 id="1-分隔符的选择"><a href="#1-分隔符的选择" class="headerlink" title="1. 分隔符的选择"></a>1. 分隔符的选择</h3><p>当使用 PCRE 函数的时候，正则表达式必须由分隔符闭合包裹。<br>分隔符可以使用除字母、数字、反斜线()和空白字符之外的任意 ascii 字符。<br>最常用的分隔符有正斜线(/)、hash符号(#) 以及取反符号(~)。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/foo bar/ (合法)</span><br><span class="line">#^[^0-9]$# (合法)</span><br><span class="line">+php+    (合法)</span><br><span class="line">%[a-zA-Z0-9_-]%    (合法)</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#[a-zA-Z0-9_-]/    (非法，两边的分隔符不同)</span><br><span class="line">a[a-zA-Z0-9_-]a    (非法，分隔符不能是字母)</span><br><span class="line">\[a-zA-Z0-9_-]\    (非法，分隔符不能是反斜线(`\`))</span><br></pre></td></tr></table></figure><p><strong>除了上面提到的分隔符，也可以使用括号样式的分隔符，左括号和右括号分别作为开始和结束 分隔符。</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;this is a pattern&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-分隔符的使用"><a href="#2-分隔符的使用" class="headerlink" title="2. 分隔符的使用"></a>2. 分隔符的使用</h3><p><strong>如果分隔符 在正则表达式中使用，它必须使用反斜线()进行转义。</strong><br>果分隔符经常在正则表达式内出现， 最好使用其他分隔符来提高可读性。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/http:\/\//</span><br><span class="line">#http://#</span><br></pre></td></tr></table></figure></p><p><strong>需要将一个字符串放入正则表达式中使用时，可以用 preg_quote() 函数对其进行转义。</strong> 它的第二个参数(可选)可以用于指定需要被转义的分隔符。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//在这个例子中，preg_quote($word) 用于保持星号和正斜杠（/）原文涵义，使其不使用正则表达式中的特殊语义。</span><br><span class="line">$textBody = &quot;This book is */very/* difficult to find.&quot;;</span><br><span class="line">$word = &quot;*/very/*&quot;;</span><br><span class="line">$reg = &quot;/&quot; . preg_quote($word, &#x27;/&#x27;) . &quot;/&quot;;</span><br><span class="line"></span><br><span class="line">echo $reg; // 输出 &#x27;/\*\/very\/\*/&#x27;</span><br><span class="line"></span><br><span class="line">echo preg_replace ($reg, &quot;&lt;i&gt;&quot; . $word . &quot;&lt;/i&gt;&quot;, $textBody); // 输出 &#x27;This book is &lt;i&gt;*/very/*&lt;/i&gt; difficult to find.&#x27;</span><br></pre></td></tr></table></figure></p><p><strong>可以在结束分隔符后面增加模式修饰符来影响匹配效果。</strong></p><p>下面的例子是一个大小写不敏感的匹配<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#[a-z]#i</span><br></pre></td></tr></table></figure></p><h2 id="三、元字符"><a href="#三、元字符" class="headerlink" title="三、元字符"></a>三、元字符</h2><h3 id="1-转义符"><a href="#1-转义符" class="headerlink" title="1. 转义符"></a>1. 转义符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用。例如，’n’ 匹配字符 “n”。’n’ 匹配一个换行符。序列 ‘\’ 匹配 “” 而 “(“ 则匹配 “(“。</td></tr></tbody></table></div><h3 id="2-定位符"><a href="#2-定位符" class="headerlink" title="2. 定位符"></a>2. 定位符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串的开始位置 (或在多行模式下是行首)</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串的结束位置 (或在多行模式下是行尾)</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配一个单词边界，即字与空格间的位置</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">非单词边界匹配</td></tr></tbody></table></div><h3 id="3-限定符"><a href="#3-限定符" class="headerlink" title="3. 限定符"></a>3. 限定符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的子表达式零次或多次。例如，zo 能匹配 “z” 以及 “zoo”。 等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">当该字符作为量词，表示匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table></div><h3 id="4-通用字符"><a href="#4-通用字符" class="headerlink" title="4. 通用字符"></a>4. 通用字符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配一个数字字符。等价于 [0-9]。    </td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配一个非数字字符。等价于 <sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup>。    </td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母、数字、下划线。等价于 [A-Za-z0-9_]。    </td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配非字母、数字、下划线。等价于 <sup><a href="#fn_A-Za-z0-9_" id="reffn_A-Za-z0-9_">A-Za-z0-9_</a></sup>。    </td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。    </td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任何非空白字符。等价于 <sup><a href="#fn_ \f\n\r\t\v" id="reffn_ \f\n\r\t\v"> \f\n\r\t\v</a></sup>。    </td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行符（n、r）之外的任何单个字符。要匹配包括 ‘n’ 在内的任何字符，请使用像”(.    n)”的正则表达式。</td></tr></tbody></table></div><h3 id="5-非打印字符"><a href="#5-非打印字符" class="headerlink" title="5. 非打印字符"></a>5. 非打印字符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行符。等价于 x0a 和 cJ。</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车符。等价于 x0d 和 cM。</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个制表符。等价于 x09 和 cI。</td></tr></tbody></table></div><h3 id="6-多选分支符"><a href="#6-多选分支符" class="headerlink" title="6. 多选分支符"></a>6. 多选分支符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">&#124;</td><td style="text-align:center">竖线字符 &#124; 可以匹配多选一的情况。例如，’z&#124;food’ 能匹配 “z” 或 “food”。’(z&#124;f&#124;g)ood’ 则匹配 “zood”、”food”或 “good”。</td></tr></tbody></table></div><h3 id="7-字符组"><a href="#7-字符组" class="headerlink" title="7. 字符组"></a>7. 字符组</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">[x&#124;y]</td><td style="text-align:center">匹配 x 或 y。例如，’z&#124;food’ 能匹配 “z” 或 “food”。’(z&#124;f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td style="text-align:center">[xyz]</td><td style="text-align:center">字符集合。匹配所包含的任意一个字符。例如， [abc] 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td style="text-align:center"><sup><a href="#fn_xyz" id="reffn_xyz">xyz</a></sup></td><td style="text-align:center">负值字符集合。匹配未包含的任意字符。例如， <sup><a href="#fn_abc" id="reffn_abc">abc</a></sup> 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td style="text-align:center">[a-z]</td><td style="text-align:center">字符范围。匹配指定范围内的任意字符。例如，[a-z] 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:center"><sup><a href="#fn_a-z" id="reffn_a-z">a-z</a></sup></td><td style="text-align:center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，<sup><a href="#fn_a-z" id="reffn_a-z">a-z</a></sup> 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr></tbody></table></div><h3 id="8-非贪婪匹配符"><a href="#8-非贪婪匹配符" class="headerlink" title="8. 非贪婪匹配符"></a>8. 非贪婪匹配符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">?</td><td style="text-align:center">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr></tbody></table></div><h3 id="9-分组"><a href="#9-分组" class="headerlink" title="9. ( )分组"></a>9. ( )分组</h3><div class="table-container"><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">(pattern)</td><td style="text-align:center">匹配 pattern 并获取这一匹配。要匹配圆括号字符，请使用 ( 或 )。</td></tr><tr><td style="text-align:center">(?:pattern)</td><td style="text-align:center">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (&#124;) 来组合一个正则表达式的各个部分是很有用。例如， ‘industr(?:y&#124;ies) 就是一个比 ‘industry&#124;industries’ 更简略的表达式。</td></tr><tr><td style="text-align:center">(?=pattern)</td><td style="text-align:center">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95&#124;98&#124;NT&#124;2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">(?!pattern)</td><td style="text-align:center">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95&#124;98&#124;NT&#124;2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center">(?&lt;=pattern)</td><td style="text-align:center">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”(?&lt;=95&#124;98&#124;NT&#124;2000)Windows”能匹配”2000Windows”中的”Windows”，但不能匹配”3.1Windows”中的”Windows”。</td></tr><tr><td style="text-align:center">(?&lt;!pattern)</td><td style="text-align:center">反向否定预查，与正向否定预查类似，只是方向相反。例如”(?&lt;!95&#124;98&#124;NT&#124;2000)Windows”能匹配”3.1Windows”中的”Windows”，但不能匹配”2000Windows”中的”Windows”。</td></tr></tbody></table></div><h2 id="四、模式修饰符"><a href="#四、模式修饰符" class="headerlink" title="四、模式修饰符"></a>四、模式修饰符</h2><h3 id="1-i（不区分大小写）"><a href="#1-i（不区分大小写）" class="headerlink" title="1. i（不区分大小写）"></a>1. i（不区分大小写）</h3><p>如果设置了这个修饰符，正则表达式中的字母会进行大小写不敏感匹配。</p><h3 id="2-m（多行模式）"><a href="#2-m（多行模式）" class="headerlink" title="2. m（多行模式）"></a>2. m（多行模式）</h3><p>默认情况下，PCRE 认为目标字符串是由单行字符组成的(然而实际上它可能会包含多行)。<br>“行首”元字符 (^) 仅匹配字符串的开始位置， 而”行末”元字符 ($) 仅匹配字符串末尾， 或者最后的换行符(除非设置了 D 修饰符)。</p><p>当这个修饰符设置之后，“行首”元字符 (^) 和“行末”元字符 ($) 就会匹配目标字符串中任意换行符之前或之后，另外，还分别匹配目标字符串的最开始和最末尾位置。</p><p>如果目标字符串 中没有 “n” 字符，或者正则表达式中没有出现 ^ 或 $，设置这个修饰符不产生任何影响。</p><h3 id="3-s（点号通配模式）"><a href="#3-s（点号通配模式）" class="headerlink" title="3. s（点号通配模式）"></a>3. s（点号通配模式）</h3><p>默认情况下，点号（.）不匹配换行符。<br>如果设置了这个修饰符，正则表达式中的点号元字符匹配所有字符，包含换行符。</p><h3 id="4-U（贪婪模式）"><a href="#4-U（贪婪模式）" class="headerlink" title="4. U（贪婪模式）"></a>4. U（贪婪模式）</h3><p>这个修饰符与前面提到的 ? 作用相同，使正则表达式默认为非贪婪匹配，通过量词后紧跟 ? 的方式可以使其转为贪婪匹配。</p><blockquote><p>在非贪婪模式，通常不能匹配超过 pcre.backtrack_limit 的字符。</p></blockquote><h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;def&lt;/b&gt;&#x27;;</span><br><span class="line">$pattern = &#x27;/&lt;b&gt;.*&lt;/b&gt;/&#x27;;</span><br><span class="line">preg_replace($pattern, &#x27;\\1&#x27;, $str);</span><br></pre></td></tr></table></figure><p>.*会匹配 abc&lt;/b&gt;<b>def</p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p><strong>方法一、使用 ? 转为非贪婪模式</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;def&lt;/b&gt;&#x27;;</span><br><span class="line">$pattern = &#x27;/&lt;b&gt;.*?&lt;/b&gt;/&#x27;;</span><br><span class="line">preg_replace($pattern, &#x27;\\1&#x27;, $str);</span><br></pre></td></tr></table></figure><br>.*会分别匹配 abc，def</p><p><strong>方法二、使用修饰符 U 转为非贪婪模式</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;def&lt;/b&gt;&#x27;;</span><br><span class="line">$pattern = &#x27;/&lt;b&gt;.*&lt;/b&gt;/U&#x27;;</span><br><span class="line">preg_replace($pattern, &#x27;\\1&#x27;, $str);</span><br></pre></td></tr></table></figure></p><h3 id="5-u（支持UTF-8转义表达）"><a href="#5-u（支持UTF-8转义表达）" class="headerlink" title="5. u（支持UTF-8转义表达）"></a>5. u（支持UTF-8转义表达）</h3><p>此修正符使正则表达式和目标字符串都被认为是 utf-8 编码。<br>无效的目标字符串会导致 preg_* 函数什么都匹配不到；无效的正则表达式字符串会导致 E_WARNING 级别的错误。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$str = &#x27;中文&#x27;;</span><br><span class="line"></span><br><span class="line">$pattern = &#x27;/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;]+$/u&#x27;;</span><br><span class="line"></span><br><span class="line">if (preg_match($pattern, $str)) &#123;</span><br><span class="line">    echo &#x27;该字符串全是中文&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &#x27;该字符串不全是中文&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-D（结尾限制）"><a href="#6-D（结尾限制）" class="headerlink" title="6. D（结尾限制）"></a>6. D（结尾限制）</h3><p>默认情况下，如果使用 $ 限制结尾字符，当字符串以一个换行符结尾时， $符号还会匹配该换行符(但不会匹配之前的任何换行符)。<br>如果设置这个修饰符，正则表达式中的 $ 符号仅匹配目标字符串的末尾。<br>如果设置了修饰符 m，这个修饰符被忽略。</p><h3 id="7-x"><a href="#7-x" class="headerlink" title="7. x"></a>7. x</h3><p>如果设置了这个修饰符，正则表达式中的没有经过转义的或不在字符类中的空白数据字符总会被忽略， 并且位于一个未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。</p><h3 id="8-A"><a href="#8-A" class="headerlink" title="8. A"></a>8. A</h3><p>如果设置了这个修饰符，正则表达式被强制为”锚定”模式，也就是说约束匹配使其仅从 目标字符串的开始位置搜索。</p><h3 id="9-S"><a href="#9-S" class="headerlink" title="9. S"></a>9. S</h3><p>当一个正则表达式需要多次使用的时候，为了得到匹配速度的提升，值得花费一些时间对其进行一些额外的分析。<br>如果设置了这个修饰符，这个额外的分析就会执行。<br>当前，这种对一个正则表达式的分析仅仅适用于非锚定模式的匹配(即没有单独的固定开始字符)。</p><h2 id="五、反向引用"><a href="#五、反向引用" class="headerlink" title="五、反向引用"></a>五、反向引用</h2><p>使用 ( ) 标记的开始和结束的多个原子，不仅是一个独立的单元，也是一个子表达式。<br>在一个 ( ) 中的子表达式外面，反斜线紧跟一个大于 0 的数字，就是对之前出现的某个子表达式的后向引用。<br>后向引用用于重复搜索前面某个 ( ) 中的子表达式匹配的文本。</p><h3 id="1-在正则表达式中使用反向引用"><a href="#1-在正则表达式中使用反向引用" class="headerlink" title="1. 在正则表达式中使用反向引用"></a>1. 在正则表达式中使用反向引用</h3><p>(sens|respons)e and \1ibility 将会匹配 ”sense and sensibility” 和 ”response and responsibility”， 而不会匹配 ”sense and responsibility”</p><h3 id="2-在PCRE函数中使用反向引用"><a href="#2-在PCRE函数中使用反向引用" class="headerlink" title="2. 在PCRE函数中使用反向引用"></a>2. 在PCRE函数中使用反向引用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;&lt;b&gt;abc&lt;/b&gt;&lt;b&gt;def&lt;/b&gt;&#x27;;</span><br><span class="line">$pattern = &#x27;/&lt;b&gt;(.*)&lt;\/b&gt;&lt;b&gt;(.*)&lt;\/b&gt;/&#x27;;</span><br><span class="line">$replace = preg_replace($pattern, &#x27;\\1&#x27;, $str);</span><br><span class="line">echo $replace . &quot;\n&quot;;</span><br><span class="line"></span><br><span class="line">$replace = preg_replace($pattern, &#x27;\\2&#x27;, $str);</span><br><span class="line">echo $replace . &quot;\n&quot;;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">def</span><br></pre></td></tr></table></figure></p><h2 id="六、正则表达式常用PCRE函数"><a href="#六、正则表达式常用PCRE函数" class="headerlink" title="六、正则表达式常用PCRE函数"></a>六、正则表达式常用PCRE函数</h2><p>PHP官网的讲解已经很详细了，这里不再做多余的论述</p><ul><li>执行正则表达式匹配 preg_match()</li><li>执行正则表达式全局匹配 preg_match_all()</li><li>执行一个正则表达式的搜索和替换 preg_replace()</li><li>执行一个正则表达式搜索并且使用一个回调进行替换 preg_replace_callback()</li><li>执行多个正则表达式搜索并且使用对应回调进行替换 preg_replace_callback_array()</li><li>通过一个正则表达式分隔字符串 preg_split()</li></ul><h2 id="七、应用实践"><a href="#七、应用实践" class="headerlink" title="七、应用实践"></a>七、应用实践</h2><h3 id="1-正则表达式匹配中文"><a href="#1-正则表达式匹配中文" class="headerlink" title="1. 正则表达式匹配中文"></a>1. 正则表达式匹配中文</h3><p>UTF-8汉字编码范围是 0x4e00-0x9fa5<br>在ANSI（GB2312）环境下，0xb0-0xf7，0xa1-0xfe</p><p>UTF-8要使用 u模式修正符 使模式字符串被当成 UTF-8<br>在ANSI（GB2312）环境下，要使用chr将Ascii码转换为字符</p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;中文&#x27;;</span><br><span class="line"></span><br><span class="line">$pattern = &#x27;/[\x&#123;4e00&#125;-\x&#123;9fa5&#125;]/u&#x27;;</span><br><span class="line"></span><br><span class="line">preg_match($pattern, $str, $match);</span><br><span class="line"></span><br><span class="line">var_dump($match);</span><br></pre></td></tr></table></figure><h4 id="ANSI（GB2312）"><a href="#ANSI（GB2312）" class="headerlink" title="ANSI（GB2312）"></a>ANSI（GB2312）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;中文&#x27;;</span><br><span class="line"></span><br><span class="line">$pattern = &#x27;/[&#x27;.chr(0xb0).&#x27;-&#x27;.chr(0xf7).&#x27;][&#x27;.chr(0xa1).&#x27;-&#x27;.chr(0xfe).&#x27;]/&#x27;;</span><br><span class="line"></span><br><span class="line">preg_match($pattern, $str, $match);</span><br><span class="line"></span><br><span class="line">var_dump($match);</span><br></pre></td></tr></table></figure><h3 id="2-正则表达式匹配页面中所有img标签中的src的值。"><a href="#2-正则表达式匹配页面中所有img标签中的src的值。" class="headerlink" title="2. 正则表达式匹配页面中所有img标签中的src的值。"></a>2. 正则表达式匹配页面中所有img标签中的src的值。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str = &#x27;&lt;img alt=&quot;高清大图&quot; id=&quot;color&quot; src=&quot;color.jpg&quot; /&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">$pattern = &#x27;/&lt;img.*?src=&quot;(.*?)&quot;.*?\/?&gt;/i&#x27;;</span><br><span class="line"></span><br><span class="line">preg_match($pattern, $str, $match);</span><br><span class="line"></span><br><span class="line">var_dump($match);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基本知识（一）</title>
      <link href="/posts/640e80ea.html"/>
      <url>/posts/640e80ea.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql中，索引，主键，唯一索引，联合索引的区别"><a href="#mysql中，索引，主键，唯一索引，联合索引的区别" class="headerlink" title="mysql中，索引，主键，唯一索引，联合索引的区别"></a>mysql中，索引，主键，唯一索引，联合索引的区别</h2><p>索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。</p><span id="more"></span><p>普通索引(由关键字KEY或INDEX定义的索引)的唯一任务是加快对数据的访问速度。</p><p>普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值，在为这个数据列创建索引的时候就应该用关键字UNIQUE把它定义为一个唯一索引。也就是说，唯一索引可以保证数据记录的唯一性。</p><p>主键，是一种特殊的唯一索引，在一张表中只能定义一个主键索引，主键用于唯一标识一条记录，使用关键字 PRIMARY KEY 来创建。</p><p>索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。</p><h3 id="对数据库的性能的影响"><a href="#对数据库的性能的影响" class="headerlink" title="对数据库的性能的影响"></a>对数据库的性能的影响</h3><p>索引可以极大的提高数据的查询速度，但是会降低插入、删除、更新表的速度，因为在执行这些写操作时，还要操作索引文件。</p><h2 id="数据库中的事务"><a href="#数据库中的事务" class="headerlink" title="数据库中的事务"></a>数据库中的事务</h2><p>事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。ACID 四大特性,原子性、隔离性、一致性、持久性。</p><h2 id="SQL注入漏洞产生的原因"><a href="#SQL注入漏洞产生的原因" class="headerlink" title="SQL注入漏洞产生的原因"></a>SQL注入漏洞产生的原因</h2><p>SQL注入产生的原因：程序开发过程中不注意规范书写sql语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些sql语句正常执行。</p><h3 id="防止SQL注入的方式"><a href="#防止SQL注入的方式" class="headerlink" title="防止SQL注入的方式"></a>防止SQL注入的方式</h3><p>开启配置文件中的magic_quotes_gpc 和 magic_quotes_runtime设置</p><p>执行sql语句时使用addslashes进行sql语句转换</p><p>Sql语句书写尽量不要省略双引号和单引号。</p><p>过滤掉sql语句中的一些关键词：update、insert、delete、select、 * 。</p><p>提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。</p><p>Php配置文件中设置register_globals为off,关闭全局变量注册</p><p>控制错误信息，不要在浏览器上输出错误信息，将错误信息写到日志文件中。</p><h2 id="MySQL数据库中MyISAM和InnoDB的区别"><a href="#MySQL数据库中MyISAM和InnoDB的区别" class="headerlink" title="MySQL数据库中MyISAM和InnoDB的区别"></a>MySQL数据库中MyISAM和InnoDB的区别</h2><p>区别于其他数据库的最重要的特点就是其插件式的表存储引擎。切记：存储引擎是基于表的，而不是数据库。</p><h3 id="InnoDB存储引擎"><a href="#InnoDB存储引擎" class="headerlink" title="InnoDB存储引擎"></a>InnoDB存储引擎</h3><p>主要面向OLTP(Online Transaction Processing，在线事务处理)方面的应用，是第一个完整支持ACID事务的存储引擎(BDB第一个支持事务的存储引擎，已经停止开发)。</p><p>特点：</p><ul><li>行锁设计、支持外键；</li><li>支持类似于Oracle风格的一致性非锁定读(即：默认情况下读取操作不会产生锁)；</li><li>InnoDB将数据放在一个逻辑的表空间中，由InnoDB自身进行管理。从MySQL4.1版本开始，可以将每个InnoDB存储引擎的表单独存放到一个独立的ibd文件中；</li><li>InnoDB通过使用MVCC(多版本并发控制：读不会阻塞写，写也不会阻塞读)来获得高并发性，并且实现了SQL标准的4种隔离级别(默认为REPEATABLE级别)；</li><li>InnoDB还提供了插入缓冲(insert buffer)、二次写(double write)、自适应哈希索引(adaptive hash index)、预读(read ahead)等高性能和高可用的功能；</li><li>InnoDB采用了聚集(clustered)的方式来存储表中的数据，每张标的存储都按主键的顺序存放(如果没有显式的在建表时指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键)；</li><li>InnoDB表会有三个隐藏字段：除了上面提到了6字节的DB_ROW_ID外，还有6字节的DB_TX_ID(事务ID)和7字节的DB_ROLL_PTR(指向对应回滚段的地址)。这个可以通过innodb monitor看到；</li></ul><h3 id="MyISAM存储引擎"><a href="#MyISAM存储引擎" class="headerlink" title="MyISAM存储引擎"></a>MyISAM存储引擎</h3><p>是MySQL官方提供的存储引擎，主要面向OLAP(Online Analytical Processing,在线分析处理)方面的应用。</p><p>特点：</p><ul><li>不支持事务，支持表所和全文索引。操作速度快；</li><li>MyISAM存储引擎表由MYD和MYI组成，MYD用来存放数据文件，MYI用来存放索引文件。MySQL数据库只缓存其索引文件，数据文件的缓存交给操作系统本身来完成；</li><li>MySQL5.0版本开始，MyISAM默认支持256T的单表数据；</li></ul><h2 id="Myql中的事务回滚机制概述"><a href="#Myql中的事务回滚机制概述" class="headerlink" title="Myql中的事务回滚机制概述"></a>Myql中的事务回滚机制概述</h2><p>事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位，事务回滚是指将该事务已经完成的对数据库的更新操作撤销。</p><p>要同时修改数据库中两个不同表时，如果它们不是一个事务的话，当第一个表修改完，可能第二个表修改过程中出现了异常而没能修改，此时就只有第二个表依旧是未修改之前的状态，而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候，当第一个表修改完，第二表修改出现异常而没能修改，第一个表和第二个表都要回到未修改的状态，这就是所谓的事务回滚。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo NexT主题中集成gitalk评论系统</title>
      <link href="/posts/f4ab1d0d.html"/>
      <url>/posts/f4ab1d0d.html</url>
      
        <content type="html"><![CDATA[<p>gitalk：一个基于 Github Issue 和 Preact 开发的评论插件<br>详情Demo可见：<a href="https://gitalk.github.io/">https://gitalk.github.io/</a></p><span id="more"></span><h2 id="一、Register-Application"><a href="#一、Register-Application" class="headerlink" title="一、Register Application"></a>一、Register Application</h2><p>在GitHub上注册新应用，链接：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p><p>参数说明：<br>Application name： # 应用名称，随意<br>Homepage URL： # 网站URL，如<a href="https://heyiki.github.io">https://heyiki.github.io</a><br>Application description # 描述，随意<br>Authorization callback URL：# 网站URL，<a href="https://heyiki.github.io">https://heyiki.github.io</a></p><p>点击注册后，页面跳转如下，其中Client ID和Client Secret在后面的配置中需要用到，到时复制粘贴到第七步的操作即可</p><h2 id="二、新建theme-主题名称-layout-third-party-comments-gitalk-swig文件，并添加内容："><a href="#二、新建theme-主题名称-layout-third-party-comments-gitalk-swig文件，并添加内容：" class="headerlink" title="二、新建theme/主题名称/layout/_third-party/comments/gitalk.swig文件，并添加内容："></a>二、新建theme/主题名称/layout/_third-party/comments/gitalk.swig文件，并添加内容：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &#x27;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&#x27;,</span><br><span class="line">          clientSecret: &#x27;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&#x27;,</span><br><span class="line">          repo: &#x27;&#123;&#123; theme.gitalk.repo &#125;&#125;&#x27;,</span><br><span class="line">          owner: &#x27;&#123;&#123; theme.gitalk.githubID &#125;&#125;&#x27;,</span><br><span class="line">          admin: [&#x27;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&#x27;],</span><br><span class="line">          id: location.pathname,</span><br><span class="line">          distractionFreeMode: &#x27;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&#x27;gitalk-container&#x27;)           </span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h2 id="三、修改theme-主题名称-layout-partials-comments-swig，添加内容"><a href="#三、修改theme-主题名称-layout-partials-comments-swig，添加内容" class="headerlink" title="三、修改theme/主题名称/layout/_partials/comments.swig，添加内容:"></a>三、修改theme/主题名称/layout/_partials/comments.swig，添加内容:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><font color="red">注意：elseif放置的位置，不要放置在endif后面</font><h2 id="四、修改theme-主题名称-layout-third-party-comments-index-swig，在最后添加内容："><a href="#四、修改theme-主题名称-layout-third-party-comments-index-swig，在最后添加内容：" class="headerlink" title="四、修改theme/主题名称/layout/_third-party/comments/index.swig，在最后添加内容："></a>四、修改theme/主题名称/layout/_third-party/comments/index.swig，在最后添加内容：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &#x27;gitalk.swig&#x27; %&#125;</span><br></pre></td></tr></table></figure><h2 id="五、新建theme-主题名称-source-css-common-components-third-party-gitalk-styl文件，添加内容："><a href="#五、新建theme-主题名称-source-css-common-components-third-party-gitalk-styl文件，添加内容：" class="headerlink" title="五、新建theme/主题名称/source/css/_common/components/third-party/gitalk.styl文件，添加内容："></a>五、新建theme/主题名称/source/css/_common/components/third-party/gitalk.styl文件，添加内容：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.gt-header a, .gt-comments a, .gt-popup a</span><br><span class="line">  border-bottom: none;</span><br><span class="line">.gt-container .gt-popup .gt-action.is--active:before</span><br><span class="line">  top: 0.7em;</span><br></pre></td></tr></table></figure><h2 id="六、修改-source-css-common-components-third-party-third-party-styl，在最后一行上添加内容，引入样式："><a href="#六、修改-source-css-common-components-third-party-third-party-styl，在最后一行上添加内容，引入样式：" class="headerlink" title="六、修改/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式："></a>六、修改/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;gitalk&quot;;</span><br></pre></td></tr></table></figure><h2 id="七、在主题配置文件next-config-yml中添加如下内容："><a href="#七、在主题配置文件next-config-yml中添加如下内容：" class="headerlink" title="七、在主题配置文件next/_config.yml中添加如下内容："></a>七、在主题配置文件next/_config.yml中添加如下内容：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: github帐号  # 例：heyiki</span><br><span class="line">  repo: 仓库名称   # 例：heyiki.github.io</span><br><span class="line">  ClientID: Client ID #第一步注册的Client ID</span><br><span class="line">  ClientSecret: Client Secret #第一步注册的Client Secret</span><br><span class="line">  adminUser: github帐号 #指定可初始化评论账户</span><br><span class="line">  distractionFreeMode: true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> comment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基本知识</title>
      <link href="/posts/3832c6db.html"/>
      <url>/posts/3832c6db.html</url>
      
        <content type="html"><![CDATA[<h2 id="echo、print-r、print、var-dump之间的区别"><a href="#echo、print-r、print、var-dump之间的区别" class="headerlink" title="echo、print_r、print、var_dump之间的区别"></a>echo、print_r、print、var_dump之间的区别</h2><ul><li>echo、print是php语句，var_dump和print_r是函数<span id="more"></span></li><li>echo 输出一个或多个字符串，中间以逗号隔开，没有返回值是语言结构而不是真正的函数，因此不能作为表达式的一部分使用</li><li>print也是php的一个关键字，有返回值 只能打印出简单类型变量的值(如int，string)，如果字符串显示成功则返回true，否则返回false* print_r 可以打印出复杂类型变量的值(如数组、对象）以列表的形式显示，并以array、object开头，但print_r输出布尔值和NULL的结果没有意义，因为都是打印”\n”，因此var_dump()函数更适合调试</li><li>var_dump() 判断一个变量的类型和长度，并输出变量的数值</li></ul><h2 id="常见的HTTP状态码："><a href="#常见的HTTP状态码：" class="headerlink" title="常见的HTTP状态码："></a>常见的HTTP状态码：</h2><ul><li>200 - 请求成功</li><li>301 - 资源(网页等)被永久转义到其他URL</li><li>404 - 请求的资源(网页等)不存在</li><li>505 - 内部服务器错误</li></ul><h2 id="HTTP状态码分类"><a href="#HTTP状态码分类" class="headerlink" title="HTTP状态码分类:"></a>HTTP状态码分类:</h2><ul><li>1** - 信息，服务器收到的请求，需要请求者继续执行操作</li><li>2** - 成功，操作被成功接收并处理</li><li>3** - 重定向，需要进一步的操作以完成请求</li><li>4** - 客户端错误，请求包含语法错误或者无法完成请求</li><li>5** 服务器错误，服务器在处理请求的过程中发生了错误</li></ul><h2 id="语句include和require的区别是什么？为避免多次包含同一文件，可以用-语句代替他们"><a href="#语句include和require的区别是什么？为避免多次包含同一文件，可以用-语句代替他们" class="headerlink" title="语句include和require的区别是什么？为避免多次包含同一文件，可以用(?)语句代替他们"></a>语句include和require的区别是什么？为避免多次包含同一文件，可以用(?)语句代替他们</h2><p>require是无条件包含，也就是如果一个流程里加入require，无论条件成立与否都会先执行require，当文件不存在或者无法打开的时候，会提示错误，并且会终止程序执行</p><p>include有返回值，而require没有(可能因为如此require的速度比include快)，如果被包含的文件不存在的化，那么会提示一个错误，但是程序会继续执行下去</p><p>注意:包含文件不存在或者语法错误的时候require是致命的，而include不是</p><p>require_once表示了只包含一次，避免了重复包含</p><h3 id="include和require的区别其实主要有三点"><a href="#include和require的区别其实主要有三点" class="headerlink" title="include和require的区别其实主要有三点"></a>include和require的区别其实主要有三点</h3><p>1 加载失败的处理方式不同<br>include与require除了在处理引入文件的方式不同外，最大的区别就是：include在引入不存文件时产生一个警告且脚本还会继续执行，<br>require则会导致一个致命性错误且脚本停止执行。</p><p>2 include()是有条件包含函数，而 require()则是无条件包含函数。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(FALSE)&#123;</span><br><span class="line">    include &#x27;file.php&#x27;; //file.php不会被引入</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(FALSE)&#123;</span><br><span class="line">    require &#x27;file.php&#x27;; //file.php将会被引入</span><br><span class="line">｝</span><br></pre></td></tr></table></figure></p><p>3 文件引用方式<br>include有返回值，而require没有<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$retVal = include(&quot;somefile.php&quot;);</span><br><span class="line">if(!empty($retVal))&#123;</span><br><span class="line">    echo &quot;文件包含成功&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;文件包含失败&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>include()执行时需要引用的文件每次都要进行读取和评估,require()执行时需要引用的文件只处理一次(实际上执行时需要引用的文件内容替换了require()语句),可以看出若有包含这些指令之一的代码和可能执行多次的代码,则使用require()效率比较高,若每次执行代码时相读取不同的文件或者有通过一组文件叠代的循环,就使用include(),require通常使用方法，这个函数通常放在 PHP 程序的最前面，PHP 程序在执行前，就会先读入 require 所指定引入的文件，使它变成 PHP 程序网页的一部份。常用的函数，亦可以这个方法将它引入网页中。</p><p>include通常使用方法，这个函数一般是放在流程控制的处理部分中。PHP 程序网页在读到 include 的文件时，才将它读进来。这种方式，可以把程序执行时的流程简单化。</p><p>另外关于include和require后面是否加括号的问题，理论上来说：include和require后面加不加括号对执行结果没有区别，但是加上括号效率较低，所以后面能不加括号就不加括号。</p></blockquote><h2 id="sset、empty、is-null的区别"><a href="#sset、empty、is-null的区别" class="headerlink" title="sset、empty、is_null的区别"></a>sset、empty、is_null的区别</h2><p>isset 判断变量是否定义或者是否为空<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量存在返回ture，否则返回false</span><br><span class="line">变量定义不赋值返回false  unset一个变量，返回false</span><br><span class="line">变量赋值为null，返回false</span><br></pre></td></tr></table></figure></p><h2 id="empty：判断变量的值是否为空，能转换为false的都是空，为空返回true，反之返回false。"><a href="#empty：判断变量的值是否为空，能转换为false的都是空，为空返回true，反之返回false。" class="headerlink" title="empty：判断变量的值是否为空，能转换为false的都是空，为空返回true，反之返回false。"></a>empty：判断变量的值是否为空，能转换为false的都是空，为空返回true，反之返回false。</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;,0,&quot;0&quot;,NULL，FALSE都认为为空，返回true</span><br><span class="line">没有任何属性的对象都认为是空</span><br></pre></td></tr></table></figure><h2 id="is-null：检测传入的值-值、变量、表达式-是否为null"><a href="#is-null：检测传入的值-值、变量、表达式-是否为null" class="headerlink" title="is_null：检测传入的值(值、变量、表达式)是否为null"></a>is_null：检测传入的值(值、变量、表达式)是否为null</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">定义了，但是赋值为Null</span><br><span class="line">定义了，但是没有赋值    unset一个变量</span><br></pre></td></tr></table></figure><h2 id="验证电子邮件的格式函数（正则）"><a href="#验证电子邮件的格式函数（正则）" class="headerlink" title="验证电子邮件的格式函数（正则）"></a>验证电子邮件的格式函数（正则）</h2><p>preg_match(‘/^[\w-.]+@[\w-]+(.\w+)+$/‘,$email);</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库mysql 的两种连接方式以及操作</title>
      <link href="/posts/d61535aa.html"/>
      <url>/posts/d61535aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h2><p>PHP 5 及以上版本建议使用以下方式连接 MySQL :</p><ul><li>MySQLi extension (“i” 意为 improved)</li><li>PDO (PHP Data Objects)</li></ul><span id="more"></span><p>我是该用 MySQLi ，还是 PDO?</p><p>如果你需要一个简短的回答，即 “你习惯哪个就用哪个”。<br>MySQLi 和 PDO 有它们自己的优势：<br>PDO 应用在 12 种不同数据库中， MySQLi 只针对 MySQL 数据库。<br>所以，如果你的项目需要在多种数据库中切换，建议使用 PDO ，这样你只需要修改连接字符串和部分查询语句即可。 使用 MySQLi, 如果不同数据库，你需要重新编写所有代码，包括查询。<br>两者都是面向对象, 但 MySQLi 还提供了 API 接口。<br>两者都支持预处理语句。 预处理语句可以防止 SQL 注入，对于 web 项目的安全性是非常重要的。</p><h3 id="连接-MySQL"><a href="#连接-MySQL" class="headerlink" title="连接 MySQL"></a>连接 MySQL</h3><p>实例 (MySQLi - 面向对象)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line"></span><br><span class="line">// 创建连接</span><br><span class="line">$conn = new mysqli($servername, $username, $password);</span><br><span class="line"></span><br><span class="line">// 检测连接</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot; . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line">echo &quot;连接成功&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (MySQLi - 面向过程)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line"></span><br><span class="line">// 创建连接</span><br><span class="line">$conn = mysqli_connect($servername, $username, $password);</span><br><span class="line"></span><br><span class="line">// 检测连接</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">    die(&quot;Connection failed: &quot; . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;连接成功&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (PDO)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $conn = new PDO(&quot;mysql:host=$servername;&quot;, $username, $password);</span><br><span class="line">    echo &quot;连接成功&quot;; </span><br><span class="line">&#125;</span><br><span class="line">catch(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h3><p>实例 (MySQLi - 面向对象)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn-&gt;close();</span><br></pre></td></tr></table></figure><br>实例 (MySQLi - 面向过程)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqli_close($conn);</span><br></pre></td></tr></table></figure><br>实例 (PDO)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$conn = null;</span><br></pre></td></tr></table></figure></p><h3 id="对数据库进行操作"><a href="#对数据库进行操作" class="headerlink" title="对数据库进行操作"></a>对数据库进行操作</h3><p>实例 (MySQLi - 面向对象)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDB&quot;;</span><br><span class="line"></span><br><span class="line">// 创建连接</span><br><span class="line">$conn = new mysqli($servername, $username, $password, $dbname);</span><br><span class="line">// 检测连接</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot; . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$sql = &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">if ($conn-&gt;query($sql) === TRUE) &#123;</span><br><span class="line">    echo &quot;新记录插入成功&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (MySQLi - 面向过程)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDB&quot;;</span><br><span class="line"></span><br><span class="line">// 创建连接</span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line">// 检测连接</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">    die(&quot;Connection failed: &quot; . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">if (mysqli_query($conn, $sql)) &#123;</span><br><span class="line">    echo &quot;新记录插入成功&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (PDO)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDBPDO&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $conn = new PDO(&quot;mysql:host=$servername;dbname=$dbname&quot;, $username, $password);</span><br><span class="line">    // 设置 PDO 错误模式，用于抛出异常</span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">    $sql = &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">    VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;;</span><br><span class="line">    // 使用 exec() ，没有结果返回 </span><br><span class="line">    $conn-&gt;exec($sql);</span><br><span class="line">    echo &quot;新记录插入成功&quot;;</span><br><span class="line">&#125;</span><br><span class="line">catch(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    echo $sql . &quot;&lt;br&gt;&quot; . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn = null;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="执行多条sql语句"><a href="#执行多条sql语句" class="headerlink" title="执行多条sql语句"></a>执行多条sql语句</h3><p>实例 (MySQLi - 面向对象)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDB&quot;;</span><br><span class="line"></span><br><span class="line">// 创建链接</span><br><span class="line">$conn = new mysqli($servername, $username, $password, $dbname);</span><br><span class="line">// 检查链接</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot; . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$sql = &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;);&quot;;</span><br><span class="line">$sql .= &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;Mary&#x27;, &#x27;Moe&#x27;, &#x27;mary@example.com&#x27;);&quot;;</span><br><span class="line">$sql .= &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;Julie&#x27;, &#x27;Dooley&#x27;, &#x27;julie@example.com&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">if ($conn-&gt;multi_query($sql) === TRUE) &#123;</span><br><span class="line">    echo &quot;新记录插入成功&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . $conn-&gt;error;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (MySQLi - 面向过程)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDB&quot;;</span><br><span class="line"></span><br><span class="line">// 创建链接</span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line">// 检查链接</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot; . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;);&quot;;</span><br><span class="line">$sql .= &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;Mary&#x27;, &#x27;Moe&#x27;, &#x27;mary@example.com&#x27;);&quot;;</span><br><span class="line">$sql .= &quot;INSERT INTO MyGuests (firstname, lastname, email)</span><br><span class="line">VALUES (&#x27;Julie&#x27;, &#x27;Dooley&#x27;, &#x27;julie@example.com&#x27;)&quot;;</span><br><span class="line"></span><br><span class="line">if (mysqli_multi_query($conn, $sql)) &#123;</span><br><span class="line">    echo &quot;新记录插入成功&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (PDO) 事务操作<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDBPDO&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $conn = new PDO(&quot;mysql:host=$servername;dbname=$dbname&quot;, $username, $password);</span><br><span class="line">    // set the PDO error mode to exception</span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line"></span><br><span class="line">    // 开始事务</span><br><span class="line">    $conn-&gt;beginTransaction();</span><br><span class="line">    // SQL 语句</span><br><span class="line">    $conn-&gt;exec(&quot;INSERT INTO MyGuests (firstname, lastname, email) </span><br><span class="line">    VALUES (&#x27;John&#x27;, &#x27;Doe&#x27;, &#x27;john@example.com&#x27;)&quot;);</span><br><span class="line">    $conn-&gt;exec(&quot;INSERT INTO MyGuests (firstname, lastname, email) </span><br><span class="line">    VALUES (&#x27;Mary&#x27;, &#x27;Moe&#x27;, &#x27;mary@example.com&#x27;)&quot;);</span><br><span class="line">    $conn-&gt;exec(&quot;INSERT INTO MyGuests (firstname, lastname, email) </span><br><span class="line">    VALUES (&#x27;Julie&#x27;, &#x27;Dooley&#x27;, &#x27;julie@example.com&#x27;)&quot;);</span><br><span class="line"></span><br><span class="line">    // 提交事务</span><br><span class="line">    $conn-&gt;commit();</span><br><span class="line">    echo &quot;新记录插入成功&quot;;</span><br><span class="line">&#125;</span><br><span class="line">catch(PDOException $e)</span><br><span class="line">&#123;</span><br><span class="line">    // 如果执行失败回滚</span><br><span class="line">    $conn-&gt;rollback();</span><br><span class="line">    echo $sql . &quot;&lt;br&gt;&quot; . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn = null;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><p>实例 (MySQLi - 面向对象)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDB&quot;;</span><br><span class="line"></span><br><span class="line">// 创建连接</span><br><span class="line">$conn = new mysqli($servername, $username, $password, $dbname);</span><br><span class="line">// Check connection</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot; . $conn-&gt;connect_error);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$sql = &quot;SELECT id, firstname, lastname FROM MyGuests&quot;;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line">if ($result-&gt;num_rows &gt; 0) &#123;</span><br><span class="line">    // 输出数据</span><br><span class="line">    while($row = $result-&gt;fetch_assoc()) &#123;</span><br><span class="line">        echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - Name: &quot; . $row[&quot;firstname&quot;]. &quot; &quot; . $row[&quot;lastname&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;0 结果&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$conn-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>实例 (MySQLi - 面向过程)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDB&quot;;</span><br><span class="line"></span><br><span class="line">// 创建连接</span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $dbname);</span><br><span class="line">// Check connection</span><br><span class="line">if (!$conn) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot; . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql = &quot;SELECT id, firstname, lastname FROM MyGuests&quot;;</span><br><span class="line">$result = mysqli_query($conn, $sql);</span><br><span class="line"></span><br><span class="line">if (mysqli_num_rows($result) &gt; 0) &#123;</span><br><span class="line">    // 输出数据</span><br><span class="line">    while($row = mysqli_fetch_assoc($result)) &#123;</span><br><span class="line">        echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - Name: &quot; . $row[&quot;firstname&quot;]. &quot; &quot; . $row[&quot;lastname&quot;]. &quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;0 结果&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mysqli_close($conn);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>使用 PDO (+ 预处理)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;table style=&#x27;border: solid 1px black;&#x27;&gt;&quot;;</span><br><span class="line">echo &quot;&lt;tr&gt;&lt;th&gt;Id&lt;/th&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;&quot;;</span><br><span class="line"></span><br><span class="line">class TableRows extends RecursiveIteratorIterator &#123;</span><br><span class="line">    function __construct($it) &#123; </span><br><span class="line">        parent::__construct($it, self::LEAVES_ONLY); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function current() &#123;</span><br><span class="line">        return &quot;&lt;td style=&#x27;width:150px;border:1px solid black;&#x27;&gt;&quot; . parent::current(). &quot;&lt;/td&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function beginChildren() &#123; </span><br><span class="line">        echo &quot;&lt;tr&gt;&quot;; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    function endChildren() &#123; </span><br><span class="line">        echo &quot;&lt;/tr&gt;&quot; . &quot;\n&quot;;</span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;username&quot;;</span><br><span class="line">$password = &quot;password&quot;;</span><br><span class="line">$dbname = &quot;myDBPDO&quot;;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $conn = new PDO(&quot;mysql:host=$servername;dbname=$dbname&quot;, $username, $password);</span><br><span class="line">    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">    $stmt = $conn-&gt;prepare(&quot;SELECT id, firstname, lastname FROM MyGuests&quot;); </span><br><span class="line">    $stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">    // 设置结果集为关联数组</span><br><span class="line">    $result = $stmt-&gt;setFetchMode(PDO::FETCH_ASSOC); </span><br><span class="line">    foreach(new TableRows(new RecursiveArrayIterator($stmt-&gt;fetchAll())) as $k=&gt;$v) &#123; </span><br><span class="line">        echo $v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">catch(PDOException $e) &#123;</span><br><span class="line">    echo &quot;Error: &quot; . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">$conn = null;</span><br><span class="line">echo &quot;&lt;/table&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><h3 id="遇到错误"><a href="#遇到错误" class="headerlink" title="遇到错误"></a>遇到错误</h3><p>在学习 PDO 创建数据表的时候 ， 我遇到这个报错。</p><blockquote><p>SQLSTATE[3D000]: Invalid catalog name: 1046 No database selected</p></blockquote><p>最后发现问题在这里：</p><blockquote><p>$conn = new PDO(“mysql:host = $servername;dbname = $dbname”,$username,$password);</p></blockquote><p>因为我写代码的习惯是” = “两边都加上空格 ， 但是在这里 dbname = $dbname 的等号两边却不可以存在空格所以正确的写法应该是 dbname=$dbname：</p><blockquote><p>$conn = new PDO(“mysql:host = $servername;dbname=$dbname”,$username,$password);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库三范式</title>
      <link href="/posts/f413b470.html"/>
      <url>/posts/f413b470.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h2><p>1NF是对属性的原子性，要求属性具有原子性，不可再分解；<br><span id="more"></span></p><blockquote><p>表：字段1、 字段2(字段2.1、字段2.2)、字段3 ……<br>如学生（学号，姓名，性别，出生年月日），如果认为最后一列还可以再分成（出生年，出生月，出生日），它就不是一范式了，否则就是；</p></blockquote><h2 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h2><p>2NF是对记录的惟一性，要求记录有惟一标识，即实体的惟一性，即不存在部分依赖；</p><blockquote><p>表：学号、课程号、姓名、学分;<br>这个表明显说明了两个事务:学生信息, 课程信息;由于非主键字段必须依赖主键，这里学分依赖课程号，姓名依赖与学号，所以不符合二范式。</p></blockquote><h2 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h2><p>3NF是对字段的冗余性，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</p><blockquote><p>表: 学号, 姓名, 年龄, 学院名称, 学院电话<br>因为存在依赖传递: (学号) → (学生)→(所在学院) → (学院电话) 。</p></blockquote><p>正确做法：<br>学生：(学号, 姓名, 年龄, 所在学院)；<br>学院：(学院, 电话)。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 数据库三范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP判断请求的客户端</title>
      <link href="/posts/fb2d99f2.html"/>
      <url>/posts/fb2d99f2.html</url>
      
        <content type="html"><![CDATA[<h2 id="请求接口的客户端类型判断"><a href="#请求接口的客户端类型判断" class="headerlink" title="请求接口的客户端类型判断"></a>请求接口的客户端类型判断</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$userAgent = $_SERVER[&#x27;HTTP_USER_AGENT&#x27;];</span><br><span class="line">if (preg_match(&quot;/(iPod|iPad|iPhone)/&quot;, $userAgent))</span><br><span class="line">&#123;</span><br><span class="line">    $type =  1; //IOS客户端</span><br><span class="line">&#125;</span><br><span class="line">elseif (preg_match(&quot;/WP/&quot;, $userAgent))</span><br><span class="line">&#123;</span><br><span class="line">    $type =  2; //WinPhone客户端</span><br><span class="line">&#125;</span><br><span class="line">elseif (preg_match(&quot;/android/i&quot;, $userAgent)) &#123;</span><br><span class="line">    $type =  3; //android客户端</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迅搜-接口配置</title>
      <link href="/posts/9a28783c.html"/>
      <url>/posts/9a28783c.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于php编写app搜索接口"><a href="#关于php编写app搜索接口" class="headerlink" title="关于php编写app搜索接口"></a>关于php编写app搜索接口</h2><p>Xunsearch是一个开源免费、高性能、多功能简单易用的专业全文检索技术方案，官方文档写的对新手不太友好，只能慢慢琢磨，以下是我稍微整理的资料</p><span id="more"></span><h2 id="迅搜手册"><a href="#迅搜手册" class="headerlink" title="迅搜手册"></a>迅搜手册</h2><p><a href="http://www.xunsearch.com/doc/php/guide/start.installation">迅搜官网文档</a><br><a href="https://www.w3cschool.cn/xunsearch/cunxca.html">迅搜w3school手册</a><br>关于安装，请看迅搜官网文档。</p><h2 id="关于迅搜配置"><a href="#关于迅搜配置" class="headerlink" title="关于迅搜配置"></a>关于迅搜配置</h2><p>项目目录下会有<code>xunsou</code>这个文件夹，其目录下有<code>app</code>文件夹，里面就是配置搜索的索引，文件名后缀是<code>.ini</code>结尾，其结构<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">project.name = 项目名（最好是数据库的表名）</span><br><span class="line">project.default_charset = utf-8</span><br><span class="line">server.index = 127.0.0.1:8383</span><br><span class="line">server.search = 127.0.0.1:8384</span><br><span class="line"></span><br><span class="line">[表id]</span><br><span class="line">type = id</span><br><span class="line"></span><br><span class="line">[表title字段名]</span><br><span class="line">type = title</span><br><span class="line"></span><br><span class="line">[add_time]</span><br><span class="line">type = numeric</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>其中tokenizer分词器是很重要的，比如一个字作分词xlen([1]) ，<a href="http://www.xunsearch.com/doc/php/guide/ini.guide">项目配置详解</a>。</p><h2 id="编写api接口"><a href="#编写api接口" class="headerlink" title="编写api接口"></a>编写api接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public function search_club()</span><br><span class="line">    &#123;</span><br><span class="line">        include (ROOT_PATH . &#x27;/xunsou/lib/XS.php&#x27;);</span><br><span class="line">        $keyword = $_GET[&#x27;keyword&#x27;]; //获取搜索的字段</span><br><span class="line">        $xs = new XS(&#x27;迅搜配置的project.name&#x27;);</span><br><span class="line">        $search = $xs-&gt;search;   //  获取搜索对象</span><br><span class="line">        $search-&gt;setLimit(20);</span><br><span class="line">        $docs = $search-&gt;setQuery( $keyword)-&gt;search();  //  搜索 ‘ 测试’</span><br><span class="line"></span><br><span class="line">        $data1=array();</span><br><span class="line">        //搜索返回的是一个对象，所以用foreach</span><br><span class="line">        foreach ($docs as $key=&gt;$val) &#123;</span><br><span class="line">            $data1[$key][&#x27;id&#x27;] = $val-&gt;id;</span><br><span class="line">            $data1[$key][&#x27;title&#x27;] = $val-&gt;title;</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;json_result($data1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="服务器需要配置"><a href="#服务器需要配置" class="headerlink" title="服务器需要配置"></a>服务器需要配置</h2><p>导入 MySQL 数据库的 dbname.tbl_post 表到 demo 项目中，并且平滑重建</p><ul><li>util/Indexer.php —rebuild —source=mysql://root:pass@localhost/dbname —sql=”SELECT * FROM tbl_post” —project=迅搜配置的项目名称</li></ul><p>例如导入的表为商品，需要在服务器进行定时任务</p><p>输入<strong>crontab -e </strong>打开脚本</p><p>例如一分钟进行一次脚本<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * util/Indexer.php --rebuild --source=mysql://root:pass@localhost/dbname --sql=&quot;SELECT * FROM tbl_post&quot; --project=迅搜配置的项目名称</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 迅搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到新电脑or刷机重新配置</title>
      <link href="/posts/cc616880.html"/>
      <url>/posts/cc616880.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo博客部署恢复"><a href="#Hexo博客部署恢复" class="headerlink" title="Hexo博客部署恢复"></a>Hexo博客部署恢复</h2><p>还在担心电脑刷机之后，hexo部署已经没了吗？说说我的吧，一开始我是把hexo部署到D盘，所以刷机之后不影响。还是要把hexo博客备份一下，不然之前写的都不见了。以下进入正题！！！<br><span id="more"></span></p><h2 id="安装-node-js-和-git-for-windows"><a href="#安装-node-js-和-git-for-windows" class="headerlink" title="安装 node.js 和 git for windows"></a>安装 node.js 和 git for windows</h2><p><a href="https://git-scm.com/">Git安装地址</a><br><a href="https://nodejs.org/en/">nodejs安装地址</a> —-看到LTS的就是稳定版的</p><h2 id="配置git个人信息，生成新的ssh密钥"><a href="#配置git个人信息，生成新的ssh密钥" class="headerlink" title="配置git个人信息，生成新的ssh密钥"></a>配置git个人信息，生成新的ssh密钥</h2><p>打开<code>Git Bash</code>，输入以下代码（以下均用Git Bash操作）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱地址&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</span><br></pre></td></tr></table></figure><br>只要配置好了用户名和邮箱，在生成ssh密钥的时候，一直按回车键，使用默认值即可。</p><p>只要不出现什么问题，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，打开id_rsa.pub文件，复制里面的内容。<br>将id_rsa.pub文件里面的内容，复制到<a href="https://github.com/">GitHub</a>的Setting下的SSH and GPG Keys中，点击New SSH key配置。</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h3 id="关于hexo安装失败"><a href="#关于hexo安装失败" class="headerlink" title="关于hexo安装失败"></a>关于hexo安装失败</h3><p>可能国内npm源有问题，往一下代码执行一遍<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><br>安装成功之后，打开你原来的hexo博客，只保留 <code>_config.yml，theme/，source/，scaffolds/，package.json，.gitignore</code> ，其余将文件删除（<font color=red>为了防止删错，还是备份一遍</font>）。</p><h2 id="在博客目录文件下，打开Git-Bash执行"><a href="#在博客目录文件下，打开Git-Bash执行" class="headerlink" title="在博客目录文件下，打开Git Bash执行"></a>在博客目录文件下，打开Git Bash执行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save //hexo d 部署到git插件</span><br></pre></td></tr></table></figure><h2 id="最后执行hexo-g-hexo-d，看看是否成功"><a href="#最后执行hexo-g-hexo-d，看看是否成功" class="headerlink" title="最后执行hexo g hexo d，看看是否成功"></a>最后执行hexo g hexo d，看看是否成功</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>如果成功则已经完成，可以编写博客了！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基本概念</title>
      <link href="/posts/e75800fe.html"/>
      <url>/posts/e75800fe.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h2><p>是为了度量和提高被测软件质量，是对被测软件进行工程设计、实施和维护的整个生命周期的过程。</p><h2 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h2><p>1.测试以发现缺陷为目的<br>2.最大可能找出最多错误<br>3.执行有限测试用例并发现错误<br>4.检查软件是否满足定义的各种需求<br>5.执行测试用例，发现至今未发现错误即为成功的测试<br><span id="more"></span></p><h2 id="软件研发模型"><a href="#软件研发模型" class="headerlink" title="软件研发模型"></a>软件研发模型</h2><p>软件研发模型是软件生产过程中分析、设计、研发活动所遵循的框架模式。采取合适的研发模型将会提高软件研发效率，降低研发成本，提高质量。<br>目前较为流行的研发模型主要有：瀑布模型、原型模型、螺旋模型、RUP模型和敏捷模型。</p><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><p>瀑布模型将软件生命周期划分为开发计划、需求分析、设计、编码、测试和运行维护这6个基本活动过程。</p><h3 id="需求测试（Requirement-Testing）"><a href="#需求测试（Requirement-Testing）" class="headerlink" title="需求测试（Requirement Testing）"></a>需求测试（Requirement Testing）</h3><p>需求测试是在需求分析阶段开始就搞。需求测试的重点是：检查规格说明书中是否存在描述不正确、定义模糊、需求用例不正确、语言存在二义性等问题。完整性、正确性、无二义性、可测试性、一致性。</p><h2 id="软件测试级别"><a href="#软件测试级别" class="headerlink" title="软件测试级别"></a>软件测试级别</h2><p>单元测试 集成测试 系统测试 验证测试 验收测试（Alpha测试 Beta测试 UAT测试）</p><h2 id="软件测试类型"><a href="#软件测试类型" class="headerlink" title="软件测试类型"></a>软件测试类型</h2><p>功能测试 性能测试 负载测试 压力测试 安全性测试 兼容性测试 确认测试 冒烟测试 回归测试</p><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>测试用例（Test Case）是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或核实是否满足某个特定需求。</p><h2 id="常见的软件测试方法"><a href="#常见的软件测试方法" class="headerlink" title="常见的软件测试方法"></a>常见的软件测试方法</h2><p>1.黑盒测试<br>    黑盒测试又称功能测试、数据驱动测试或基于需求规格说明书的功能测试。该测试方法验证被测对象使用质量及外部质量表现。<br>    黑盒测试的测试方法有：等价类划分、边界值分析法、猜错法、随机数法、因果图。<br>2.白盒测试<br>    白盒测试，又称为结构测试、逻辑驱动测试或基于程序代码内部构成的测试。<br>    白盒测试的测试方法有：代码检查法、程序变异、静态结构分析法、静态质量度量法、符号测试法、逻辑覆盖法、域测试、Z路径覆盖和基本路径测试法。<br>3.灰盒测试<br>    灰盒测试就是白盒测试加黑盒测试，性能测试和自动化测试就采用了灰盒测试的方法。<br>4.静态测试<br>    不执行被测对象的程序代码、不运行被测对象而实施的测试活动，发现缺陷的过程。<br>    静态测试包含阅读程序代码、文档资料等。<br>5.动态测试<br>    动态测试运行被测对象的程序代码，执行测试用例，检查系统软件运行结果与预期结果的差异。<br>6.手工测试<br>7.自动化测试</p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><h3 id="测试用例管理工具"><a href="#测试用例管理工具" class="headerlink" title="测试用例管理工具"></a>测试用例管理工具</h3><p>TestLink</p><h3 id="缺陷管理工具"><a href="#缺陷管理工具" class="headerlink" title="缺陷管理工具"></a>缺陷管理工具</h3><p>BugFree</p><h3 id="自动化测试工具"><a href="#自动化测试工具" class="headerlink" title="自动化测试工具"></a>自动化测试工具</h3><p>QTP（Quick Test Professiona）</p><h3 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h3><p>Loadrunner</p><p><a href="http://www.51testing.com/html/index.html">软件测试网</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP数组</title>
      <link href="/posts/c8368d3d.html"/>
      <url>/posts/c8368d3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、数组的简介和分类"><a href="#1、数组的简介和分类" class="headerlink" title="1、数组的简介和分类"></a>1、数组的简介和分类</h2><p>数组的定义：数组是PHP中的重要数组类型之一，是复合类型；数据的集合，在PHP中数组是一个有序映射。<br>数组的分类：</p><blockquote><p>索引数组：数组下标的数字；<br>关联数组：数组的下标为字符是关联数组。</p><font color="red">注意：PHP中数组其实是不区分索引还是关联数组，都是根据键名找到对应的键值。</font></blockquote><hr><span id="more"></span><h2 id="2、定义数组"><a href="#2、定义数组" class="headerlink" title="2、定义数组"></a>2、定义数组</h2><h3 id="通过array-形式"><a href="#通过array-形式" class="headerlink" title="通过array()形式"></a>通过array()形式</h3><blockquote><p>①array()空数组<br>②array(值,…)下标连续的索引数组，下标从0开始<br>③array(键名=&gt;键值,…)指定下标的索引数组、关联数组、混合数组<br>④通过[]的形式定义数组，代替array()<br>⑤注意：<br>&#160; &#160; 检测是否为数组用var_dump()、gettype()、is_array()<br>&#160; &#160; 数组键名：<br>&#160; &#160; &#160; &#160; a. 使用合法的数字字符串<br>&#160; &#160; &#160; &#160; b. 浮点数会舍掉小数部分，取整作为键名<br>&#160; &#160; &#160; &#160; c. 布尔true-&gt;1,false-&gt;0<br>&#160; &#160; &#160; &#160; d. null-&gt;空字符串<br>&#160; &#160; &#160; &#160; e. 键名重复，后面的会覆盖之前的键值<br>&#160; &#160; &#160; &#160; f. 如果没有指定键名，而且键名不都为负数，新添加的元素的键名为已有键名最大值加1<br>&#160; &#160; &#160; &#160; g. 如果键名都为负数，那么新添加的元素键名从0开始</p></blockquote><h3 id="通过-动态创建"><a href="#通过-动态创建" class="headerlink" title="通过[]动态创建"></a>通过[]动态创建</h3><blockquote><p>$数组名称[]=值，下标连续的索引数组<br>$数组名称[键名]=值，指定下标的索引数组和关联数组</p></blockquote><h3 id="通过range-和compact-快速创建"><a href="#通过range-和compact-快速创建" class="headerlink" title="通过range()和compact()快速创建"></a>通过range()和compact()快速创建</h3><blockquote><p>range()快速创建下标连续的索引数组<br>compact()快速创建关联数组</p></blockquote><h3 id="通过define-定义常量数组"><a href="#通过define-定义常量数组" class="headerlink" title="通过define()定义常量数组"></a>通过define()定义常量数组</h3><hr><h2 id="3、使用数组"><a href="#3、使用数组" class="headerlink" title="3、使用数组"></a>3、使用数组</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><blockquote><p>根据键名找键值<br>$数组名称[键名]|$数组名称{键名}</p></blockquote><hr><h2 id="4、其它类型转换成数组"><a href="#4、其它类型转换成数组" class="headerlink" title="4、其它类型转换成数组"></a>4、其它类型转换成数组</h2><blockquote><p>①临时转换  (array)$var<br>②永久转换  settype($var,$type)<br>③注意：<br>&#160; &#160; &#160; &#160;标量类型转换成数组，只有一个元素，键名为0，键值为变量的值<br>&#160; &#160; &#160; &#160;null转换成数组是空数组<br>&#160; &#160; &#160; &#160;不要把对象和资源转换成数组</p></blockquote><hr><h2 id="5、遍历数组"><a href="#5、遍历数组" class="headerlink" title="5、遍历数组"></a>5、遍历数组</h2><h3 id="通过foreach遍历数组"><a href="#通过foreach遍历数组" class="headerlink" title="通过foreach遍历数组"></a>通过foreach遍历数组</h3><blockquote><p>①只要键值 -&gt; foreach($数组名称 as $val){循环体;}<br>②既要键名又要键值 -&gt; foreach($数组名称 as $key=&gt;$val){循环体;}<br>③注意：<br>&#160; &#160; 可以通过:和endforeach代替{}<br>&#160; &#160; PHP7中foreach的改变：<br>&#160; &#160; &#160; &#160;a. foreach循环对数组内部指针不再起作用<br>&#160; &#160; &#160; &#160;b. 按照值进行循环的时候，foreach是对该数组的值得拷贝<br>&#160; &#160; &#160; &#160;c. 按照引用进行循环的时候，再循环体内修改数组对循环有影响<br>④相关资料<br><a href="http://www.laruence.com/2008/11/20/630.html">http://www.laruence.com/2008/11/20/630.html</a><br><a href="https://segmentfault.com/a/1190000005044925">https://segmentfault.com/a/1190000005044925</a></p></blockquote><h3 id="通过指针函数遍历"><a href="#通过指针函数遍历" class="headerlink" title="通过指针函数遍历"></a>通过指针函数遍历</h3><blockquote><p>key()<br>current()<br>next()<br>prev()<br>end()<br>reset()</p></blockquote><h3 id="通过each-和list-函数遍历数组"><a href="#通过each-和list-函数遍历数组" class="headerlink" title="通过each()和list()函数遍历数组"></a>通过each()和list()函数遍历数组</h3><blockquote><p>each()<br>list()</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令和团队协作流程</title>
      <link href="/posts/11560a5d.html"/>
      <url>/posts/11560a5d.html</url>
      
        <content type="html"><![CDATA[<h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">git init //初始化本地git环境</span><br><span class="line">git clone XXX//克隆一份代码到本地仓库</span><br><span class="line">git pull //把远程库的代码更新到工作台</span><br><span class="line">git pull --rebase origin master //强制把远程库的代码跟新到当前分支上面</span><br><span class="line">git fetch //把远程库的代码更新到本地库</span><br><span class="line">git add . //把本地的修改加到stage中</span><br><span class="line">git commit -m &#x27;comments here&#x27; //把stage中的修改提交到本地库</span><br><span class="line">git push //把本地库的修改提交到远程库中</span><br><span class="line">git branch -r/-a //查看远程分支/全部分支</span><br><span class="line">git checkout master/branch //切换到某个分支</span><br><span class="line">git checkout -b test //新建test分支</span><br><span class="line">git branch -d test //删除test分支</span><br><span class="line">git merge master //假设当前在test分支上面，把master分支上的修改同步到test分支上</span><br><span class="line">git merge tool //调用merge工具</span><br><span class="line">git stash //把未完成的修改缓存到栈容器中</span><br><span class="line">git stash list //查看所有的缓存</span><br><span class="line">git stash pop //恢复本地分支到缓存状态</span><br><span class="line">git blame someFile //查看某个文件的每一行的修改记录（）谁在什么时候修改的）</span><br><span class="line">git status //查看当前分支有哪些修改</span><br><span class="line">git log //查看当前分支上面的日志信息</span><br><span class="line">git diff //查看当前没有add的内容</span><br><span class="line">git diff --cache //查看已经add但是没有commit的内容</span><br><span class="line">git diff HEAD //上面两个内容的合并</span><br><span class="line">git reset --hard HEAD //撤销本地修改</span><br><span class="line">echo $HOME //查看git config的HOME路径</span><br><span class="line">export $HOME=/c/gitconfig //配置git config的HOME路径</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="克隆一个全新的项目，完成新功能并且提交："><a href="#克隆一个全新的项目，完成新功能并且提交：" class="headerlink" title="克隆一个全新的项目，完成新功能并且提交："></a>克隆一个全新的项目，完成新功能并且提交：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git clone XXX //克隆代码库</span><br><span class="line">git checkout -b test //新建分支</span><br><span class="line">modify some files //完成修改</span><br><span class="line">git add . //把修改加入stage中</span><br><span class="line">git commit -m &#x27;&#x27; //提交修改到test分支</span><br><span class="line">review代码</span><br><span class="line">git checkout master //切换到master分支</span><br><span class="line">git pull //更新代码</span><br><span class="line">git checkout test //切换到test分支</span><br><span class="line">git meger master //把master分支的代码merge到test分支</span><br><span class="line">git push origin 分支名//把test分支的代码push到远程库</span><br></pre></td></tr></table></figure><h3 id="修复目前正在test分支上的bug处理或者处理未完成的项目"><a href="#修复目前正在test分支上的bug处理或者处理未完成的项目" class="headerlink" title="修复目前正在test分支上的bug处理或者处理未完成的项目"></a>修复目前正在test分支上的bug处理或者处理未完成的项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git stash</span><br><span class="line">git checkout bugFixBranch</span><br><span class="line">git pull --rebase origin master</span><br><span class="line">fix the bug</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;&#x27;</span><br><span class="line">git push</span><br><span class="line">git checkout test</span><br><span class="line">git stash pop</span><br><span class="line">continue new feature&#x27;s development</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo d命令错误情况</title>
      <link href="/posts/96f75afa.html"/>
      <url>/posts/96f75afa.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-d-权限问题"><a href="#hexo-d-权限问题" class="headerlink" title="hexo d 权限问题"></a>hexo d 权限问题</h2><p>今天整理下博客，准备更新到github的时候，居然报错（报错图片如下）：<br><img src="https://cdn.jsdelivr.net/gh/Heyiki/CDN@main/img/hexo_error.PNG" width = "800" height = "600" alt="" align=center/><br>然后上百度找了好多大佬的描述，有的说手动删掉.deploy_git文件，然后再重新输入命令<br><span id="more"></span><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><br>结果我试了一下，还是报同样的错误，不知道你们试了怎么样。</p><h2 id="ssh-keys重新添加"><a href="#ssh-keys重新添加" class="headerlink" title="ssh keys重新添加"></a>ssh keys重新添加</h2><p>由于上个方法试了不行，后来发现这个方法，就是在你的博客文件下打开Git Bash输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><br>这两个是查看自己设置的用户名和邮箱，如果不对，那自行修改一下<br>核对之后，删除.ssh文件夹（直接搜索该文件夹）下的known_hosts(手动删除即可，不需要git），再输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your@email.com&quot;（请填你设置的邮箱地址）</span><br></pre></td></tr></table></figure><br>然后系统会自动在.ssh文件夹下生成两个文件，id_rsa和id_rsa.pub，用记事本打开id_rsa.pub，复制全部内容，<br>打开<a href="https://github.com/">https://github.com/</a><br>登陆你的账户，进入设置-&gt;进入ssh设置，把原来的删掉，然后重新添加，把刚刚的内容粘贴上去，点击add ssh key就OK了<br>然后在git中输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><br>出现一堆话，输入yes回车<br>最后在重新部署就OK了</p><h2 id="ssh检测出现22端口报错"><a href="#ssh检测出现22端口报错" class="headerlink" title="ssh检测出现22端口报错"></a>ssh检测出现22端口报错</h2><p>在 .ssh 文件夹下创建 config<br>用文本打开，将下列复制进去<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com  </span><br><span class="line">User (github的邮箱)  </span><br><span class="line">Hostname ssh.github.com  </span><br><span class="line">PreferredAuthentications publickey  </span><br><span class="line">IdentityFile ~/.ssh/id_rsa  </span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><br>然后在Git Bash输入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@ssh.github.com</span><br></pre></td></tr></table></figure><br>再输入yes即可</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+七牛云资源部署</title>
      <link href="/posts/e82b5016.html"/>
      <url>/posts/e82b5016.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h3><p><a href="https://portal.qiniu.com/">七牛云</a>, 个人注册则选择申请个人账户，同理企业账户则申请企业账户。在注册完成之后，需要实名认证，这个时间快需要一天通过，否则慢慢等吧。登陆并进入资源主页，找到“对象存储”选择“立即添加”，新建一个存储空间。</p><ul><li>存储空间名称 随意</li><li>存储区域 建议选择自己所在地归属区域</li><li>访问控制 公开空间：所有人都能访问得到，私有空间：需要携带密钥访问。<span id="more"></span></li></ul><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>进入blog存储空间，进入内容管理，上传你的资源文件，文件上传完成，点击文件右侧的眼睛标志即可查看外链地址。在博客项目中使用图片资源的时候直接将资源路径替换成外链地址即可。<code>![](http://xxxxxx.clouddn.com/images/1.png)</code> 如果需要定义图片样式，则运用html方法写，如：<code>&lt;img src=&quot;xxxxx.clouddn.com/1.png&quot; width = &quot;800&quot; height = &quot;600&quot; alt=&quot;&quot; align=center /&gt;</code><br><img src="https://npm.elemecdn.com/heyiki-cdn/img/qiniuyun-1.png" width = "800" height = "600" alt="" align=center /></p><h3 id="3-上传文件"><a href="#3-上传文件" class="headerlink" title="3.上传文件"></a>3.上传文件</h3><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/qiniuyun-2.png" width = "800" height = "600" alt="" align=center /></p><h3 id="4-外链获取"><a href="#4-外链获取" class="headerlink" title="4.外链获取"></a>4.外链获取</h3><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/qiniuyun-3.png" width = "800" height = "600" alt="" align=center /></p><h3 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h3><ul><li>a.文件上传前先填写一下“路径前缀”，七牛云里面文件管理没有文件夹的概念，只能以这个前缀进行分类。</li><li>b.未填写路径前缀上传文件后默认名称即文件名，文件多了以后，没有前缀的这种方式，就会变得极难管理。</li><li>c.存储方式根据自己资源的使用频率进行选择，单位时间请求频率较低的资源可以选择低频存储，其它情况那就是标准存储了。</li><li>d.由于七牛云提供的测试外链有一定的期限，所有最好是自己购买域名进行配置使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 七牛云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python运算符优先级示例</title>
      <link href="/posts/4e5f61f0.html"/>
      <url>/posts/4e5f61f0.html</url>
      
        <content type="html"><![CDATA[<h3 id="下表列出了从最高优先级到最低优先级的所有运算符，如下所示"><a href="#下表列出了从最高优先级到最低优先级的所有运算符，如下所示" class="headerlink" title="下表列出了从最高优先级到最低优先级的所有运算符，如下所示"></a>下表列出了从最高优先级到最低优先级的所有运算符，如下所示</h3><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:left">运算符</th><th style="text-align:left">描述 </th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:left"><code>**</code></td><td style="text-align:left">指数(次幂)运算    </td></tr><tr><td style="text-align:center">2</td><td style="text-align:left"><code>~</code> <code>+</code> <code>-</code></td><td style="text-align:left">补码，一元加减(最后两个的方法名称是<code>+@</code>和<code>-@</code>)    </td></tr><tr><td style="text-align:center">3</td><td style="text-align:left"><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td style="text-align:left">乘法，除法，模数和地板除    </td></tr><tr><td style="text-align:center">4</td><td style="text-align:left"><code>+</code> <code>-</code></td><td style="text-align:left">加法减法    </td></tr><tr><td style="text-align:center">5</td><td style="text-align:left"><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td style="text-align:left">向右和向左位移    </td></tr><tr><td style="text-align:center">6</td><td style="text-align:left"><code>&amp;</code></td><td style="text-align:left">按位与    </td></tr><tr><td style="text-align:center">7</td><td style="text-align:left"><code>^</code>  &#124;</td><td style="text-align:left">按位异或和常规的“<code>OR</code>”    </td></tr><tr><td style="text-align:center">8</td><td style="text-align:left"><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td style="text-align:left">比较运算符    </td></tr><tr><td style="text-align:center">9</td><td style="text-align:left"><code>&lt;&gt;</code> <code>==</code> <code>!=</code></td><td style="text-align:left">等于运算符    </td></tr><tr><td style="text-align:center">10</td><td style="text-align:left"><code>=</code> <code>%=</code> <code>/=</code> <code>//=</code> <code>-=</code> <code>+=</code> <code>*=</code> <code>**=</code></td><td style="text-align:left">赋值运算符    </td></tr><tr><td style="text-align:center">11</td><td style="text-align:left"><code>is</code> <code>is not</code></td><td style="text-align:left">身份运算符    </td></tr><tr><td style="text-align:center">12</td><td style="text-align:left"><code>in</code> <code>not in</code></td><td style="text-align:left">成员运算符    </td></tr><tr><td style="text-align:center">13</td><td style="text-align:left"><code>not</code> <code>or</code> <code>and</code></td><td style="text-align:left">逻辑运算符 </td></tr></tbody></table></div><span id="more"></span><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#! /usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line">#save file : operators_precedence_example.py</span><br><span class="line"></span><br><span class="line">#!/usr/bin/python3</span><br><span class="line"></span><br><span class="line">a = 20</span><br><span class="line">b = 10</span><br><span class="line">c = 15</span><br><span class="line">d = 5</span><br><span class="line"></span><br><span class="line">print (&quot;a:%d b:%d c:%d d:%d&quot; % (a,b,c,d ))</span><br><span class="line">e = (a + b) * c / d       #( 30 * 15 ) / 5</span><br><span class="line">print (&quot;Value of (a + b) * c / d is &quot;,  e)</span><br><span class="line"></span><br><span class="line">e = ((a + b) * c) / d     # (30 * 15 ) / 5</span><br><span class="line">print (&quot;Value of ((a + b) * c) / d is &quot;,  e)</span><br><span class="line"></span><br><span class="line">e = (a + b) * (c / d)    # (30) * (15/5)</span><br><span class="line">print (&quot;Value of (a + b) * (c / d) is &quot;,  e)</span><br><span class="line"></span><br><span class="line">e = a + (b * c) / d      #  20 + (150/5)</span><br><span class="line">print (&quot;Value of a + (b * c) / d is &quot;,  e)</span><br></pre></td></tr></table></figure><p>以上实例输出结果为:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Value of (a + b) * c / d is  90.0</span><br><span class="line">Value of ((a + b) * c) / d is  90.0</span><br><span class="line">Value of (a + b) * (c / d) is  90.0</span><br><span class="line">Value of a + (b * c) / d is  50.0</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5路由</title>
      <link href="/posts/5553d38b.html"/>
      <url>/posts/5553d38b.html</url>
      
        <content type="html"><![CDATA[<h2 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h2><blockquote><p>Route::rule(‘路由表达式’,’路由地址’,’请求类新’,’路由参数(数组)’,’变量规则(数组)’);<br>如:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Route::rule(&#x27;new/:id&#x27;,&#x27;index/News/read&#x27;,&#x27;get&#x27;);</span><br></pre></td></tr></table></figure><br>route 目录下的任何路由定义文件都是有效的，默认的路由定义文件是 <code>route.php</code><br><span id="more"></span></p><h3 id="我们访问："><a href="#我们访问：" class="headerlink" title="我们访问："></a>我们访问：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://serverName/new/5</span><br></pre></td></tr></table></figure><h3 id="会自动路由到："><a href="#会自动路由到：" class="headerlink" title="会自动路由到："></a>会自动路由到：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://serverName/index/news/read/id/5</span><br></pre></td></tr></table></figure><h3 id="并且原来的访问地址会自动失效。"><a href="#并且原来的访问地址会自动失效。" class="headerlink" title="并且原来的访问地址会自动失效。"></a>并且原来的访问地址会自动失效。</h3></blockquote><h2 id="快捷方式注册"><a href="#快捷方式注册" class="headerlink" title="快捷方式注册"></a>快捷方式注册</h2><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">    1</td><td style="text-align:center">GET</td><td style="text-align:center">GET请求</td><td style="text-align:center">get    </td></tr><tr><td style="text-align:center">    2</td><td style="text-align:center">POST</td><td style="text-align:center">POST请求</td><td style="text-align:center">post    </td></tr><tr><td style="text-align:center">    3</td><td style="text-align:center">PUT</td><td style="text-align:center">PUT请求</td><td style="text-align:center">put    </td></tr><tr><td style="text-align:center">    4</td><td style="text-align:center">DELETE</td><td style="text-align:center">DELETE请求</td><td style="text-align:center">delete    </td></tr><tr><td style="text-align:center">    5</td><td style="text-align:center">PATCH</td><td style="text-align:center">PATCH请求</td><td style="text-align:center">patch    </td></tr><tr><td style="text-align:center">    6</td><td style="text-align:center">*</td><td style="text-align:center">任何请求类型</td><td style="text-align:center">any    </td></tr></tbody></table></div><h2 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h2><p>如果路由表达式有多个相同的，则推荐路由分组，格式如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Route::group(&#x27;new/product&#x27;,function ()&#123;</span><br><span class="line">   Route::get(&#x27;/by_category&#x27;,&#x27;index/News/getRead&#x27;);</span><br><span class="line">   Route::get(&#x27;/:id&#x27;,&#x27;index/News/getCheck&#x27;,[],[&#x27;id&#x27;=&gt;&#x27;\d+&#x27;]);</span><br><span class="line">   Route::get(&#x27;/recent&#x27;,&#x27;index/News/getLook&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> ThinkPHP5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo Next主题安装Livere(来必力)评论插件</title>
      <link href="/posts/7ea691ec.html"/>
      <url>/posts/7ea691ec.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一步：-去Livere官网注册Livere账号。"><a href="#第一步：-去Livere官网注册Livere账号。" class="headerlink" title="第一步： 去Livere官网注册Livere账号。"></a>第一步： 去Livere官网注册Livere账号。</h3><p><a href="https://livere.com">Livere官网</a> (来自韩国，可用邮箱注册)<br><span id="more"></span></p><h3 id="第二步：选择City版（免费），安装。（会生成-来必力City版安装代码以及-data-uid-，或者-进入管理页面-gt-代码管理-gt-一般网站，可以查看）"><a href="#第二步：选择City版（免费），安装。（会生成-来必力City版安装代码以及-data-uid-，或者-进入管理页面-gt-代码管理-gt-一般网站，可以查看）" class="headerlink" title="第二步：选择City版（免费），安装。（会生成 来必力City版安装代码以及 data-uid ，或者 进入管理页面-&gt;代码管理-&gt;一般网站，可以查看）"></a>第二步：选择City版（免费），安装。（会生成 来必力City版安装代码以及 data-uid ，或者 进入管理页面-&gt;代码管理-&gt;一般网站，可以查看）</h3><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/Livere1.png" width = "800" height = "600" alt="" align=center/><br><img src="https://npm.elemecdn.com/heyiki-cdn/img/Livere2.png" width = "800" height = "600" alt="" align=center/></p><h3 id="第三步：修改主题下的-config-yml（theme-主题名-config-yml）"><a href="#第三步：修改主题下的-config-yml（theme-主题名-config-yml）" class="headerlink" title="第三步：修改主题下的_config.yml（theme/主题名/_config.yml）"></a>第三步：修改主题下的_config.yml（theme/主题名/_config.yml）</h3><p>在配置文件中找到<img src="https://npm.elemecdn.com/heyiki-cdn/img/Livere3.png"  width = "500" alt="" align=center/><br>把#好去掉，livere_uid: 这里填City版安装代码中的data-uid</p><h3 id="第四步：重新部署"><a href="#第四步：重新部署" class="headerlink" title="第四步：重新部署"></a>第四步：重新部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h3><p><img src="https://npm.elemecdn.com/heyiki-cdn/img/Livere4.png"  width = "800" height = "600" alt="" align=center /></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> comment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo标签插件的使用</title>
      <link href="/posts/25a888a5.html"/>
      <url>/posts/25a888a5.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://npm.elemecdn.com/heyiki-cdn/img/cat-face-pic.jpg" alt="封面"></p><!--less--><h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path 11.png %&#125;</span><br><span class="line">&#123;% asset_img 11.png This is an example image %&#125;</span><br><span class="line">&#123;% asset_link 11.png This is an example image %&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="插入图片-Image"><a href="#插入图片-Image" class="headerlink" title="插入图片 Image"></a>插入图片 Image</h2><p>在文章中插入指定大小的图片（也可以用img标签实现）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="插入图片-Link"><a href="#插入图片-Link" class="headerlink" title="插入图片 Link"></a>插入图片 Link</h2><p>在文章中插入链接，并自动给外部链接添加 target=”_blank” 属性。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>简单的写法，它使用三个或三个以上反引号来包裹。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[language] [title] [url] [link text] </span><br><span class="line">code snippet</span><br></pre></td></tr></table></figure></p><p>在文章中插入代码。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title 说明] [lang:language 指定语言（原生语法也可以指定语言）] [url 网址] [link text 连接显示的文本] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p><p>附加说明和网址（多了的）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %</span><br></pre></td></tr></table></figure><br>效果如下：<br><figure class="highlight plaintext"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure></p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。<br>（跟 &gt; 差不多，区别在于它提供了一个标准格式，可以很方便地插入引言，可包含作者、来源和标题。）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><br>效果如下：<br><blockquote><p>content</p><footer><strong>Heyiki</strong><cite><a href="https://heyiki.github.io/">Blog</a></cite></footer></blockquote></p><h2 id="插入-Swig-标签"><a href="#插入-Swig-标签" class="headerlink" title="插入 Swig 标签"></a>插入 Swig 标签</h2><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">    &#123;% set foo = [1,2,3] %&#125;</span><br><span class="line">    &#123;% for bar in foo %&#125;</span><br><span class="line">        &#123;% bar %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="博客封面图"><a href="#博客封面图" class="headerlink" title="博客封面图"></a>博客封面图</h2><p>先安装<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-less</span><br></pre></td></tr></table></figure><br>随后在博客文章内容下添加<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 博客标题</span><br><span class="line">date: 时间</span><br><span class="line">categories: 分类</span><br><span class="line">tags: 标签</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">![封面](http://xxxxx.jpeg)</span><br><span class="line"></span><br><span class="line">&lt;!--less--&gt;</span><br><span class="line"></span><br><span class="line">这部分为 Content.....</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/posts/7a6a6b5a.html"/>
      <url>/posts/7a6a6b5a.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="d7959092f21c58ff06ce0f22c27075f256bc9380d4916eb0ef20fd5c85a65b0e">fee0cf8d5e991573e55ceaebc2c5bb1808929bd32600a3fe80c317b3108635195fc9a94d93862c742960400ea79f99ebf919dcad16fbfda1fd39f4baa263029b8c63c6736ec3db67abfbfdd1f3e771489efd81c58d044664ce3c40c96b4414d8435ff46552f0392cb4a6bb54e195361d49bc5090a9696681455bdae92dc2046e3c8db71297b596e92179f4b65d10f0f3909e0f8f16d857c7027ea1bc1da0e22f98a8e8aaec11cac20b9cca553589024001aa6c8c2724d7f779ea1b201fac6cf7d51f7024a65a8a51e39a4d8c5c13cfba2d64d047cccaa9f8aabe868abd3469b8450b94493775a286ba95f73eecc027ef92a6e61588420da52139a41536dfc239f8d7f4c25092d9b4811e21a79b91fc6d0a0ec4f5b797aa4c6870720d73930c02f9af44f5b664b65b3d3dfbe3a0416973b451a81e17224a162a6d423946e125886259e9cb3eae38448b02a09cd989548ee717dde2b32e14d1f2dd4aede4501422466232ec07e6ce83a9376af62bab32098726610e266b3ac3c76feccb7076ac05ff98a20e689b37d997560d78f0ced514e4fe8ff3b5d3194007ec44f4144ac7d73d79993ba3f45a8cae9021d5366d791b242d46213793dd5d59ee7c00cb6d69b7d420bac9a7b820a5a9c2e8ba52ee8c11119445cb97b5cb306644296254cb21d1f65eb633aca9395e0ce17cfcb5b06024a11a8494bca5aec5f6e0d6984409b93f71a1015fda2335ee61d6a3fa9d76ba1c1bfaa8183336336d4589ade63bd62dce4387bf4c3cc8fa4d5c8d89cdf15e1bf52446c02f3ff0d63caeba8c41cf4fb1a4c94cfab1371d8f961f2f5012c99ccd4cf74b450768f42b8d35f89666b6b55528f03c3beaa60f5e6674cc3c8ef85749200603b576a85857b8491404d4f97987ba179a81b083d460c622fcb405f5e2ec1af532d4ac1df393c637f3a4d9d25cdcacad050af07efe0a341e542d77af430bb1f4872008ce56de5d122f4a744176a04d8510b94c233d79007b5482699848d11df7877d7399811b9cd74724f69f94ef990b935597e469c5e286e0ad3fddb7ebb08559bb9d204540b702906632ee27acb07d3ec561d1694eba56020f9263e2e8f17fca4a5d2a556436bbf83822a02d88d175a99fffe02595e9a5a3bece7a79a58c32390fa9fe9fd2e11923786a022c55af203d13cfebef50c853e27fe8d3216eb47fe9216229f0496dcaec4aaa621ab96730824da11d7bfa54b83801a5396d774e03b0ebf87d314714faf544f71c0ddd88c72732a9c54283e14d745f00bd67150e3ab0dd5df8338022bfdbdc6b276a8c0c29265496b4d64e9b120206398fd833305ddc3596e3acf5277e877f0cd499a761ab9b4cc495e6ef7e2ef6a59f157a23c769c936b8f8440d95e0a44b82cacd946a3a2e454dc51b02f85754ac9ba10d4000bfb3d650947c1cc4fd5c70f4d844f28f1122d7edd6e92202bbe05b70f007f2e4ab8c1194f8fabc5a3f3d3f60f94390b1ad68de146baa98328ce6c38c796b81be0f701cf0dbabcb873fe714de83118bb177e8944eab5d86573d3f7693d211ddee8ea4d760243c06f86e67d0d3c474bd368142e882bd48dfb68956b5f8b0f0d641a2a097a0fbf25e386d32980b54f7a504d4abe423fc06597ce304a9d3145e93688d14016ac9d92adda51c66019afeffea17d7cab65d261d6831b011b2e8cc38f6db7227472e8362e39255b0f6933c63abd33c19d1f615a78b725e98184cd71b5baec011161a98200ec5ea65faf8a25b95b24114243186f1e46721f33a5557da03d77f01a16ed94ba086c38a9865de6f4c481fc99db974775ee6dfca10f106ca718017602dfba9358d8132513c936fe2e5ebbb0739a646495b3c5fff5b5e37df3deeeaa731eb703d2104a5c0e2c4d78a7763e1b2f30a5eebde0a58ac409cb089be0bd60c37041e67902561b13c39f751e9849a50aab607fef647fc88de9e5fac75c29580bf49a6d13ace1795998b77960bd079c758b4100a22cf1bf52b162bd7c628ad9c9916ee7153cade3f359cd33f615d75af066de1a6ba5b768e4f7fd4d14dbaadf9338eee3080339fb99da1ae1255351d62e8a5528d89aba4015707957cb78d350fe0578ff44f8f543b5514122cb8316c612b7c35b78e2553289eb8a943bd9d52e096c02f71b2776ff046cc31c803292628497960fc59830b40f998683867893cc6f1dafc01f000a312ca1cd3d96713dfd7f157979b1a9e0abd614011f05b54ae8b30b725b166cd5df20471b1c97dc62cf4a34e144cfe304495ae8f7f816712bbec7eeee6c5767329cf1e4434a91b842f003a115bcfecce1c447abf3121a8856f4d3a5b45a05b66ef251a5acbeb4586ca6883f6baeb6899fe888884a2b9f09a6e9186de9ee86f1c272252647e684cbfdb44b23eaf8f1dbaf769d481c9c7894d8ab8e0ba7165590abbd8d242b5a90aae4ca9c4faee2cc950328f62d04b5c8ceed6f6c6e96f3491fa84bc020b95fce576048cba8c0acc3d1b1b4b01038eadfba25ef80fe6f78ebe24ac3ac7f40948d327435bd693fe90aecd009f1d53ece25e78d1a15f5d593ffa5b23ebf5c625062ff0b5e63eb9403566e2f6e4375dbe6adb13ee2c7f0dd9cd96b1033281fcdd2a946f7cf0d1a374e87bcb0f0a3ba33cf5b80db7579fceac14d2e106ffec6b8d96a82468ab9c96a842f3f12e85e3363a7e125ff31b64a7bd9fbd660928c17ba8a9e79504749ad16696ca5a421e007af9b05cda0fa4d8c231b3bf8b56a16eff69bd663a5443b29629d6a2bbf19702bfb54fe2a858bbfd24a245a713ae531673ead821d40d16843d0af81cb6bd68bdef753a2bf4102c925bfd59d73f9f77bcecc51253f1cd81aa53214b6596af722d69b44296fe7ff7c83ce4670f3054ed5b4aaabcff55c8a8ca53811db74a6242e0a94ca8061a44c203b413905daa1d8035406e7b60bfd7cda0380f890cf11a89486792f09d249c48dea3d0ceac1fe0334b58ec2cf001048d0895b1f281ea5f6d33dbc0d586977804fefaa92be54d178f469a1096cbb93089397dcab88a8463522f5b3340d703ca7957d45b6a8fe9a123f73bfbc83685fc97b0267d834589fde478eaa22d3cce8dc1bdb81318857fc48dce1d52ef7b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
